<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xsl"?>
    <!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<!-- <?rfc private='my private memo'?>  Produce a private memo rather than a Xaraya-standard --> 
<?rfc toc='yes'?>

<rfc number="0035" category="std">
  <!-- number: Fill in the number for the RFC -->
  <!-- obsoletes: Comma separated list of RFC numbers which this one obsoletes -->
  <!-- category: std=standard, bcp=best common practice, info=info, exp=experimental, historic=historic -->

  <!-- Front matter is used for identification of author and organization -->
  <front>
    <title>Query Abstraction</title>
    <author initials="F.B." surname="Botelho" fullname="Flavio Borges Botelho">
      <organization>Xaraya Development Group</organization>
      <address>
        <email>nuncanada@ig.com.br</email>
        <uri>http://www.xaraya.com</uri>
      </address>
    </author>
    <date month="January" year="2003"/>
    
    <!-- Initiating team for this RFC -->
    <workgroup>Project Management Committee</workgroup>

    <!-- List keywords for the RFC here -->
    <keyword>SQL</keyword>
    <keyword>database</keyword>
    <keyword>query</keyword>
    <keyword>abstraction</keyword>

    <!-- The abstract summarizes in one or two paragraphs the content of the RFC -->
    <abstract>
      <t>
        This RFC presents a proposal for Query Abstraction inside Xaraya Architeture.
      </t>
    </abstract>
  </front>

  <!-- The middle section is used for the actual content of the RFC -->
  <middle>
    <!-- Introduction is mandatory -->
    <section title="Introduction">
      <t>
        Query Abastraction has been made necessary to give us the hability to generate
        efficient SQL queries which are portable across all our Database Pool. It will
        provide us a way to create queries without any preocupations about the
        underlying storage system.
      </t>
    </section>

    <section title="Pros">
      <t>
         "Allows for the creation of queries in a persistent storage neutral manner.
         Expressed as objects, queries remain consistent across multiple persistent
         storage solutions. Should the database change from RDB to an OODB " or even to
         XML Based Query Languages (A lot of research is being done in the field - References [3,4]),
         "no part of the application will need to be modified." - Reference [2]
      </t>
    </section>

    <section title="Requirements List">
      <t>
         The following is list for sugestions about the implementaion of the Query Abstraction.
         Please add your own.
      </t>
      <t>
      <list style="numbers">
        <t>Turn Xaraya completely database agnostic. [Main reason to be implementing this]</t>
        <t>As we already have a DB Abstraction Library (ADODB), this should be an extension of it. [Gary]</t>
        <t>Devs should be able to keep using their known SQL for simple queries, where portability is not
           a problem. [LadyofDragons]</t>
        <t>The query structure should be able to be passed around the program and receive input from
           many different modules. [Nuncanada]</t>
      </list>
        </t>
    </section>

    <section title="Possible Implementations Reasearch">
      <t>
         There just a few query abstraction packages for PHP, 2 found in the PEAR archives. Both
         have serious shortcomings to our needs (DB_DataObjects and DB_QueryTool).
         Both were made without taking in account the necessity to handle multiple DBs.
      </t>
      <t>
         Research done in other languages for inspiration has shown that most query abstractor out there
         have too simplistic approaches, mainly:
         <list style="numbers">
           <t>Simplistic - They simply support the most basic features of the SELECT query, where the own SQL
              language is already the basic abstraction.</t>
           <t>Placeholders - They simply store 'common' queries with wildcards showing where the input values
              should be added. Clearly this doesnt produce DB independent SQL. </t>
           <t>Stored queries - They store the DB-specific query in files to be called, would be a similar system
              to that of using our MLS system to translate SQL queries to a specific DB dialect.
              This requires you to know how to implement the query in every DB, and although it is able to
              support more complex queries than the simplitic approach. It is not able to translate
              dynamic queries.</t>
          </list>
          
          So there are two possible implementaions:
         <list style="numbers">
           <t>Stored queries - It's not able to translate dynamic queries. And it will probably create
              bigger problems than translations themselves (as i think it is easier to find a translator than
              a DB specialist). Requiring that the Mod Dev himself creates the translation to all possible DBs
              doesnt seem like a good idea.</t>
           <t>OO Query Abstraction - The good part is that it can implement all our requirements and could
              be a link towards future storage systems. Still it will obligate Mod Devs to learn it (for
              more complex queries) instead of using the well known SQL.</t>
          </list>
      </t>
    </section>

    <section title="Implementation Idea">
      <t>The following is where the proposed implementation itself is shown</t>
      <t>
         There should be two separate concepts, that of the query structure which preferebly would
         be a class used only to hold the devs wishes, and drivers to take this annotated wish list
         and transform it into a proper query.
      </t>
      <t> The basic idea is a simple one, you will have a class (our query abstraction class) which
          will *hold* (with pointers, creating a rigid structure of relations) what the developer
          is trying to achieve.
          Then when he thinks he already has everything he wants in the 'shopping list', this
          structured list will be passed over to a specific DB driver which will translate the given
          structure in the best possible query for the developer.
       </t>
    </section>

    <section title="Concept sketch of the proposed code">
      <t>
      
      </t>
    </section>

  </middle>

  <!-- Back matter is used for references and appendices which come after the references -->
  <back>
    <references title="Relevant References">

      <reference target="http://www.ling.uni-potsdam.de/~moocow/projects/diplom/html-plain/node1.html">
        <front>
          <title>relational query feature structures</title>
          <author initials="B" surname="Jurish" fullname="Bryan Jurish">
            <organization></organization>
          </author>
          <date year="2001"/>
          <note title="earlier implementation in perl">
            <t>
              He tried to do what we want in Perl. Still to achive that he only made possible simple queries,
              where the Standard SQL is already the de facto needed abstraction.
            </t>
          </note>
        </front>
      </reference>

      <reference target="http://www.objectwave.com/pdf/tools/JGrinder.pdf">
        <front>
          <title>ObjectWave JGrinder</title>
          <author initials="" surname="" fullname="">
            <organization>ObjectWave</organization>
          </author>
          <date year="2002"/>
          <note title="Proprietary Java implementation without much technical detail (vaporware?)">
            <t>
            </t>
          </note>
        </front>
      </reference>

      <reference target="http://cobase-www.cs.ucla.edu/tech-docs/cqa.ps">
        <front>
          <title>CoBase: A Cooperative Database System</title>
          <author initials="W." surname="Chu" fullname="Wesley W. Chu">
            <organization>Computer Science Department University of California, Los Angeles</organization>
          </author>
          <author initials="Q." surname="Chen" fullname="Qiming Chen">
            <organization>Computer Science Department University of California, Los Angeles</organization>
          </author>
          <author initials="M." surname="Merzbacher" fullname="Matthew Merzbacher">
            <organization>Computer Science Department University of California, Los Angeles</organization>
          </author>
          <date year="2002"/>
          <note title="Cooperative Database System">
            <t>
                How having queries abstracted might help us communicate with future technology. We could
                create a CSQL driver for instance.
            </t>
          </note>
        </front>
      </reference>

      <reference target="http://arxiv.org/abs/cs.db/0110044">
        <front>
          <title>EquiX--A Search and Query Language for XML</title>
          <author initials="S" surname="Cohen" fullname="Sara Cohen">
            <organization></organization>
          </author>
          <author initials="Y" surname="Kanza" fullname="Yaron Kanza">
            <organization></organization>
          </author>
          <author initials="Y" surname="Kogan" fullname="Yakov Kogan">
            <organization></organization>
          </author>
          <author initials="W" surname="Werner" fullname="Werner Nutt">
            <organization></organization>
          </author>
          <author initials="A" surname="Serebrenik" fullname="Alexander Serebrenik">
            <organization></organization>
          </author>
          <author initials="Y" surname="Sagiv" fullname="Yehoshua Sagiv">
            <organization></organization>
          </author>
          <date year="2003"/>
        <note title="proxy database">
          <t>
          </t>
        </note>
        </front>
      </reference>

      <reference target="http://www.cs.duke.edu/~junyi/cps216/report.pdf">
        <front>
          <title>An Approach Towards Web Caching and Prefetching for Database Management Systems</title>
          <author initials="D" surname="Wang" fullname="Dazhi Wang">
            <organization>??</organization>
          </author>
          <author initials="J" surname="Xie" fullname="Junyi Xie">
            <organization>??</organization>
          </author>
          <date year="2003"/>
          <note title="proxy database">
            <t>
              Although the research is towards a proxy for the database system, our query abstraction
              could be able to modularly inform supposed proxies our query pattern / structure
              for better query prediction.
            </t>
          </note>
        </front>
      </reference>

      <reference target="http://arxiv.org/ftp/cs/papers/0301/0301009.pdf">
        <front>
          <title>A Script Language for Data Integration in Database</title>
          <author fullname="Qingguo Zheng">
            <organization>National Lab. of Software Development Enviroment, Beihang University</organization>
          </author>
          <date year="2003"/>
          <note title="script language">
            <t>
                Script Language as a query abstraction.
            </t>
          </note>
        </front>
      </reference>

      <reference target="http://marc.theaimsgroup.com/?l=php-dev&#38;m=101753543913458&#38;w=2">
        <front>
          <title>Relevant discussion about query abstraction</title>
          <author fullname="Daniel Lorch">
            <organization>PHP Devs</organization>
          </author>
          <date year="2002"/>
        </front>
      </reference>

      <reference target="http://marc.theaimsgroup.com/?l=php-dev&#38;m=101752997709709&#38;w=2">
        <front>
          <title>Relevant discussion about query abstraction</title>
          <author fullname="Stig">
            <organization>PHP Devs</organization>
          </author>
          <date year="2002"/>
        </front>
      </reference>

      <reference target="http://marc.theaimsgroup.com/?l=php-dev&#38;m=101740330610221&#38;w=2">
        <front>
          <title>Relevant discussion about query abstraction</title>
          <author fullname="Daniel Lorch">
            <organization>PHP Devs</organization>
          </author>
          <date year="2002"/>
        </front>
      </reference>

      <reference target="http://marc.theaimsgroup.com/?l=php-db&#38;m=100635358202596&#38;w=2">
        <front>
          <title>PHP dev stating that a SQL parser should be the solution</title>
          <author fullname="Tomas V. V. Cox">
            <organization>PHP Devs</organization>
          </author>
          <date year="2002"/>
          <note title="parsing">
            <t>
              I personally think parsing SQL is the wrong way to do it.
              There are too many inconsistent ways to do it, not to say it would be an unnecessary complex solution.
            </t>
          </note>
        </front>
      </reference>

      <reference target="http://pear.php.net/package-info.php?pacid=80&#38;release=0.13&#38;PHPSESSID=18e4b1d53db182aceeeb2c1e0b92e399">
        <front>
          <title>PEAR Package Data Object (for query abstraction)</title>
          <author fullname="">
            <organization></organization>
          </author>
          <date year="2002"/>
          <note title="class badly implemented">
            <t>
              The class doesnt fullfill our needs. Still there are things that can be reused.
            </t>
          </note>
        </front>
      </reference>

      <reference target="http://px.sklar.com/code.html?id=239">
        <front>
          <title>SubSelect Emulation for Mysql</title>
          <author fullname="">
            <organization></organization>
          </author>
          <date year="2002"/>
          <note title="should have this feature">
            <t>
              This is one of the features our query abstraction should have. It shows how the abstraction
              can add value to the overall solution. Metabase implements it too.
            </t>
          </note>
        </front>
      </reference>

      <reference target="http://www.oreilly.com/news/sqlnut_1200.html">
        <front>
          <title>Article showing difference between db queries</title>
          <author fullname="">
            <organization></organization>
          </author>
          <date year="2002"/>
          <note title="helpful article">
            <t>helpful for writing the drivers</t>
          </note>
        </front>
      </reference>


    </references>
    
    <!-- Any section after this will become an appendix -->
    <section title="Example appendix">
      <t>Any section which is present after the references will become an appendix</t>
    </section>
  </back>
</rfc>
