<?xml version="1.0" ?>
<!--
  This is the xaraya buildfile. It builds anything needed building:
  - the tarballs
  - release files
  - documentation

  This build.xml file is a phing build file. The phing make system
  is like ant, but then implemented in php. For xaraya we stubbed
  the phing system into a bk custom command: bk build which has the 
  same interface as the original phing. 

  TODO:
  - sql files automatically so they are always in sync
  - phpdoc documentation
  - deb package generation
  - rpm package generation
  - get the dependencies straight.
  - use recursive build files, so we can package modules by just inspecting the build.xml 
    file for each module, instead of hardcoding the list in here (? would that work)
  - use the zip and tar task from phing once their mem requirements are below 8M (which is php std. mem setting)
    or at least independent of the number of files packaging
  - make this run on all platforms
  - do something clever with the release log
  - extract the version automatically somehow
-->
<project name="xaraya" basedir="." default="help">
  
  <!-- Some essential properties on which the rest really depends -->
  <property name="version" value="0.9.0.6" />
  <property name="releaselog" value="releaselog-0.905-0.906.txt" />
  <property name="final.name" value="${phing.project.name}-${version}" />
  
  <!-- module lists -->   

  <!-- The core modules, should be in every distro, it just doesn't work without them -->
  <property name="modules.core" value="adminpanels,authsystem,base,blocks,dynamicdata,installer,mail,modules,privileges,roles,themes,sniffer"/>

  <!-- Base modules, when added to the core modules, you get a base system -->
  <property name="modules.base" 
    value="articles,authldap,autolinks,bloggerapi,categories,comments,dyn_example,ephemerids,example,headlines,hitcount,html,metaweblogapi,polls,quotes,ratings,recommend,referer,search,stats,translations,wiki,xmlrpcserver,xmlrpcsystemapi,xmlrpcvalidatorapi"/>

  <!-- Base modules, when added to the core modules, you get a base system -->
  <property name="modules.full" 
    value="addressbook,bbclick,bbcode,calendar,cast,censor,changelog,contact,figlet,mybookmarks,opentracker,pubsub,smilies,uploads,xarbb,xslt"/>
  
  <!-- source tree properties -->
  <property name="html.dir" value="html" />
  <property name="docs.dir" value="docs" />
  <property name="tests.dir" value="tests" />
  <property name="sql.dir" value="sql"/>
  
  <!-- build tree properties -->
  <property name="build.basedir" value="build"/>
  <property name="build.dir" value="${build.basedir}/${final.name}"/>
  <property name="build.docs" value="${build.dir}/docs"/>
  <property name="build.sql" value="${build.dir}/sql" />
  <property name="build.tests" value="${build.dir}/tests"/>
  <property name="build.html" value="${build.dir}/html"/>
  
  
  <!--  Default target that only displays some help  -->
  <target name="help" description="--> displays a brief help">
    <echo message="Please call 'bk build -projecthelp' for details" />
  </target>
  
  <!--  Main target that runs the build  -->
  <target name="makedist" description="--> creates a distribution of Xaraya">
    <echo message="Copying files to build dir" />
    
    <!-- Copy the usual suspects for GPL alike projects -->
    <mkdir dir="${build.dir}" />
    <copy todir="${build.dir}">
      <fileset dir="${docs.dir}">
        <include name="CREDITS.txt" />
        <include name="INSTALL.txt" />
        <include name="LICENSE.txt" />
        <include name="${releaselog}" />
      </fileset>
    </copy>
    
    <!-- Process docs directory -->
    <mkdir dir="${build.docs}" />
    <copy todir="${build.docs}">
      <fileset dir="${docs.dir}">
        <include name="bk/*.txt" />
        <exclude name="SCCS/**" />
      </fileset>
    </copy>
    
    <!-- Proces tests directory -->
    <mkdir dir="${build.tests}"/>
    <copy todir="${build.tests}">
      <fileset dir="${tests.dir}">
        <include name="caching/**"/>
        <include name="import/**"/>
        <include name="modwizard/**"/>
        <exclude name="SCCS/**"/>
      </fileset>
    </copy>
    
    <!-- Process html directory -->
    <mkdir dir="${build.html}"/>
    <copy todir="${build.html}">
      <fileset dir="${html.dir}">
        <include name="includes/**"/>
        <exclude name="includes/xml/**"/>
        <exclude name="includes/xartests/**"/>
        
        <include name="themes/installer/**"/>
        <include name="themes/print/**"/>
        <include name="themes/rss/**"/>
        <include name="themes/Xaraya_Classic/**"/>
        <include name="themes/index.html"/>
        
        <include name="var/index.html"/>
        <include name="var/**/index.html"/>
        <include name="var/rsd.xml"/>
        
        <include name="var/locales/en_US.iso-8859-1/**"/>
        <include name="var/locales/en_US.utf-8/**"/>
        
        <include name="xaradodb/**"/>
        
        <include name="index.php"/>
        <include name="ws.php"/>
        <include name="install.php"/>
        <include name="upgrade.php"/>
        <include name="val.php"/>
        
        <exclude name="SCCS/**"/>
      </fileset>
    </copy>
    
    <!-- Handle the sql directory -->
    <mkdir dir="${build.sql}"/>
    <copy todir="${build.sql}">
      <fileset dir="${sql.dir}">
        <include name="*.sql"/>
        <exclude name="SCCS/**"/>
      </fileset>
    </copy>
    
    <!-- Copy config.system.php.dist to config.system.php -->
    <copy file="${html.dir}/var/config.system.php.dist" tofile="${build.html}/var/config.system.php"/>
    
    <!-- Core distro -->
    <phingcall target="coredist"/>
    
    <!-- Base distro -->
    <phingcall target="basedist"/>

    <!-- Full distro -->
    <phingcall target="fulldist"/>

  </target>

  <!-- Core distribution -->
  <target name="coredist" description="--> Creates the core distribution">
    <!-- Core modules -->
    <foreach list="modules.core" target="copymodule" param="module.name"/>
    
    <!--- here we can make the core distribution -->
    <phingcall target="createtarball">
      <property name="tarball.name" value="${final.name}-core.tar.gz"/>
    </phingcall>

    <phingcall target="createzipball">
      <property name="zipball.name" value="${final.name}-core.zip"/>
    </phingcall>
  </target>

  <!-- Base distribution -->
  <target name="basedist" description="--> Creates the base distribution">
   <!-- Modules are a bit separate -->
    <foreach list="modules.base" target="copymodulefrommodrepo" param="module.name"/>
    
    <phingcall target="createtarball">
      <property name="tarball.name" value="${final.name}-base.tar.gz"/>
    </phingcall>
    
    <phingcall target="createzipball">
      <property name="zipball.name" value="${final.name}-base.zip"/>
    </phingcall>
  </target> 

  <!-- Full distribution -->
  <target name="fulldist" description="--> Creates the full distribution">
   <!-- Modules are a bit separate -->
    <foreach list="modules.full" target="copymodulefrommodrepo" param="module.name"/>
    
    <phingcall target="createtarball">
      <property name="tarball.name" value="${final.name}-full.tar.gz"/>
    </phingcall>
    
    <phingcall target="createzipball">
      <property name="zipball.name" value="${final.name}-full.zip"/>
    </phingcall>
  </target> 
  
  <!-- copy a module into the build tree -->
  <target name="copymodule" if="module.name">
    <echo msg="Copying module ${module.name} into build tree..."/>
    <copy todir="${build.html}/modules/${module.name}">
      <fileset dir="${html.dir}/modules/${module.name}">
        <include name="**"/>
        <exclude name="SCCS/**"/>
      </fileset>
    </copy>
  </target>
  
  <!-- copy a module into the build tree -->
  <target name="copymodulefrommodrepo" if="module.name">
    <echo msg="Copying module ${module.name} into build tree..."/>
    <copy todir="${build.html}/modules/${module.name}">
      <fileset dir="../../modules/${module.name}">
        <include name="**"/>
        <exclude name="SCCS/**"/>
      </fileset>
    </copy>
  </target>

  <!-- Create a tarball from the current contents of the build tree -->
  <target name="createtarball" if="tarball.name">
    <echo msg="Creating tar archive ${tarball.name}"/>
    <exec dir="${build.basedir}" command="tar -czf ${tarball.name} ${final.name}"/>
<!-- This just takes too much memory
    <tar outfile="${build.basedir}/${tarball.name}" usegzip="true">
      <fileset dir="${build.basedir}">
        <include name="${final.name}/**"/>
      </fileset>
    </tar>
-->
  </target>

  <!-- Create a zipball from the current contents of the build tree -->
  <target name="createzipball" if="zipball.name">
    <echo msg="Creating zip archive ${zipball.name}"/>
    <exec dir="${build.basedir}" command="zip -rq ${zipball.name} ${final.name}"/>
<!-- This just takes too much memory
    <zip outfile="${build.basedir}/${zipball.name}">
      <fileset dir="${build.basedir}">
        <include name="${final.name}/**"/>
      </fileset>
    </zip>
-->
  </target>
  
  <!-- Clean target, removes only the copied build tree -->
  <target name="clean" description="--> cleans up the buildtree">
    <echo msg="Cleaning up buildtree..." />
    <delete dir="${build.dir}" />
  </target>

  <!-- Realclean target, depends on clean, removes also the generated distro's and the build directory itself -->
  <target name="realclean" depends="clean" description="--> also cleans the produced archives">
    <echo msg="Real clean..."/>
    <delete>
      <fileset dir="${build.basedir}">
        <include name="*.tar.gz"/>
        <include name="*.zip"/>
      </fileset>
    </delete>
    <delete dir="${build.basedir}" />
  </target>
  
  <!-- Rebuild target, depends on clean -->
  <target name="rebuild" depends="clean" description="--> rebuilds all Xaraya distributions">
    <echo msg="Starting new build..." />
    <phingcall target="makedist" />
  </target>
  
</project>
