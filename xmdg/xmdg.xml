<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [
<!ENTITY documentinfo SYSTEM "parts/document_info.xml">
<!ENTITY preface SYSTEM "parts/preface.xml">
<!ENTITY introduction SYSTEM "parts/introduction.xml">
<!ENTITY xaraya_module_architecture SYSTEM "parts/xaraya_module_architecture.xml">
<!ENTITY create_your_module SYSTEM "parts/create_your_module.xml">
<!ENTITY understanding_hooks SYSTEM "parts/understanding_hooks.xml">
<!ENTITY bibliography SYSTEM "parts/bibliography.xml">
<!ENTITY glossary SYSTEM "parts/glossary.xml">
<!ENTITY other SYSTEM "parts/other.xml">
<!ENTITY error_handling "parts/error_handling.xml">
]>
<book>
  <!-- Meta info about this document -->
  &documentinfo;

  <!-- Preface -->
  &preface;

  <!-- Introduction -->
  &introduction;

  <chapter>
    <title>Xaraya Architecture</title>

    <para>This chapter describes the basic architecture of Xaraya, explains
    the major parts, and contains information on the design choices made for
    the system. It describes how basic parts of Xaraya operate and what you
    can expect from Xaraya Core.</para>

    <section>
      <title>Block lay-out</title>

      <para>Explanation of Block Lay-out in Xaraya</para>
    </section>

    <section>
      <title>Xaraya API</title>

      <para>Reference type of text</para>
    </section>

    <section>
      <title>Core modules</title>

      <para>What Core modules are there, what can you use</para>
    </section>

    <section>
      <title>Blocks</title>

      <para></para>
    </section>

    <!-- Section about variable handling was here -->

    <!-- Section about error handling was here -->
    &error_handling;

    <section>
      <title>Itemtypes</title>

      <para>Itemtypes definitions are crucial in Xaraya operations. Itemtypes
      are very important when ever your data is shared with either hooks or by
      other modules.</para>

      <para>Related functions</para>

      <para>-getitemtypes</para>

      <para>-getitemlinks</para>
    </section>

    <section>
      <title>Interaction with core classes</title>

      <para>The interaction with core functions, what to rely on and how to
      access these functions</para>
    </section>

    <section>
      <title>Multilanguage system</title>

      <para>Xaraya can be fully multilanguage. Make sure all your text strings
      are encapsulated with either <programlisting>xarML('YourMLString') </programlisting>in
      your functions or <programlisting>&lt;xar:mlstring&gt;YourMLString&lt;/xar:mlstring&gt;</programlisting>
      in the templates</para>
    </section>

    <section>
      <title>Variable preparations</title>

      <para><programlisting>xarVarPrepForDisplay(YourString);</programlisting></para>
    </section>

    <section>
      <title>Dynamic Data</title>

      <para>Properties</para>

      <para>Your own properties</para>
    </section>
  </chapter>

  <!-- Module architecture -->
  &xaraya_module_architecture;


  <chapter>
    <title>Xaraya Module Operations</title>

    <para>This chapter covers how modules interact with Xaraya. The
    information in this section is correct for the 1.0 release of Xaraya, for
    other releases please get the most recent copy of the Xaraya Module
    Developers Guide.</para>

    <section>
      <title>Locating Modules</title>

      <para>All Xaraya modules must be placed within their own subdirectory of
      the 'modules' directory to be recognized. Modules placed anywhere else
      within the file-system will not be located correctly.</para>
    </section>

    <section>
      <title>Working out Module Functionality</title>

      <para>A module might have administration or user functionality, or both.
      Xaraya works out which functionality each module has by looking for the
      files in 'xaradmin' or 'xaradminapiâ€™ directories to confirm
      administration functionality, and in 'xaruser' or 'xaruserapi'
      directories to confirm user functionality. Lack of these directories
      results in Xaraya assuming that this specific module functionality does
      not exist.</para>
    </section>

    <section>
      <title>Initializing Modules</title>

      <para>Initialization of modules is accomplished through the
      modname_init() in the 'xarinit.php' file within the module's directory
      function. No other functions are called when the module is initialized.
      All initialisation routines should go into the init function.</para>
    </section>

    <section>
      <title>Activating/Deactivating Modules</title>

      <para>Activation and deactivation of modules is accomplished through
      field settings within the appropriate database table. Unlike earlier
      versions of Xaraya, no physical changes to the module directories are
      made to infer the activation status of the module.</para>
    </section>

    <section>
      <title>Upgrading your module</title>

      <para>Upgrading your module is important. The upgrade function is
      located in the xarinit.php and named yourmodule_upgrade(). This function
      takes the current versionnumber as 'oldversion' and uses a switch to
      look for the correct upgrade routines. Make sure you provide all
      necessary steps for each version to upgrade to the next version. Provide
      an empty upgrade step when there is nothing todo. This way, the upgrade
      function will stay consistent. The versionid is set in the
      xarversion.php file.</para>
    </section>

    <section>
      <title>Calling Module Functions</title>

      <para>Module functions are called through the xarModFunc() and
      xarModAPIFunc() functions. No direct calling of module functions is
      allowed, even from within the same module. Creating Module URLs Direct
      URLs to functions URLs for modules go through the 'index.php' entry
      point, and are defined by a number of parameters. The parameters that
      currently decide which particular module function to call are as
      follows: module The name of the module. This corresponds to the
      well-known name of the module, which can be found through the modules
      administration interface type The type of the module function. This is
      currently either 'user' for user functions or 'admin' for administrative
      functions. func The name of the function itself. This is
      module-dependent. If any of these parameters are undefined within a URL
      Xaraya will apply defaults to them. Note that both the names of the
      parameters and their default values might change, and as such it is not
      recommended to create direct URLs for anything but to either go through
      the Xaraya main page or to use the xarModURL() function to generate URLs
      that will always be internally consistent for any given version of
      Xaraya. You can also extend the xarModUrl call by adding a parameter
      call to the function in the form of an array. <programlisting><function>xarModURL('<parameter>module</parameter>', 'type', 'function', array('foo' =&gt; $bar))</function></programlisting>
      will create the input parameter of 'foo' having the value of
      $bar.</para>

      <section>
        <title>Function calls</title>

        <para>Another way of accessing the functionality of other modules is
        by calling their functions directly with the xarModFunc() function.
        Doing this allows a number of advantages over hooks, but also a number
        of disadvantages. In general, calling functions directly is more
        flexible as the module developer understands exactly which functions
        they are calling and can pass additional arguments to the function to
        customize its abilities. The disadvantages are that the module named
        in the function call needs to be installed and active on the system
        for the calls to work, and if this is replace by a different module
        providing similar functionality it will not work correctly.</para>

        <para>Using direct function calls to other modules is fine within a
        module, but the developer should consider the implications of this on
        systems that might not have the modules that they are using installed.
        Also, even if direct function calls are used then the module developer
        should still call hooks at the appropriate places in the code to allow
        for other extended functionality to be added to the module.</para>

        <para>An example of where direct function calls might be used within
        the Example module would be if the module developer wanted users to be
        able to rate various aspects of the picture displayed such as 'use of
        color' and 'originality'. In this case, a simple hook would not be
        able to accommodate this requirement, so the developer would instead
        make explicit calls to the 'Ratings' utility module to display a
        number of separate ratings, each with its own identifier. The hook
        call would still be made, which might also add a rating to the
        picture, but in this case, the value could be considered as the
        overall rating for the picture rather than that just for a specific
        part.</para>
      </section>
    </section>

  </chapter>

  <!-- Hooks -->
  &understanding_hooks;


  <chapter>
    <title>Writing your module</title>

    <para>This Chapter can be the reference to how to setup your module
    design</para>

    <section>
      <title>Before Starting Your Module</title>

      <para>There are a number of steps to follow before you can start
      building your module.</para>

      <para>Choosing a Name for Your Module</para>

      <para>Choosing a name for your module is important, as this is the main
      way that your module will be known throughout the Xaraya community. The
      name should relate to the functionality that the module provides, but
      also be specific enough to be able to discern it from separate modules
      that might offer similar functionality. Module names are case-sensitive.
      All modules names are lower-case only.</para>

      <para>Decide on the Type of Your Module</para>

      <para>There are two broad types of module available in Xaraya. Item
      modules are modules, which contain their own content and operate on that
      content, whereas utility modules are modules, which contain additional
      information or functionality for the content of other modules. Examples
      of item modules are news, FAQ, and download. Examples of utility modules
      are comments, ratings, and global index. Either utility modules work in
      the same way as item modules, or they can operate with hooks, which
      allow module functions to be acted upon without being explicitly called
      by other modules. Hooks are used for items that are not part of a piece
      of content but directly related to it.</para>

      <para>Register Your Module Name</para>

      <para>Registering your module is not compulsory, but it is a very good
      idea. By registering your module, you can ensure that no other official
      Xaraya module will take the name that you have chosen for your module.
      Two modules with the same name will not operate correctly on a single
      Xaraya site, so it is beneficial to both yourself and the Xaraya
      community in general to have a unique name. You may register your module
      via the release module on <ulink url="???">http://www.xaraya.com/
      </ulink></para>

      <para>Obtain a Copy of the Xaraya API Reference Guide</para>

      <para>The Xaraya API Reference Guide has been moved to the PHP-Doc style
      of documentation. No separate entry will be created for the API guide.
      Please reference http://docs.xaraya.com/index.php/documentation/c80/ for
      more information.</para>

      <para>Read the Notes on Developing Modules Section</para>

      <para>The section entitled 'Notes on Developing Modules' includes a lot
      of miscellaneous information that does not fit in other sections of this
      document. It should be read fully before any attempt to design or
      develop a module is started.</para>

      <para>Understand the Following Areas</para>

      <para>Difference between GUI and Operational Functions</para>

      <para>Understanding the difference between GUI and operational functions
      is critical when building a good module. Proper separation of these
      functions will allow other modules to be able to access the
      functionality of your module and incorporate it into their modules. It
      will also allow methods of access apart from those that the standard
      web-based Xaraya system.</para>

      <para>Difference between User and Administrative Functions</para>

      <para>Understanding the difference between user and administrative
      functions is very important when building a good module. The separation
      of these types of actions allows for the Xaraya Security Model The
      Xaraya security model is a very important area to understand before
      coding a module. Developers should understand which parts of their
      module need protected, and exactly how this is accomplished. The entire
      Xaraya security model is beyond the scope of this document. The Security
      System RFC30 is located at
      http://docs.xaraya.com//docs/rfcs/rfc0030.html</para>

      <para>Function Return Codes</para>

      <para>Every well-defined module function must return the appropriate
      return codes. Return codes are the main way in which a module
      communicates with the Xaraya core, and as such, it is vital that the
      correct return codes are used. The following return codes should be used
      when returning control to the Xaraya core from any module
      function:</para>

      <para>string</para>

      <para>Returning a text string implies that the modules function has
      finished its work and has output to be displayed in the appropriate
      place on the Xaraya web page. Xaraya will take the returned output and
      display it as appropriate. Note that all output from modules is
      displayed verbatim, with no escaping of HTML characters. This is to
      allow for formatted output from the module functions.</para>

      <para>true</para>

      <para>Returning boolean true implies that the module function has
      finished its work and set up an appropriate redirect to send the user to
      a page that will have display output. The Xaraya core will take no
      further action as far as this module is concerned.</para>

      <para>false</para>

      <para>Returning boolean false implies that the module function has
      finished its work but not set up an appropriate redirect to send the
      user to a page that will have display output. The Xaraya core will set
      an appropriate redirect for this module. Note that none of these
      functions carries any information about the success or failure of the
      attempted operation that the module function was undertaking.</para>

      <para>array</para>

      <para>The array can contain the parameters that you need to return to
      the Xaraya core</para>

      <para>Where Modules Fit in Xaraya</para>

      <para>Modules cover two separate areas of Xaraya. The first is
      administration of core functions, (e.g. users, permissions), and the
      second is extension of system functionality (e.g. downloads, web links).
      As each of these areas is not core this implies two things. First is
      that no module is actually required - the Xaraya system would work
      without anything in its modules directory, although its functionality
      would be severely limited and there would be no configuration options
      available. Second, is that modules should not remove any core
      functionality when installed, in operation, or removed.</para>
    </section>

    <!-- Here was an explanation on the checklist for modules -->
  </chapter>

  <chapter>
    <title>Notes in Developing Modules</title>

    <para>xarAPI is the Xaraya Application Programming Interface, a way for
    modules to interact with the Xaraya core without needing to access tables
    and internal structures directly. The API also allows for the underlying
    implementation details of Xaraya to be hidden from developer so that they
    can write modules in a standard fashion and not worry about what might
    change under the hood. This is very important for a system such as Xaraya,
    which has undergone, and continues to undergo, radical changes in the core
    design to allow it to be faster, more secure, and more flexible. xarAPI is
    the only supported way of accessing core information. Module developers
    must use these methods of obtaining information from the Xaraya core
    system; failure to do so will very likely result in their module not
    working when the next version of Xaraya is released.</para>

    <section>
      <title>Security</title>

      <para>Security is a very important part of Xaraya. All modules should
      subscribe to the Xaraya Security model to ensure that they operate
      correctly within all environments. For full information on security
      refer to the Xaraya Security Model documentation, however the main
      points as regards modules are covered briefly below. Variable Handling
      All variables that come in to or go out of Xaraya should be handled by
      the relevant xarVar*() functions to ensure that they are safe. Failure
      to do this could result in opening security holes at the web,
      file-system, display, or the database layers. Full information on these
      functions is in the Xaraya API Guide, and examples of their use are
      shown throughout the example module. It can be assumed that any
      variables passed to functions in the Xaraya API will be handled
      correctly, and as such these variables do not need to be prepared with
      the xarVar*() functions.</para>
    </section>

    <section>
      <title>Authorization</title>

      <para>All items displayed for users and actions carried out by
      administrators must be authorized through use of the xarSecAuthAction()
      function. This function underlies the entire Xaraya permissions system
      and as such must be used wherever an access check is required.</para>
    </section>

    <section>
      <title>Reserved Variable Names</title>

      <para>
        Xaraya has a number of variables, which are reserved. These
        variables are not be used within modules as they can conflict with the
        Xaraya core and cause unpredictable results. The current lists of
        variables, which are reserved, are as follows:
        <itemizedlist>
          <listitem>
            <para><varname>file</varname>: the file to open</para>
          </listitem>
          <listitem>
            <para>
              <varname>func</varname>: 
              In use for Function, the function being called
            </para>
          </listitem>
          <listitem>
            <para><varname>loadedmod</varname>:
            The module that is loaded. Mainly in use by the core module
            'roles'
            </para>
          </listitem>
          <listitem>
            <para><varname>module</varname>:
            The module that is being called
            </para>
          </listitem>
          <listitem><para><varname>name</varname></para></listitem>
          <listitem><para><varname>op</varname></para></listitem>
          <listitem><para><varname>pagerstart</varname></para></listitem>
          <listitem><para><varname>pagertotal</varname></para></listitem>
          <listitem>
            <para><varname>type</varname>:
            Either user or admin, type of function to call
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>In addition, all one-letter variables are reserved.</para>
    </section>

    <section>
      <title>Page Path</title>

      <para>All input from web pages goes through a two-stage process. The
      first part is displaying the information entered in a form, and the
      second is obtaining that information and passing it on to the module
      API. In addition to the visible information, there are often a number of
      hidden items of information in the first page that is used in the second
      page. To ensure that any attempt to add, delete, or change information
      in the Xaraya system goes through the full two-stage method of gathering
      and processing the information the two functions xarSecGenAuthKey() and
      xarSecConfirmAuthKey() must be used in the appropriate places. The
      Example module in the standard Xaraya distribution contains a number of
      functions that use these API calls, and note where they are used so that
      developed modules will have the same level of protection against
      fraudulent administrator requests.</para>
    </section>

    <section>
      <title>Output</title>

      <para>All output generated by module functions must be returned to the
      Xaraya core. No output of any type pushed directly from the module; this
      is not supported and will break in future versions of Xaraya.</para>
    </section>

    <section>
      <title>Using Object Oriented Code</title>

      <para>Modules written as classes is allowed, however the API as
      described in the rest of this document must still be adhered to. The
      simplest way of doing this is to use compatibility functions, for
      example: 
      <programlisting>
        function mymod_user_main() {
          // Instantiate
          $obj = new myClass();
          // Call relevant method and return output return
          $obj-&gt;usermain();
        }
      </programlisting></para>
    </section>
  </chapter>

  <!-- Create module part came roughly from here -->
  &create_your_module;
  
  <!-- Other stuff to be organized -->
  &other;

  <!-- Index -->
  <index/>

  <!-- Bibliography -->
  &bibliography;
  
  <!-- Glossary -->
  &glossary;
</book>
