<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xsl"?>
    <!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<!-- <?rfc private='my private memo'?>  Produce a private memo rather than a Xaraya-standard --> 
<?rfc toc='yes'?>

<rfc number="0010" category="std">
  <front>
    <title>Xaraya Theme system (Blocklayout)</title>
    <author initials="M." surname="Vance" fullname="Dracos">
      <organization>Xaraya Development Group</organization>
      <address>
	<email>dracos@thedragonsforge.com</email>
      </address>
    </author>

    <author initials="P." surname="Rosania" fullname="Paul Rosania">
      <organization>Xaraya Development Group</organization>
      <address>
	<email>prosania@attbi.com</email>
      </address>
    </author>

    <author initials="M." surname="Canini" fullname="Marco Canini">
      <organization>Xaraya Development Group</organization>
      <address>
	<email>m.canini@libero.it</email>
      </address>
    </author>

    <date month="November" year="2002"/>
    
    <!-- The abstract summarizes in one or two paragraphs the content of the RFC -->
    <abstract>
      <t>The contents of this RFC describes the blocklayout templating system for xaraya.</t>
    </abstract>
  </front>
  
  <!-- The middle section is used for the actual content of the RFC -->
  <middle>
    <section title="Introduction">
      <t>
	Blocklayout is intended to give theme developers a maximum of control
	over the appearance and functionality of their Xaraya website. This
	file documents the structure and syntax of blocklayout, and details
	required changes to themes and the core.
      </t>
      <t>
	  Blocklayout is potentially a very powerful tool. However, modules and
	blocks need to be modified somewhat in order to take advantage of
	Blocklayout's flexibility. The conversion process is not complicated.
      </t>
      <t>
	In addition, certain changes to the Xaraya directory structure are
	necessary to accomodate templates and their defaults. Those
	structural changes are illustrated below.
	<artwork><![CDATA[
html/
    |-- modules/
    |       <module name>/
    |           xartemplates/
    |               <user|admin>-<module function>[-<template>].xd
    |               blocks/
    |                   <block name>-<template name>.xd
    |               tags/
    |                   <tag name>-<template name>.xd
    |               includes/
    |                   <file>.xd
    |-- includes/
    |       xarTemplate.php
    |       xarBLCompiler.php
    |-- themes/
            <theme name>/        
            |-- theme.php
            |-- pages/
            |       <master templates>.xt
            |-- modules/
            |       <module name>/
            |           <user|admin>-<module function>[-<template name>].xt
            |           blocks/
            |               <block name>-<template name>.xt
            |           borders/
            |               <template name>.xt
            |           tags/
            |               <tag name>-<template name>.xt
            |           includes/
            |               <tag name>-<template name>.xt
            |-- includes/
                    <file>.xt
	  ]]></artwork>
      </t>
      <t>
	html/themes/<theme name>/theme.php contains metadata about the theme;
    no actual markup can reside there. Such metadata includes:
	<list style="bullet">
	  <t>$themeinfo['name']</t>
	  <t>$themeinfo['author']</t>
	  <t>$themeinfo['homepage']</t>
	  <t>$themeinfo['email']</t>
	  <t>$themeinfo['description']</t>
	  <t>$themeinfo['contact_info']</t>
	  <t>$themeinfo['publish_date']</t>
	  <t>$themeinfo['license']</t>
	  <t>$themeinfo['version']</t>
	  <t>$themeinfo['xaraya_version']</t>
	  <t>$themeinfo['blocklayout_version']</t>
	</list>
      </t>
    </section>

    <section title="Required CSS Classes">
      <t>
	The following is a list of CSS classes which may be referenced by
	module and block developers with assurance that their output will
	integrate well with any Blocklayout theme. Blocklayout themes must
	define all of these classes.
      </t>
      <t>
	The first group is standard classes. Selectors here will be applied to
	every instance of a tag, unless overridden by a more specific class.
	<list style="bullet">
	  <t>A</t>
	  <t>BLOCKQUOTE</t>
	  <t>BODY</t>
	  <t>CODE</t>
	  <t>H1</t>
	  <t>H2</t>
	  <t>H3</t>
	  <t>H4</t>
	  <t>TH</t>
	  <t>TD</t>
	  <t>P</t>
	  <t>PRE</t>
	  <t>INPUT</t>
	  <t>SELECT</t>
	  <t>IMG</t>
	  <t>LI</t>
	  <t>UL</t>
	  <t>OL</t>
	</list>
      </t>
      <t>
	Next are individual classes, mostly related to links. Parts of class
	names enclosed within &lt;&gt; are variable.
	<list style="bullet">
	  <t>A.xar-title</t>
	  <t>A.xar-title-block-&lt;group&gt;</t>
	  <t>A.xar-title-&lt;block&gt;</t>
	  <t>A.xar-normal</t>
	  <t>A.xar-normal-block-&lt;group&gt;</t>
	  <t>A.xar-normal-&lt;block&gt;</t>
	  <t>A.xar-sub</t>
	  <t>A.xar-sub-block-&lt;group&gt;</t>
	  <t>A.xar-sub-&lt;block&gt;</t>
	  <t>BLOCKQUOTE.xar-normal</t>
	  <t>CODE.xar-normal</t>
	  <t>TH.xar-normal</t>
	  <t>TH.xar-normal-block-&lt;group&gt;</t>
	  <t>TH.xar-normal-&lt;block&gt;</t>
	  <t>TD.xar-normal</t>
	  <t>TD.xar-normal-block-&lt;group&gt;</t>
	  <t>TD.xar-normal-&lt;block&gt;</t>
	  <t>TD.xar-alt</t>
	  <t>TD.xar-alt-block-&lt;group&gt;</t>
	  <t>TD.xar-alt-&lt;block&gt;</t>
	  <t>SPAN.xar-normal</t>
	  <t>SPAN.xar-normal-block-&lt;group&gt;</t>
	  <t>SPAN.xar-normal-&lt;block&gt;</t>
	  <t>P.xar-normal</t>
	  <t>PRE.xar-normal</t>
	  <t>IMG.xar-normal</t>
	  <t>INPUT.xar-normal</t>
	  <t>INPUT.xar-normal-block-&lt;group&gt;</t>
	  <t>INPUT.xar-normal-&lt;block&gt;</t>
	  <t>SELECT.xar-normal</t>
	  <t>SELECT.xar-normal-block-&lt;group&gt;</t>
	  <t>SELECT.xar-normal-&lt;block&gt;</t>
	  <t>LI.xar-normal</t>
	  <t>LI.xar-normal-block-&lt;group&gt;</t>
	  <t>LI.xar-normal-&lt;block&gt;</t>
	</list>
      </t>
      <t>
	Finally are anonymous classes. Selectors here can be applied to any
	tag.
	<list style="bullet">
	  <t>.xar-title</t>
	  <t>.xar-title-block-&lt;group&gt;</t>
	  <t>.xar-title-&lt;block&gt;</t>
	  <t>.xar-normal</t>
	  <t>.xar-alt</t>
	  <t>.xar-quote</t>
	  <t>.xar-normal-block-&lt;group&gt;</t>
	  <t>.xar-normal-&lt;block&gt;</t>
	  <t>.xar-sub</t>
	  <t>.xar-sub-block-&lt;group&gt;</t>
	  <t>.xar-sub-&lt;block&gt;</t>
	</list>
      </t>
      <t>
	Theme developers may introduce their own classes in their templates.
	This practice should be avoided by module and block developers.
	Extensions of the required classes list will not be	supported by other
    themes or modules, and are not endorsed by Xaraya.
      </t>
      <t>
	These classes allow each block or group of blocks to have a different
	appearance than modules (normal).
      </t>
      <t>
	It is suggested that the classes be defined in the given order, to
	avoid odd results in different browsers.
      </t>
    </section>

    <section title="Templates">
      <t>
	Each page in Blocklayout is assembled from a collection of templates and
	fitted with the necessary data. A "Master" template is loaded first.
	This template defines the basic layout of the page and what information
    will be presented. Each module function or block called from the Master
    template has a child template associated with it. The data it handles
    is parsed through this template before being inserted into the Master.
    In this manner, templates can be nested any number of levels deep.
	<figure><artwork src="images/rfc0010_1.gif"/></figure>
      </t>
      <t>
	Internal Templates (.xd) provide default output formatting for Xaraya
	modules. Themes cannot alter these templates, but may contain their
	own version of them. Be careful! Editing Internal Templates may cause
	Xaraya to behave unexpectedly or not at all.
      </t>
      <t>
	The first time a template is called, it is compiled into PHP code. It
	will not be compiled again unless the original copy is updated. This
	procedure allows a maximum of template flexibility without slowdown in
	page generation time.
      </t>
    </section>

    <section title="Blocklayout tags">
      <t>
	Tags in Blocklayout adhere to XML syntax. The standard Blocklayout
    namespace is "xar" and at this time that may not be changed. There are 20
	top level core tags:
	<list style="bullet">
	  <t><xref target="block">&lt;xar:block /&gt;</xref></t>
	  <t><xref target="blockgroup">&lt;xar:blockgroup /&gt;</xref></t>
	  <t><xref target="else">&lt;xar:else /&gt;</xref></t>
	  <t><xref target="elseif">&lt;xar:elseif /&gt;</xref></t>
	  <t><xref target="for">&lt;xar:for /&gt;</xref></t>
	  <t><xref target="foreach">&lt;xar:foreach /&gt;</xref></t>
	  <t><xref target="if">&lt;xar:if /&gt;</xref></t>
	  <t><xref target="loop">&lt;xar:loop /&gt;</xref></t>
	  <t><xref target="ml">&lt;xar:ml /&gt;</xref></t>
	  <t><xref target="mlkey">&lt;xar:mlkey /&gt;</xref>(can also be used as a child tag, see <xref target="ml">&lt;xar:ml /&gt;</xref>)</t>
	  <t><xref target="mlstring">&lt;xar:mlstring /&gt;</xref> (can also be used as a child tag, see <xref target="ml">&lt;xar:ml /&gt;</xref>)</t>
	  <t><xref target="module">&lt;xar:module /&gt;</xref></t>
	  <t><xref target="sec">&lt;xar:sec /&gt;</xref></t>
	  <t><xref target="set">&lt;xar:set /&gt;</xref></t>
	  <t><xref target="template">&lt;xar:template /&gt;</xref></t>
	  <t><xref target="var">&lt;xar:var /&gt;</xref></t>
	  <t><xref target="while">&lt;xar:while /&gt;</xref></t>
	</list>
      </t>
      <t>
	There are also several child tags:
	<list style="bullet">
	  <t><xref target="break">&lt;xar:break /&gt;</xref></t>
	  <t><xref target="continue">&lt;xar:continue /&gt;</xref></t>
	  <t><xref target="mlvar">&lt;xar:mlvar /&gt;</xref></t>
	</list>
      </t>

      <section title="Referencing data within templates">
	<t>
	  Blocklayout variables are delimited by # ... #. For example, the variable
      $foo is accessed by the #$foo# directive. String keys in arrays should be
      single quoted (#$foo['bar']#) rather than double (#$foo["bar"]#). In
      addition to template variables, Blocklayout also allows direct access
      to a limited set of xarAPI functions (list to be determined). Function
      calls are represented as #xarAPIFunc($arg1, 'arg2')#. Function arguments
      should also be single quoted (as necessary).
	</t>
      </section>
      
      <section title="Comments in Templates">
	<t>
	  Placing comments in Blocklayout templates is done by surrounding the
	  content in question with &lt;!--- ---&gt; (note three hyphens each). Content
	  within these tags will be stripped from the final output stream.
	  Standard two-hyphen comments (&lt;!-- --&gt;) will be passed on to the
	  output stream.
	</t>
      </section>

      <section title="Tag descriptions and Atrributes">
	<t>
	  A note on logic tags: The condition attribute present on most logic
	  tags will frequently call for the use of &lt;, &gt;, and &amp; characters. These
	  characters are restricted in XML documents and may not be used in this context.
	  Therefore, to present an easy, readable alternative to PHP comparison
	  operators, Blocklayout uses Perl-like string operators within
	  templates. Assignment operators are not affected. See below:
	
	  <artwork>
	    BL operator PHP operator    English
	    eq          ==              equal to
	    id          ===             identical to
	    lt          &lt;               less than
	    gt          &gt;               greater than
	    le          &lt;=              less or equal to
	    ge          &gt;=              greater or equal to
	    ne          !=              not equal to
	    nd          !==             not identical to
	    and         and             and
	    or          or              or
	    xor         xor             exclusive or
	    not         not             not
	  </artwork>
	</t>
	
	<!-- xar:block -->
	<section anchor="block" title="&lt;xar:block /&gt;">
	  <t>Closed</t>
	  <t>Attributes:
	    <list style="bullet">
	      <t>id: an identifier for the tag (optional)</t>
	      <t>instance: if the block is dynamic, should be the value of the
	        xar_id in nuke_block_instances</t>
	      <t>name: the value of the xar_name field of the nuke_block_types db
	        table</t>
	      <t>module: the module that owns the given block.</t>
	      <t>template: identifier for the appearance of a block, set in
	        administration (optional, static blocks only)</t>
	      <t>type: declares if the block has dynamic or static content. Static
	        blocks are defined wholly within their template.</t>
	    </list>
	  </t>
	  <t>Description</t>
	  <t>
	    A block template requires title and content for display. Title may be
	    an empty string.
	  </t>
	  <t>Syntax example:
	    <artwork>
	      &lt;xar:block type="dynamic" instance="2" module="base" /&gt;
	      &lt;xar:block type="static" module="base" template="SeaBreeze_block_2" /&gt;
	    </artwork>
	  </t>
	  <t>Parent tag: none.</t>
	  <t>Child tags: none</t>
	</section>

	<!-- xar:blockgroup -->
	<section anchor="blockgroup" title="&lt;xar:blockgroup /&gt;">
	  <t>Closed.</t>
	  <t>Attributes:
	    <list style="bullet">
	      <t>id: an identifier for the tag (optional).</t>
	      <t>name: the name of the block group (optional). If present,
		specifies the blockgroup to display.</t>
	      <t>template: identifier for the appearance of blocks in the group,
		set in administration (optional). If present, overrides the
		default template for all blocks in the group.</t>
	    </list>
	  </t>
	  <t>Description</t>
	  <t>
	    The Blockgroup tag is responsible for rendering a group of blocks. If
	    empty, it renders the named group from the database.  Otherwise, it
	    specifies the block border to use on all &lt;xar:block/&gt; tags within it.
	  </t>
	  <t>Syntax example:
	    <artwork>
	      &lt;xar:blockgroup name="left" template="SeaBreeze_left"/&gt;
	        &lt;xar:blockgroup template="SeaBreeze_center"&gt;
	        &lt;xar:block name="login" module="users" template="simple_login"/&gt;
	      &lt;/xar:blockgroup&gt;
	    </artwork>
	  </t>
	  <t>Parent tag: none.</t>
	  <t>Child tags: none.</t>
	</section>

	<!-- xar:break -->
	<section anchor="break" title="&lt;xar:break /&gt;">
	  <t>Closed.</t>
	  <t>Attributes: none</t>
	  <t>Description</t>
	  <t>
	    Escapes the closest 
	    <xref target="for">&lt;xar:for /&gt;</xref>, 
	    <xref target="loop">&lt;xar:loop /&gt;</xref>, or
	    <xref target="blocklayout">&lt;xar:while /&gt;</xref>
	  </t>
	  <t>
	    Parent tags: 
	    <xref target="for">&lt;xar:for /&gt;</xref>, 
	    <xref target="loop">&lt;xar:loop /&gt;</xref>, or 
	    <xref target="while">&lt;xar:while /&gt;</xref>.
	  </t>
	  <t>Child tags: none</t>
	</section>

	<!-- xar:continue -->
	<section anchor="continue" title="&lt;xar:continue&gt;">
	  <t>Closed</t>
	  <t>Attributes:
	    <list style="bullet">
	      <t>none</t>
	    </list>
	  </t>
	  <t>Description</t>
	  <t>
	    Ends the current iteration of a <xref target="for">&lt;xar:for /&gt;</xref>, 
	    <xref target="loop">&lt;xar:loop /&gt;</xref>, or
	    <xref target="while">&lt;xar:while /&gt;</xref>, and begins the next iteration.
	  </t>
	  <t>Syntax example:
	    <artwork>
	      none yet
	    </artwork>
	  </t>
	  <t>Parent tags: <xref target="for">&lt;xar:for /&gt;</xref>, &lt;xar:loop /&gt;, or <xref target="while">&lt;xar:while /&gt;</xref>.</t>
	  <t>Child tags: none</t>
	</section>

	<!-- xar:else -->
	<section anchor="else" title="&lt;xar:else /&gt;">
	  <t>Closed</t>
	  <t>Attributes:
	    <list style="bullet">
	      <t>id: an identifier for the tag (optional)</t>
	    </list>
	  </t>
	  <t>Description</t>
	  <t>
	    Separates template code within an <xref target="if">&lt;xar:if /&gt;</xref> tag. When the
	    condition of the <xref target="if">&lt;xar:if /&gt;</xref> tag is true, the template content
	    preceeding <xref target="else">&lt;xar:else /&gt;</xref> is executed. Otherwise, the template content
	    after <xref target="if">&lt;xar:if /&gt;</xref> is executed. When <xref target="elseif">&lt;xar:elseif /&gt;</xref>is used
	    within an <xref target="if">&lt;xar:if /&gt;</xref> block, <xref target="else">&lt;xar:else /&gt;</xref> must appear last.
	  </t>
	  <t>Syntax example:
	    See <xref target="if">&lt;xar:if /&gt;</xref> for syntax.
	  </t>
	  <t>Parent tag: <xref target="if">&lt;xar:if /&gt;</xref></t>
	  <t>Child tags: none</t>
	</section>

	<!-- xar:elseif -->
	<section anchor="elseif" title="&lt;xar:elseif /&gt;">
	  <t>Closed</t>
	  <t>Attributes:
	    <list style="bullet">
	      <t>id: an identifier for the tag (optional)</t>
	      <t>condition: an expression to be evaluated</t>
	    </list>
	  </t>
	  <t>Description</t>
	  <t>
	    Contains template code to be executed if all related preceeding
	    <xref target="if">&lt;xar:if /&gt;</xref> and <xref target="elseif">&lt;xar:elseif /&gt;</xref> tag conditions evaluate to
	    false. All instances of <xref target="elseif">&lt;xar:elseif /&gt;</xref>
	    attached to <xref target="if">&lt;xar:if /&gt;</xref>must appear before <xref target="else">&lt;xar:else /&gt;</xref>
	  </t>
	  <t>Syntax example:
	    See <xref target="if">&lt;xar:if /&gt;</xref> for syntax.
	  </t>
	  <t>Parent tag: <xref target="if">&lt;xar:if /&gt;</xref></t>
	  <t>Child tags: none</t>
	</section>

	<!-- xar:for -->
	<section anchor="for" title="&lt;xar:for /&gt;">
	  <t>Open</t>
	  <t>Attributes:
	    <list style="bullet">
	      <t>id: an identifier for the tag (optional)</t>
	      <t>start: the initial declaration of the variable to be iterated over</t>
	      <t>test: the condition to test the iterated value against</t>
	      <t>iter: the action to perform on the iterator variable at the end of
		each pass through the loop</t>
	    </list>
	  </t>
	  <t>Description</t>
	  <t>
	    Contains template data evaluated while "test" is true. The value of
	    Test is raw PHP code, executed in safe mode.
	  </t>
	  <t>Syntax example:
	    <artwork>
	      &lt;xar:for start="$i = 0" test="$i &lt;= 10" iter="$i++"&gt;
	      // stuff
	      &lt;/xar:for&gt;
	    </artwork>
	  </t>
	  <t>Parent tag: none.</t>
	  <t>Child tags: none</t>
	</section>

	<!-- xar:foreach -->
	<section anchor="foreach" title="&lt;xar:foreach /&gt;">
	  <t>Open</t>
	  <t>Attributes:
	    <list style="bullet">
	      <t>id: an identifier for the tag (optional)</t>
	      <t>var: the name of a template array variable (without $)</t>
	      <t>as: the name of the variable (without $) to which the value of
		each element of var is assigned</t>
	    </list>
	  </t>
	  <t>Description</t>
	  <t>
	     Iterates over an array, assigning each element in var to as.
	  </t>
	  <t>Syntax example:
	    <artwork>
	      &lt;xar:foreach var="users" as="user"&gt;
	      // stuff
	      &lt;/xar:foreach&gt;
	    </artwork>
	  </t>
	  <t>Parent tag: none.</t>
	  <t>Child tags: none</t>
	</section>

	<!-- xar:if -->
	<section anchor="if" title="&lt;xar:if /&gt;">
	  <t>Open</t>
	  <t>Attributes:
	    <list style="bullet">
	      <t>id: an identifier for the tag (optional)</t>
	      <t>condition: an expression to be evaluated (required)</t>
	      <t>inline: specifies whether the statement should be in ternary form
		(condition ? truepart:falsepart) (optional, default false)</t>
	    </list>
	  </t>
	  <t>Description</t>
	  <t>
	    Contains template code processed if the condition evaluates to true.
	    The value of Condition is raw PHP code, executed in safe mode.
	  </t>
	  <t>Syntax example:
	    <artwork>
	      &lt;xar:if condition="$func eq 'editStory'"&gt;
	      // stuff
	      &lt;xar:elseif condition="$func eq 'saveStory'"&gt;
	      //more stuff
	      &lt;xar:elseif condition="$func eq 'viewStory'"&gt;
	      //still more stuff
	      <xref target="else">&lt;xar:else /&gt;</xref>
	      //even more stuff
	      &lt;/xar:if&gt;
	    </artwork>
	  </t>
	  <t>Parent tag: none.</t>
	  <t>Child tags: <xref target="else">&lt;xar:else /&gt;</xref> <xref target="elseif">&lt;xar:elseif /&gt;</xref></t>
	</section>

	<!-- xar:loop -->
	<section anchor="loop" title="&lt;xar:loop /&gt;">
	  <t>Open</t>
	  <t>Attributes:
	    <list style="bullet">
	      <t>id: an identifier for the tag (optional)</t>
	      <t>name: the variable which the loop increments</t>
	    </list>
	  </t>
	  <t>Description</t>
	  <t>
	    Loop allows theme authors to execute snippets of a template multiple
	    times based on a condition.
	  </t>
	  <t>Syntax example:
	    <artwork>
	      &lt;xar:loop name="#$module_data#"&gt;
	      // stuff
	      &lt;/xar:loop&gt;
	    </artwork>
	  </t>
	  <t>Parent tag: none.</t>
	  <t>Child tags: none</t>
	</section>

	<!-- xar:ml -->
	<section anchor="ml" title="&lt;xar:ml /&gt;">
	  <t>Open</t>
	  <t>Attributes:
	    <list style="bullet">
	      <t>id: an identifier for the tag (optional)</t>
	    </list>
	  </t>
	  <t>Description</t>
	  <t>
	    Ml is a wrapper for <xref target="mlkey">&lt;xar:mlkey /&gt;</xref> and <xref target="mlstring">&lt;xar:mlstring /&gt;</xref> when
	    their values contain placeholders. These placeholders are replaced by
	    the content of <xref target="mlvar">&lt;xar:mlvar /&gt;</xref> tags in the order they appear in the
	    template.
	  </t>
	  <t>Syntax example:
	    <artwork>
	      &lt;xar:ml&gt;
	      &lt;xar:mlkey&gt;USERSONLINE&lt;/xar:mlkey&gt;
	      &lt;xar:mlvar&gt;78&lt;/xar:mlvar&gt;
	      &lt;xar:mlvar&gt;120&lt;/xar:mlvar&gt;
	      &lt;/xar:ml&gt;

	      &lt;xar:ml&gt;
	      &lt;xar:mlstring&gt;There are #(1) members and #(2) guests online.&lt;/xar:mlstring&gt;
	      &lt;xar:mlvar&gt;78&lt;/xar:mlvar&gt;
	      &lt;xar:mlvar&gt;120&lt;/xar:mlvar&gt;
	      &lt;/xar:ml&gt;
	    </artwork>
	  </t>
	  <t>Parent tag: none.</t>
	  <t>Child tags: 
	    <xref target="mlkey">&lt;xar:mlkey /&gt;</xref>, 
	    <xref target="mlstring">&lt;xar:mlstring /&gt;</xref>, 
	     <xref target="mlvar">&lt;xar:mlvar /&gt;</xref>, (optional)</t>
	</section>

	<!-- xar:mlkey -->
	<section anchor="mlkey" title="&lt;xar:mlkey /&gt;">
	  <t>Open</t>
	  <t>Attributes:
	    <list style="bullet">
	      <t>id: an identifier for the tag (optional)</t>
	    </list>
	  </t>
	  <t>Description</t>
	  <t>
	    <xref target="mlkey">&lt;xar:mlkey&gt;</xref> retrieves a multilanguage string based on the database key
	    contained in the tag. If the resulting string does not use
	    placeholders, mlkey may be used alone. Otherwise, mlkey must have
	    <xref target="ml">&lt;xar:ml /&gt;</xref> as a parent tag, with  <xref target="mlvar">&lt;xar:mlvar /&gt;</xref> tags as
	    siblings. See <xref target="ml">&lt;xar:ml /&gt;</xref> for syntax examples using placeholders.
	  </t>
	  <t>Syntax example:
	    <artwork>
	      &lt;xar:mlkey&gt;LOGIN&lt;/xar:mlkey&gt;
	    </artwork>
	  </t>
	  <t>Parent tag: <xref target="ml">&lt;xar:ml /&gt;</xref> (optional).</t>
	  <t>Child tags: none</t>
	</section>

	<!-- xar:mlstring -->
	<section anchor="mlstring" title="&lt;xar:mlstring /&gt;">
	  <t>Open</t>
	  <t>Attributes:
	    <list style="bullet">
	      <t>id: an identifier for the tag (optional)</t>
	    </list>
	  </t>
	  <t>Description</t>
	  <t>
	    &lt;xar:mstring&gt; processes a multilanguage string. It first finds the string
	    in the db and, based on the string's key, returns the corresponding
	    string in the current locale. If the resulting string does not use
	    placeholders, mlstring may be used alone. Otherwise, mlstring must
	    have <xref target="ml">&lt;xar:ml /&gt;</xref> as a parent tag, with  <xref target="mlvar">&lt;xar:mlvar /&gt;</xref> tags as
	    siblings. See <xref target="ml">&lt;xar:ml /&gt;</xref> for syntax examples using placeholders.
	  </t>
	  <t>Syntax example:
	    <artwork>
	      &lt;xar:mlstring&gt;Remember Me&lt;/xar:mlstring&gt;
	    </artwork>
	  </t>
	  <t>Parent tag: <xref target="ml">&lt;xar:ml /&gt;</xref> (optional).</t>
	  <t>Child tags: none</t>
	</section>

	<!-- xar:mlvar -->
	<section anchor="mlvar" title="&lt;xar:mlvar /&gt;">
	  <t>Open</t>
	  <t>Attributes:
	    <list style="bullet">
	      <t>id: an identifier for the tag (optional)</t>
	    </list>
	  </t>
	  <t>Description</t>
	  <t>
	    Contains a string passed to an accompanying <xref target="mlkey">&lt;xar:mlkey /&gt;</xref> or
	    <xref target="mlstring">&lt;xar:mlstring /&gt;</xref> to occupy a place holder. See <xref target="ml">&lt;xar:ml /&gt;</xref> for
	    syntax examples using placeholders.
	  </t>
	  <t>Syntax example:
	    <artwork>
	      none yet
	    </artwork>
	  </t>
	  <t>Parent tag:  <xref target="ml">&lt;xar:ml /&gt</xref></t>
	  <t>Child tags: none</t>
	</section>

	<!-- xar:module -->
	<section anchor="module" title="&lt;xar:module /&gt;">
	  <t>Closed</t>
	  <t>Attributes:
	    <list style="bullet">
	      <t>id: an identifier for the tag (optional)</t>
	      <t>name: the name of the module</t>
	    </list>
	  </t>
	  <t>Description</t>
	  <t>
	    Module loads and displays module output. The module gets all variables
	    needed directly from the core.
	  </t>
	  <t>Syntax example:
	    <artwork>
	      &lt;xar:module name="News" /&gt;
	    </artwork>
	  </t>
	  <t>Parent tag: none.</t>
	  <t>Child tags: none</t>
	</section>

	<!-- xar:sec -->
	<section anchor="sec" title="&lt;xar:sec /&gt;">
	  <t>Open</t>
	  <t>Attributes:
	    <list style="bullet">
	      <t>id: an identifier for the tag (optional)</t>
	      <t>realm: the realm which the permission checks</t>
	      <t>component: the module/block which the permission checks</t>
	      <t>instance: the specific data the permission checks</t>
	      <t>level: the security level checked against</t>
	    </list>
	  </t>
	  <t>Description</t>
	  <t>
	    Sec translates directly to a call to xarSecAuthAction(), and is
	    treated as an 'if' clause. <xref target="else">&lt;xar:else /&gt;</xref> and <xref target="elseif">&lt;xar:elseif /&gt;</xref>
	    tags may be attached as for an <xref target="if">&lt;xar:if /&gt;</xref>.
	  </t>
	  <t>Syntax example:
	    <artwork>
	      &lt;xar:sec
	      realm="0"
	      component="Menublock::"
	      instance="Administration|Stats|Referers"
	      level="none"
	      &gt;
	    </artwork>
	  </t>
	  <t>Parent tag: none.</t>
	  <t>Child tags: none</t>
	</section>

	<!-- xar:set -->
	<section anchor="set" title="&lt;xar:set /&gt;">
	  <t>Open</t>
	  <t>Attributes:
	    <list style="bullet">
	      <t>id: an identifier for the tag (optional)</t>
	      <t>name: the name of the variable to be set</t>
	    </list>
	  </t>
	  <t>Description</t>
	  <t>
	    Causes the variable identified by the 'name' attribute to be set to
	    the value of the tag's body. The variable must be available in the
	    scope of the tag.
	  </t>
	  <t>Syntax example:
	    <artwork>
	      &lt;xar:set name="$foo"&gt;bar&lt;/xar:set&gt;
	    </artwork>
	  </t>
	  <t>Parent tag: none.</t>
	  <t>Child tags: none</t>
	</section>

	<!-- xar:template -->
	<section anchor="template" title="&lt;xar:template /&gt;">
	  <t>Closed</t>
	  <t>Attributes:
	    <list style="bullet">
	      <t>id: an identifier for the tag (optional)</t>
	      <t>file: the filename of the target template</t>
	      <t>type: a switch that tells the engine what type of template is
		being loaded, either 'module' or 'theme'.</t>
	      <t>compile: a switch that tells the engine whether to compile the
		file as a template. Defaults to true.</t>
	    </list>
	  </t>
	  <t>Description</t>
	  <t>
	    Opens the file specified by "file" and processes it within the context
	    of the calling template. Included templates are stored in:
	    <list>
	      <t>/modules/[module name]/xarincludes/</t>
	      <t>/themes/[theme name]/modules/[module name]/xarincludes/</t>
	      <t>/themes/[theme name]/xarincludes/</t>
	    </list>
	  </t>
	  <t>
	    The 'filename' only includes the basename of the file, e.g.
	    'module_header'. The 'type' attribute tells the compiler where to look
	    for the file. If 'module', looks in /themes/[theme
	    name]/modules/[module name]/xarincludes/ first, then in
	    /modules/[module name]/xarincludes/. If 'theme', it directs the
	    compiler to look in /themes/[theme name]/xarincludes/. The compiler
	    always assumes .xar for the file extension. The file is subject to PHP
	    safe mode.
	  </t>

	  <t>Syntax example:
	    <artwork>
	      &lt;xar:template file="top_links" type="theme"/&gt;
	    </artwork>
	  </t>
	  <t>Parent tag: none.</t>
	  <t>Child tags: none</t>
	</section>

	<!-- xar:var -->
	<section anchor="var" title="&lt;xar:var /&gt;">
	  <t>Closed</t>
	  <t>Attributes:
	    <list style="bullet">
	      <t>id: an identifier for the tag (optional)</t>
	      <t>scope: a string, one of config, module, block, or user (optional)</t>
	      <t>name: the name of the variable within the given scope</t>
	    </list>
	  </t>
	  <t>Description</t>
	  <t>
	    Var deals with variables in different scopes. If no scope is
	    specified, Blocklayout returns the contents of the local variable.
	  </t>
	  <t>
	    Variables are referenced by name, without the preceeding "$". Arrays
	    can be indexed via dot notation, i.e.: 
	    <artwork>
	      &lt;xar:var  name="preformat.catandtitle" /&gt;
	    </artwork>
	  </t>
	  <t>Syntax example:
	    <artwork>
	      &lt;xar:var name="preformat.catandtitle" /&gt;
	    </artwork>
	  </t>
	  <t>Parent tag: none.</t>
	  <t>Child tags: none</t>
	</section>

	<!-- xar:while -->
	<section anchor="while" title="&lt;xar:while /&gt;">
	  <t>Open</t>
	  <t>Attributes:
	    <list style="bullet">
	      <t>id: an identifier for the tag (optional)</t>
	      <t>condition: the condition to test at the start of each iteration of
		the tag</t>
	    </list>
	  </t>
	  <t>Description</t>
	  <t>
	    Contains template data evaluated while "condition" is true. The value
	    of condition is raw PHP code, executed in safe mode.
	  </t>
	  <t>Syntax example:
	    <artwork>
	      &lt;xar:while condition="list($uid, $uname) = each $user_result"&gt;
	      // stuff
	      &lt;/xar:while&gt;
	    </artwork>
	  </t>
	  <t>Parent tag: none.</t>
	  <t>Child tags: none</t>
	</section>
      </section>
    </section>
    
    <section title="Notes">
      <t>
	Blocklayout	output is not restricted to HTML. Potential output formats
    include HTML, RSS, and RDF.
      </t>
    </section>

    <section title="Tag registration">
      <t>
	Each module may expand the list of available tags as necessary. For
	example, the Reviews module may define &lt;xar:reviews-review /&gt;. Modules
	must register their tags with the system in order for the compiler to
	recognize them. Tag registration is best handled by a module's init()
	function. Removing tags from the system (unregistration) is best
	performed in the module's remove() function.
	<artwork>
	  xarTplRegisterTag('module_name', 'tag_name', tag_object, 'handler_func_name');
	  xarTplUnregisterTag('tag_name');
	</artwork>
      </t>
      <t>
	Non-core tags must adhere to some simple naming conventions. This is
	to prevent conflicts between modules that implement different tags
	with the same name. A non-core tag must be prefixed by a module
	identifier (the name of the module, or another string assigned during
	the module certification process), a hyphen, and a string which
	loosely described the tags purpose. Tag names must begin with a
	letter.
      </t>
      <t>Example:
	<artwork>
	  xarTplRegisterTag('reviews', 'reviews-review', ...);
	</artwork>
      </t>
      <t>This would register the tag:
	<artwork>
	  &lt;xar:reviews-review/&gt;
	</artwork>
      </t>
      <t>
	Remember, "xar" is the namespace, and is not part of the tag
	name, even though blocklayout requires the namespace identifier to be
	present in every tag.
      </t>
    </section>
  </middle>
  <back>
    <section title="Future features">
      <t>
	Widgets: This feature will abstract common User Interface components
	into templatable tags.  The goal of such a feature is to give common
	components a consistent look and feel and cut down on code duplication
	while also making these features easy to use.
      </t>
      <t>
	Because widgets are meant for common usage, it is good practice for
	their output to take on a consistent appearance.  This makes for an
	easier and more pleasant user experience, and assures some level of
	consistency within a theme.
      </t>
      <t>
	Widgets will have certain constraints on their design, such as:
	<list style="numbers">
	  <t>must generate a common piece of markup</t>
	  <t>must be theoretically useable across modules</t>
	  <t>must implement only a single template</t>
	  <t>must present a point of interaction between the user and Xaraya, and/or</t>
	  <t>must present markup that allows standard data to be returned to xaraya</t>
	</list>
      </t>

      <t>
	Dynamic Style Sheets: This feature would use server-side browser
	sniffing to identify what CSS classes & attributes a given module can
	render (reasonably) correctly. Based on the result, either a &lt;style&gt;
	or &lt;link&gt; tag to the css would be output. The tag would reference a
	php script (css.php) which would actually generate the style sheet
	from database records.
      </t>

      <t>
	Theme Management: Blocklayout will necessitate the creation of
	administration tools to manage themes. These would include a template
	manager, theme variable manager, and possibly a theme
	installer/uninstaller (similar to what modules have).
      </t>

      <t>
	Multi-module layouts: This feature would allow Xaraya to display
	output from more than one module during a page request. Major core
	changes are required; hooks may provide some insight into how to
	implement this feature.
      </t>
      
      <t>
	The help system will add a new widget:
	<artwork>
	  &lt;xar:help /&gt; (scheduled beyond 1.0)
	</artwork>
      </t>
    </section>
  </back>
</rfc>
