-- 
-- Recommended settings for monotone for Xaraya committers
--
-- Explanation:
-- This file contains some definitions and hooks which will 
-- probably grow over time. Monotone uses a set of default
-- hooks which are predefined and may not always be suitable
--
-- A so called rcfile can live in 3 places:
-- 1. $HOME/.monotone/monotonerc
-- 2. <workdir>/_MTN/monotonerc
-- 3. specified on commandline as --rcfile=<file> or --rcfle=<directory>
--
-- The places 1. and 2. are checked automatically by monotone where
-- settings in 2. override settings in 1. (repo specific vs. global)
-- The --rcfile open overrides the settings in the automatic places; if 
-- you specify a directory after --rcfile, all files contained in that
-- directory will load
--
-- This file focusses on settings and hooks for the Xaraya project and
-- the obvious location would be <workdir>/_MTN/monotonerc if you use 
-- monotone for projects other than Xaraya and you dont want to have
-- the settings applied to those other projects, or $HOME/.monotone/monotonerc
-- if you want the settings in this file to be applicable for all your
-- projects.
--
-- All settings will be documented inline as much as needed to explain what
-- their effect will be. We only include settings and hooks which differ
-- from the default hooks which monotone predefines.
--
--

--
-- Configuration variables
--
-- Location of QA tests, allow it to be overridable earlier 
-- Example for OSX or linux:
qa_location=qa_location or "/var/mt/xar/com.xaraya.qa.tests/tests/"
-- Example for Windows:
-- qa_location=qa_location or "d:/var/mt/xar/com.xaraya.qa.tests/tests/"
-- 
-- Name of mtn executable
mtn_exe='mtn'
--
-- Line endings, a never ending story. Anyways, we want both the internal
-- representation and the external to have LF only
function get_linesep_conv(filename)
   return {"LF","LF"}
end

--
-- Return my pass when i use my id
-- This is probably the most important hook to have defined
-- replace <yourid> with your monotone key id (usually your xaraya email)
-- and replace <yourpassphrase> with the passphrase you entered when creating
-- your key.
function get_passphrase(identity)
   if (identity == "<yourid>") then return "<yourpassphrase>" end
end

-- This hook gets called just before writing a commit
-- changelog entry.
-- What we do here is massage the status text generated
-- by monotone to generate a gnu like Changelog entry as
-- best as we can
function edit_comment(basetext, existinglog)
   if (mtndebug ~= nil) then print("Start edit_comment() in xaraya.rc") end
   local exe = "vi"
   local visual = os.getenv("VISUAL")
   if (visual ~= nil) then exe = visual end
   local editor = os.getenv("EDITOR")
   if (editor ~= nil) then exe = editor end

   -- Write the initial contents to temporary file
   local tmp, tname = temp_file()
   if (tmp == nil) then return nil end

   -- Parse the basetext a bit (this takes a status message and produces a changelog
   -- compatible list of * file: whathappenedto it
   generatedlog = parse_statusmsg(basetext)

   -- Construct the log
   tmp:write("\n")
   tmp:write(generatedlog)
   tmp:write(existinglog)
   local notes = [[
MTN: ----------------------------------------------
MTN: Above is what has been parsed as changelog from 
MTN: the status of your working dir.
MTN: Augment them you see fit. Write the revision comment
MTN: on the first line(s) and per file comments on the next.
MTN: Lines starting with MT: will automatically be
MTN: removed]]
   tmp:write(notes)
   io.close(tmp)

   -- Remove the temporary file  if execution did not return 0
   if (execute(exe, tname) ~= 0) then
      os.remove(tname)
      return nil
   end

   -- Read it back in and remove all MT: lines
   tmp = io.open(tname, "r")
   if (tmp == nil) then os.remove(tname); return nil end
   local res = ""
   local line = tmp:read() -- eat the first line (WATCH OUT FOR THIS)
   while(line ~= nil) do 
      if (not string.find(line, "^MT:")) then
         res = res .. line .. "\n"
      end
      line = tmp:read()
   end
   io.close(tmp)
   os.remove(tname)

   -- Return the string to be further processed by monotone (as in put into a certificate)
   return res
end

--
-- Helper function to parse a status message (basic_io)
-- 
-- @todo use built-in parser now
function parse_statusmsg(msg)
    -- Go over the lines and massage it so it comes very close to what 
    -- we want to enter as a comment anyway
    if (mtndebug ~= nil) then print("Start parse_statusmsg() in xaraya.rc") end
    local pattern = "([^\n]-)\n" -- shortest thing before the newline
    local lines = {}
    local rename_string = nil
    local attrfile = nil
    local attr = nil
    local parsed = ""
    
    -- We dont use parse-basic-io, because msg is NOT (contains things before and after it)
    for line in string.gfind(msg, pattern) do
        if (mtndebug ~= nil) then print("Parsing line:" .. line .. "EOL") end
        -- Handle renames (stanza changed in mt.26)
        _,_,file = string.find(line,'^rename "(.-)"') -- which file?
        if(file~=nil) then 
            rename_string = ": renamed ("..file..")" 
        end
        _,_,file = string.find(line,'^%s+to "(.-)"') -- to what?
        if(file~=nil and rename_string~=nil) then
            table.insert(lines,"\t* "..file..rename_string)
            rename_string = nil
        end
        -- Handle new directories (mt.26)
        _,_,file = string.find(line,'^add_dir "(.-)"')
        if(file~=nil) then 
            table.insert(lines,"\t* "..file..": new dir") 
        end
        -- Handle new files
        _,_,file = string.find(line,'^add_file "(.-)"')
        if(file~=nil) then 
            table.insert(lines,"\t* "..file..": new file") 
        end
        -- Handle dropped files
        _,_,file = string.find(line,'^delete "(.-)"')
        if(file~=nil) then
            table.insert(lines,"\t* "..file..": dropped")
        end
  
        -- Handle changed files
        _,_,file = string.find(line,'^patch "(.-)"')
        if(file~=nil) then neworadded = file end
  
        -- Based on the from line, only add changed stuff
        i,_,oldrev = string.find(line,"^%s+from %[([%a%d]+)%]")
        if(oldrev~=nil and neworadded~=nil ) then
            table.insert(lines,"\t* "..neworadded..": ...")
            neworadded = nil
        end
  
        -- Handle attribute setting, which is now a first class operation
        _,_,file = string.find(line,'^  set "(.-)"')
        if(file~=nil) then
            attrfile = file
        end
        _,_,attr = string.find(line,'^ attr "(.-)"')
        if(attr~=nil and attrfile ~=nil) then
            table.insert(lines,"\t* "..attrfile..": set attribute ("..attr..")")
            attrfile = nil
        end
        
    -- Handles for new mtn output
        -- Handle renames for new mtn output
        _,_,file = string.find(line,'^  renamed  (.*)') -- which file?
        if(file~=nil) then 
            rename_string = ": renamed ("..file..")" 
        end
        _,_,file = string.find(line,'^%s+to  (.*)') -- to what?
        if(file~=nil and rename_string~=nil) then
            table.insert(lines,"\t* "..file..rename_string)
            rename_string = nil
        end

        -- Handles new files and directories for new mtn output
        _,_,file = string.find(line,'^  added    (.*)')
        if(file~=nil) then 
            table.insert(lines,"\t* "..file..": new file") 
        end
        
        -- Handle dropped files for new mtn output
        _,_,file = string.find(line,'^  dropped  (.*)')
        if(file~=nil) then
            print "dropped"
            table.insert(lines,"\t* "..file..": dropped")
        end

        -- Handle changed files for new mtn output
        _,_,file = string.find(line,'^  patched  (.*)')
        if(file~=nil) then
          print "changed"
          table.insert(lines,"\t* " .. file .. ": ...") 
        end

        -- TODO Handle attribute setting for new mtn output
    end
    for index, line in pairs(lines) do  parsed = parsed .. line .. "\n" end

    return parsed
end


--
-- This hook runs just after revision id revid has been committed
-- After the revision has been committed, we parse the changelog and
-- comment certificates for mentioning of bugs. If found, the user
-- is asked if they want to create certificates for them
-- NOTE: this hook spawns the monotone executable inside a lua hook
-- and assumes that monotone(.exe) exists on the path.
-- While it is a bit risky to call monotone itself in a hook, this
-- hook runs *after* a revision has been committed, so i think it's OK here.
function note_commit(revid, status_text, certs)
   -- Gather the info needed
   -- table with bug numbers
   if (mtndebug ~= nil) then print("Starting note_commit() in xaraya.rc") end
   bugs = extractbugs(certs)
   local buglist = ""
   for bug, there in pairs(bugs) do 
      if(buglist ~= "") then buglist = buglist .. ", " end
      buglist = buglist .. bug
   end
   if(buglist ~= "") then 
      print("----------------------------------")
      print(string.format("Mentioned bugs: %s",buglist))
      io.write("Link these bugs to revision? [Y/n]")
      response = io.read()
      if(response == "" or response=="y" or response=="Y") then
         print("Ok, creating certificates for them")
         for bug, there in pairs(bugs) do
            -- TODO: add some checking here?
            result,exitcode = execute(mtn_exe,"cert",revid,"bug",bug)
         end
      else
         print("Ok, skipping bug certificates")
      end
      print("----------------------------------")
   end
end

--
-- Extract a table of bugids mentioned in certs, 
--
function extractbugs(certs)
   if (mtndebug ~= nil) then print("Starting extractbugs() in xaraya.rc") end
   local bugs = {} -- empty table for holding the bugs
   -- which certificates do we want to look in ?
   -- at this moment, only changelog is relevant. Other certs can only
   -- be created after a commit, so this function will never get called for
   -- those certificates ( I think :-) )
   local whichcerts = {
      changelog = true,
      comment   = true
   }
   -- A list of patterns to match in comments, when matched the bug number is recorded
   -- TODO: make this more intelligent
   local patterns = {                     
      "bug%s+[#]?(%d+)",                     -- basic 'bug 999' and 'bug #999' mention
      "bug[s]?.-[#]?(%d+)",                  -- 'bug[s]' and first number after that
      "bug[s]?.-[#]?%d+[,]?%s+.-[#]?(%d+)",  -- 'bug[s]' and second number after that
      "bug[s]?.-and%s+[#]?(%d+)"             -- 'bug[s]' and number preceded by 'and '
   }

   -- subfunction to actually make the number
   function  extractbugnumbers(value)
      for index, pattern in pairs(patterns) do
         for w in string.gfind(string.lower(value), pattern) do  
            bugs[w] = true
         end
      end
   end

   -- Start main function
   if(type(certs) == "table") then
      for cert, value in pairs(certs) do
         -- Go over each cert
         if whichcerts[cert] then
            -- Configured to be parsed
            extractbugnumbers(value)
         end
      end
   end
   return bugs
end

--
-- List of branches which we consider closed
--
-- TODO: store this in .mtn-ignore-branches for example
function ignore_branch(name)
   if (mtndebug ~= nil) then print("ignore_branch() in xaraya.rc") end
   if name=='com.xaraya.core.marcel'     then return true end
   if name=='com.xaraya.core.ddextend'   then return true end
   if name=='com.xaraya.core.ddprops'    then return true end
   if name=='com.xaraya.core.changesdue' then return true end
   if name=='com.xaraya.core.creole'     then return true end
   if name=='com.xaraya.core.blimprovs'  then return true end
   if name=='com.xaraya.core.uitesting'  then return true end
   return false
end

--
-- Validate a commit message and run pre-commit routines, if any
--
-- @param commit_msg   the text the user entered
-- @param stanza       a basic_io stanza for the commit scope (like mtn status)
-- @param branchname   the branch on which the commit is made
-- @return bool,string pair of result, reason (bool,string) to signify routine result.
function validate_commit_message (commit_msg, stanza, branchname)
    if (mtndebug ~= nil) then print("Starting validate_commit_message() in xaraya.rc") end
    cancommit=true -- assume all well
    branch = branchname or 'unknown'
    function passed(nr,desc)     
        nr=nr or '0.00'; desc=desc or "ERR: no description for test given"
        print("PASSED QA test "..nr..": "..desc) 
    end
    function failed(nr,desc,msg) 
        nr=nr or '0.00'; desc=desc or "ERR: no description for test given"
        msg=msg or 'ERR: no failure message given for test'
        print("FAILED QA test "..nr..": "..desc.."\n"..msg); cancommit=false 
    end
    
    -- Initialize what the trigger should have access to
    status_table=parse_basic_io(stanza)
    commit_files = {}
    for index,io_line in pairs(status_table) do
        -- For changed files take the value on same line
        if io_line.name=='patch'  then table.insert(commit_files,io_line.values[1]) end
        -- For renamed files, take the new one
        if io_line.name=='rename' then table.insert(commit_files,status_table[index+1].values[1]) end
        -- For new files, take the value on the same line
        if io_line.name=='add_file' then table.insert(commit_files,io_line.values[1]) end
    end
    
    -- Run qa checks on the files contained in this revision
    local pcloc=qa_location..'pre-commit/'
    print("mtn: Running QA tests from: " .. pcloc)
    -- TODO: opening the pcloc location on windows errors out, so we dont have
    -- a graceful fallback at this time.
    _sysres = includedir(pcloc)
    if cancommit then
        return cancommit,"All seems OK, committing this revision"
    else
        return cancommit,"One or more tests failed, NOT commiting"
    end
    return false, "ERR: xaraya.rc hook code error, hook reached end?"
end
