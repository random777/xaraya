<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.4//EN"
"http://www.oasis-open.org/docbook/xml/4.4/docbookx.dtd" [
<!ENTITY documentinfo SYSTEM "parts/document_info.xml">
<!ENTITY preface SYSTEM "parts/preface.xml">
<!ENTITY introduction SYSTEM "parts/introduction.xml">
<!ENTITY xaraya_module_architecture SYSTEM "parts/xaraya_module_architecture.xml">
<!ENTITY create_your_module SYSTEM "parts/create_your_module.xml">
<!ENTITY understanding_hooks SYSTEM "parts/understanding_hooks.xml">
<!ENTITY bibliography SYSTEM "parts/bibliography.xml">
<!ENTITY glossary SYSTEM "parts/glossary.xml">
<!ENTITY other SYSTEM "parts/other.xml">
<!ENTITY error_handling SYSTEM "parts/error_handling.xml">
<!ENTITY module_operation SYSTEM "parts/module_operation.xml">
]>
<book>
  <!-- Meta info about this document -->
  &documentinfo;

  <!-- Preface -->
  &preface;

  <!-- Introduction -->
  &introduction;

  <chapter>
    <title>Xaraya Architecture</title>

    <para>This chapter describes the basic architecture of Xaraya, explains
    the major parts, and contains information on the design choices made for
    the system. It describes how basic parts of Xaraya operate and what you
    can expect from Xaraya Core.</para>

    <section>
      <title>Block lay-out</title>
      <para>Explanation of Block Lay-out in Xaraya</para>
    </section>

    <section>
      <title>Xaraya API</title>
      <para>Reference type of text</para>
    </section>

    <section>
      <title>Core modules</title>
      <para>What Core modules are there, what can you use</para>
    </section>

    <section>
      <title>Blocks</title>
      <para></para>
    </section>

    <!-- Section about variable handling was here -->

    <!-- Section about error handling was here -->
    &error_handling;

    <section>
      <title>Itemtypes</title>

      <para>Itemtypes definitions are crucial in Xaraya operations. Itemtypes
      are very important when ever your data is shared with either hooks or by
      other modules.</para>

      <para>Related functions</para>

      <para>-getitemtypes</para>

      <para>-getitemlinks</para>
    </section>

    <section>
      <title>Interaction with core classes</title>

      <para>The interaction with core functions, what to rely on and how to
      access these functions</para>
    </section>

    <section>
      <title>Multilanguage system</title>

      <para>Xaraya can be fully multilanguage. Make sure all your text strings
      are encapsulated with either <programlisting>xarML('YourMLString') </programlisting>in
      your functions or <programlisting>&lt;xar:mlstring&gt;YourMLString&lt;/xar:mlstring&gt;</programlisting>
      in the templates</para>
    </section>

    <section>
      <title>Variable preparations</title>

      <para><programlisting>xarVarPrepForDisplay(YourString);</programlisting></para>
    </section>

    <section>
      <title>Dynamic Data</title>

      <para>Properties</para>

      <para>Your own properties</para>
    </section>
  </chapter>

  <!-- Module architecture -->
  &xaraya_module_architecture;



  <!-- Chapter on module operation does not have a match in new org -->
  &module_operation;

  <!-- Hooks -->
  &understanding_hooks;


  <chapter>
    <title>Writing your module</title>

    <para>This Chapter can be the reference to how to setup your module
    design</para>

    <!-- Here was an explanation on the checklist for modules -->
  </chapter>

  <chapter>
    <title>Notes in Developing Modules</title>

    <para>xarAPI is the Xaraya Application Programming Interface, a way for
    modules to interact with the Xaraya core without needing to access tables
    and internal structures directly. The API also allows for the underlying
    implementation details of Xaraya to be hidden from developer so that they
    can write modules in a standard fashion and not worry about what might
    change under the hood. This is very important for a system such as Xaraya,
    which has undergone, and continues to undergo, radical changes in the core
    design to allow it to be faster, more secure, and more flexible. xarAPI is
    the only supported way of accessing core information. Module developers
    must use these methods of obtaining information from the Xaraya core
    system; failure to do so will very likely result in their module not
    working when the next version of Xaraya is released.</para>

    <section>
      <title>Security</title>

      <para>Security is a very important part of Xaraya. All modules should
      subscribe to the Xaraya Security model to ensure that they operate
      correctly within all environments. For full information on security
      refer to the Xaraya Security Model documentation, however the main
      points as regards modules are covered briefly below. Variable Handling
      All variables that come in to or go out of Xaraya should be handled by
      the relevant xarVar*() functions to ensure that they are safe. Failure
      to do this could result in opening security holes at the web,
      file-system, display, or the database layers. Full information on these
      functions is in the Xaraya API Guide, and examples of their use are
      shown throughout the example module. It can be assumed that any
      variables passed to functions in the Xaraya API will be handled
      correctly, and as such these variables do not need to be prepared with
      the xarVar*() functions.</para>
    </section>

    <section>
      <title>Authorization</title>

      <para>All items displayed for users and actions carried out by
      administrators must be authorized through use of the xarSecAuthAction()
      function. This function underlies the entire Xaraya permissions system
      and as such must be used wherever an access check is required.</para>
    </section>

    <section>
      <title>Reserved Variable Names</title>

      <para>
        Xaraya has a number of variables, which are reserved. These
        variables are not be used within modules as they can conflict with the
        Xaraya core and cause unpredictable results. The current lists of
        variables, which are reserved, are as follows:
        <itemizedlist>
          <listitem>
            <para><varname>file</varname>: the file to open</para>
          </listitem>
          <listitem>
            <para>
              <varname>func</varname>: 
              In use for Function, the function being called
            </para>
          </listitem>
          <listitem>
            <para><varname>loadedmod</varname>:
            The module that is loaded. Mainly in use by the core module
            'roles'
            </para>
          </listitem>
          <listitem>
            <para><varname>module</varname>:
            The module that is being called
            </para>
          </listitem>
          <listitem><para><varname>name</varname></para></listitem>
          <listitem><para><varname>op</varname></para></listitem>
          <listitem><para><varname>pagerstart</varname></para></listitem>
          <listitem><para><varname>pagertotal</varname></para></listitem>
          <listitem>
            <para><varname>type</varname>:
            Either user or admin, type of function to call
            </para>
          </listitem>
        </itemizedlist>
      </para>
      <para>In addition, all one-letter variables are reserved.</para>
    </section>

    <section>
      <title>Page Path</title>

      <para>All input from web pages goes through a two-stage process. The
      first part is displaying the information entered in a form, and the
      second is obtaining that information and passing it on to the module
      API. In addition to the visible information, there are often a number of
      hidden items of information in the first page that is used in the second
      page. To ensure that any attempt to add, delete, or change information
      in the Xaraya system goes through the full two-stage method of gathering
      and processing the information the two functions xarSecGenAuthKey() and
      xarSecConfirmAuthKey() must be used in the appropriate places. The
      Example module in the standard Xaraya distribution contains a number of
      functions that use these API calls, and note where they are used so that
      developed modules will have the same level of protection against
      fraudulent administrator requests.</para>
    </section>

    <section>
      <title>Output</title>

      <para>All output generated by module functions must be returned to the
      Xaraya core. No output of any type pushed directly from the module; this
      is not supported and will break in future versions of Xaraya.</para>
    </section>

    <section>
      <title>Using Object Oriented Code</title>

      <para>Modules written as classes is allowed, however the API as
      described in the rest of this document must still be adhered to. The
      simplest way of doing this is to use compatibility functions, for
      example: 
      <programlisting>
        function mymod_user_main() {
          // Instantiate
          $obj = new myClass();
          // Call relevant method and return output return
          $obj-&gt;usermain();
        }
      </programlisting></para>
    </section>
  </chapter>

  <!-- Create module part came roughly from here -->
  &create_your_module;
  
  <!-- Other stuff to be organized -->
  &other;

  <!-- Index -->
  <index/>

  <!-- Bibliography -->
  &bibliography;
  
  <!-- Glossary -->
  &glossary;
</book>
