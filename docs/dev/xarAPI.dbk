<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
  "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<!--
TODO
pnSecConfirmAuthKey
pnSecGenAuthKey
-->
<book>
  <bookinfo>
    <title>PostNuke API Command Reference</title>
    <authorgroup>
      <author><firstname>Marco</firstname><surname>Canini</surname></author>
      <author><firstname>Jim</firstname><surname>McDonald</surname></author>
      <author><firstname>John</firstname><surname>Robeson</surname></author>
      <author><firstname>Gregor J.</firstname><surname>Rothfuss</surname></author>
      <author><firstname>Jan</firstname><surname>Schrage</surname></author>
    </authorgroup>
    <pubdate>12nd May 2002</pubdate>
    <edition>V1.8</edition>
    <releaseinfo>

      This document is in alpha, and as such the description of the API is
      likely to change.  Do not use the functions outlined in this document for
      development work.

    </releaseinfo>

  </bookinfo>


  <chapter>
    <title>Overview</title>
    <sect1>
      <title>What is the PostNuke API?</title>
      <para>

        The PostNuke API is a set of functions for the PostNuke content system
        that allows developers to access key information and manage their
        specific content in an easy fashion.

      </para>
    </sect1>
    <sect1>
      <title>Advantages of an API</title>
      <para>

        There are a number of advantages to having an API for the PostNuke
        system.  Primarily, using an API allows developers to write
        PostNuke-compliant code that they can guarantee will still work whenever
        PostNuke is upgraded.  This is especially important for a system such
        as PostNuke as the core functionality of the system is at current very
        much in flux and is altering rapidly to meet the demands being placed
        upon it.  Having a stable interface into the system is one way of
        ensuring that the core developers can continue their work on updating
        and optimising the PostNuke system without continually breaking the
        code that module developers have written.

      </para>
      <para>

        Other reasons for using an API include the ability for developers to
        start working with PostNuke more quickly without needing to understand
        the internals of the system, to have standardised ways of obtaining and
        manipulating information, and 

      </para>
    </sect1>
    <sect1>
      <title>Disadvantages of an API</title>
      <para>

        The main disadvantage of having an API is when you want to do something
        that it does not have a suitable function for.  This problem is
        addressed by encouraging developers to submit their own suggestions for
        new API functions, and even the functions themselves, for introduction
        into the core (details on the procedures for doing this are below).

      </para>
      <para>

        An API also adds overhead to the entire system, but the trade-off in
        stability and ease of development more than compensates for this.

      </para>
    </sect1>
    <sect1>
      <title>Who should use this API?</title>
      <para>

        The PostNuke API is primarily aimed at developers who wish to write
        modules for the PostNuke system.  In addition, some theme designers
        might use these functions to provide advanced features within their
        theme.

      </para>
    </sect1>
    <sect1>
      <title>Status of the API</title>
      <para>

        The PostNuke API is currently in alpha.  This means that the API may
        well have extra functions and arguments added to it.  However, all of
        the functions as outlined in this document will work as described, and
        continue to work as described for the foreseeable future.  Any future
        versions of the API will note where functions have been superceded or
        deprecated, and developers will have at least 6 months between any
        major changes in the API being implemented and the older functions
        being removed from the core, allowing suitable time for migration.

      </para>
    </sect1>
    <sect1>
      <title>This Document</title>
      <para>

        This document gives an overview of the PostNuke API, and also includes
        a reference for each official function currently available to
        developers.

      </para>
    </sect1>
    <sect1>
      <title>Related Documents</title>
      <para>

        Other documents that might be of use in conjunction with this guide are
        the Module Development Guide, the Theme Development guide, the
        Categorised Data Guide, and the Output Functions Guide (all yet to be
        written).

      </para>
    </sect1>
    <sect1>
      <title>Suggestions and Updates</title>
      <para>

        The PostNuke API is a work-in-progress.  There will be many functions
        that are missing from the API that developers would like.  To this end,
        if a developer has a request for a particular function then they can
        submit it to the PostNuke features request list on SourceForge at the
        <ulink url="http://sourceforge.net/project/post-nuke">PostNuke
          Homepage</ulink>.  The same system can be used for sending in updates
        of current functions or new functions.  If you are a developer and
        currently either globals directly or accessing one of the core tables
        to obtain or update information then please consider sending in a
        feature request so that the PostNuke team can develop an API to carry
        out the work instead.  This will ensure that your code is more likely
        to continue working through future versions of PostNuke without
        modification, and that 

      </para>
      <para>

        Please note that the main requirements for the core PostNuke API are
        stability and a relatively small footprint.  Due to this it is possible
        that your request for a new or updated function will get refused on the
        grounds that it is too specific or can easily be built from other core
        API functions.  In such situations the PostNuke team will always try to
        provide a simple alternative, but please remember that submission of a
        new or updated part of the API does not guarantee inclusion.

      </para>
    </sect1>
  </chapter>

  <chapter>
    <title>API Breakdown</title>
    <para>

      The PostNuke API is broken down in to a number of different areas.  These
      areas are as follows:

    </para>
    <sect1>
      <title>Users</title>
      <para>

        This area covers everything related to users.  Confirming that a user
        is logged in, getting a user-specific configuration parameter, or
        logging a user into the PostNuke system are examples of functions that
        fall into this area.

      </para>
    </sect1>
    <sect1>
      <title>Modules</title>
      <para>

        This area covers everything related to modules.  Seeing if a particular
        module is available, setting a module-specific configuration parameter,
        or loading in a particular module API are examples of functions that
        fall into this area.

      </para>
    </sect1>
    <sect1>
      <title>Security</title>
      <para>

        This area covers everything related to security.  Checking a user's
        ability to carry out a particular action and generating unique request
        identifier keys to avoid spoof and repeat attacks are examples of
        functions that fall into this area.

      </para>
    </sect1>
    <sect1>
      <title>Sessions</title>
      <para>

        This area covers everything related to HTTP sessions.  Setting session
        variables, creating session cookies to pass to the user's web browser,
        and initialising the PHP settings to allow correct implementation of
        the allowable security measures are examples of functions that fall
        into this area.

      </para>
    </sect1>
    <sect1>
      <title>Variables</title>
      <para>

        This area covers everything related to handling of variables.  Cleaning
        and sanitising user input, correctly escaping information to be stored
        in a database, and ensuring that filenames do not have
        operating-system-unfriendly characters in them are examples of
        functions that fall into this area.

      </para>
    </sect1>
    <sect1>
      <title>Output</title>
      <para>

        This area covers everything related to output.  Creating a table of
        information, adding a drop-down list to a form, and printing a page for
        the user are examples of functions that fall into this area.

      </para>
    </sect1>
    <sect1>
      <title>Database</title>
      <para>

        This area covers everything related to database.  Initialising a
        database connection, getting a handle to a database, and obtaining a
        list of tables that the database contains are examples of functions
        that fall into this area.

      </para>
    </sect1>
    <sect1>
      <title>Miscellaneous</title>
      <para>

        This area covers any number of other functions that are useful but do
        not belong to any particular group.  Loading the current user theme,
        getting status messages from the previously run command, and carrying
        out HTTP redirects to other pages are examples of functions that fall
        into this area.

      </para>
    </sect1>
  </chapter>

  <chapter>
    <title>Notes on Programming with the API</title>
    <sect1>
      <title>Use of <parameter>void</parameter></title>
      <para>

        Throughout the API reference, use is made of a type
        <parameter>void</parameter>, especially for specific return values.
        PHP does not in itself have a type of <parameter>void</parameter>, it
        is used in this document to refer to an unset value.
        It's very important for you to understand this difference since the
        the void parameter is heavily used by the exception handling system on which PostNuke API functions are based.

      </para>
      <para>

        For example, <function>pnModAPIFunc()</function> takes parameters of a
        module name, type, and function, works out which actual module function
        to call; it then calls the module function and passes back the return
        value as its own return value.  The problem with this is that if
        <function>pnModAPIFunc()</function> returned
        <parameter>false</parameter> for a failure to find the specified
        function then to the developer this would be indistinguishable from the
        function being found and itself returning false.
        <parameter>void</parameter> return values can be checked with the PHP
        <function>isset()</function> function, as shown below:

        <programlisting>
$articles = pnModAPIFunc('News', 'user', 'getarticles');
if (!isset($articles) &amp;&amp; pnExceptionMajor() != PN_NO_EXCEPTION) {
  // pnModAPIFunc() failed
  return; // throw back exception
}
if ($articles == false)
  // getarticles failed
} else {
  // getarticles succeeded, data in $articles
}
         </programlisting>

       </para>
       <para>

         Throughout the PostNuke API reference the return values of
         <parameter>void</parameter> and <parameter>false</parameter> are
         distinct.  <parameter>false</parameter> is returned when an API call
         functioned correctly but returns a negative response.
         <parameter>void</parameter> is returned when an API call has internal
         problems and raises an exception.  Note that this is
         a general rule, and there are a few exceptions out of necessity.
         These exceptions are noted in the reference documentation for the
         relevant function.

       </para>
     </sect1>
  </chapter>

  <chapter>
    <title>API Reference</title>
    <para>

      The following pages have a complete PostNuke API reference.  Any
      functions that are not listed in this section are to be considered
      internal and should not be used by developers.
    </para>

    <refentry id="pnBlockGetInfo">
      <refmeta>
        <refentrytitle>pnBlockGetInfo</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnBlockGetInfo</refname>
        <refpurpose>get block information</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>array <function>pnBlockGetInfo</function></funcdef>
            <paramdef>
              int <parameter>bid</parameter>
            </paramdef>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>BAD_PARAM</exceptionname>
            <exceptionname>DATABASE_ERROR</exceptionname>
            <exceptionname>ID_NOT_EXIST</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnBlockGetInfo()</function> returns an array of
          Block information.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>bid</term>
            <listitem>
              <para>

                The id of this block in the PostNuke system.

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns an array of block information or <parameter>void</parameter> if
          an exception was raised.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function raises BAD_PARAM if you pass an invalid parameter.
          This function raises DATABASE_ERROR if an error occurs while
          querying data.
          This function raises ID_NOT_EXIST if the block is unknown.

        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          The block information array contains the following items:

          <variablelist>
            <varlistentry>
              <term>bkey</term>
              <listitem>
                <para>



                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>title</term>
              <listitem>
                <para>

                  The display title of the block

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>content</term>
              <listitem>
                <para>

                  The container for block content. Serialized using
                  <function>pnBlockVarsFromContent()</function> and
                  <function>pnBlockVarsToContent()</function>.

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>url</term>
              <listitem>
                <para>

                  The url for blocks that depend on URLs, like a
                  rss headlines block.

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>position</term>
              <listitem>
                <para>

                  The position of the block, currently one of 'l' (left),
                  'r' (right), 'm' (middle). This is likely to change
                  in later versions to make placement more flexible.

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>weight</term>
              <listitem>
                <para>

                  The weight of the block, used for vertical placement
                  of blocks.

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>active</term>
              <listitem>
                <para>

                  The status of a block, '1' for active, '0' for inactive.

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>refresh</term>
              <listitem>
                <para>

                  Indicates if a block should be refreshed. Examples
                  would be headline blocks that fetch external
                  content regularly.

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>last_update</term>
              <listitem>
                <para>

                  The date and time of the last refresh of the block.

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>language</term>
              <listitem>
                <para>

                  The language of the block.

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>mid</term>
              <listitem>
                <para>

                  The ID of the module a block belongs to. '0' indicates
                  a block belonging to the core.

                </para>
              </listitem>
            </varlistentry>
          </variablelist>

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Get information on block
$blockinfo = pnBlockGetInfo($bid);
        </programlisting>
      </refsect1>
    </refentry>

    <refentry id="pnBlockLoad">
      <refmeta>
        <refentrytitle>pnBlockLoad</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnBlockLoad</refname>
        <refpurpose>load a block</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>bool <function>pnBlockLoad</function></funcdef>
            <paramdef>
              string <parameter>modname</parameter>
              string <parameter>block</parameter>
            </paramdef>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>BAD_PARAM</exceptionname>
            <exceptionname>DATABASE_ERROR</exceptionname>
            <exceptionname>ID_NOT_EXIST</exceptionname>
            <exceptionname>MODULE_FILE_NOT_EXIST</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnBlockLoad()</function> loads a block into
          the PostNuke system.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>modname</term>
            <listitem>
              <para>

                The well-known name of a module to load the block from.
                This parameter can be left empty, or set to 'Core'
                to load core blocks.

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>block</term>
            <listitem>
              <para>

                The name of the block to load

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns <parameter>true</parameter> if the module
          loaded successfully, and <parameter>void</parameter> if
          an exception was raised.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function raises BAD_PARAM if you pass an invalid parameter.
          This function raises DATABASE_ERROR if an error occurs while
          querying data.
          This function raises ID_NOT_EXIST if the block is unknown.
          This function raises MODULE_FILE_NOT_EXIST if the block file doesn't exist.

        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          The PostNuke API keeps track of what blocks have been loaded, so
          multiple calls to <function>pnBlockLoad()</function> with the
          same parameters will return <parameter>true</parameter> each
          time.

        </para>
        <para>

          For more information on well-known names of modules please refer
          to the documentation for <function>pnModGetVar()</function>

        </para>
        <para>

          This function does not display the block automatically, this
          must be carried out by a separate call to
          <function>pnBlockShow()</function>.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
  // Load the past article block from the News module
  if (!pnBlockLoad('News', 'past')) {
    die('Could not load past articles block');
  }
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnBlockShow()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnBlockShow">
      <refmeta>
        <refentrytitle>pnBlockShow</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnBlockShow</refname>
        <refpurpose>set configuration variable</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>string <function>pnBlockShow</function></funcdef>
            <paramdef>
              string <parameter>modname</parameter>,
              string <parameter>block</parameter>,
              array <parameter>blockinfo</parameter>
            </paramdef>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>BAD_PARAM</exceptionname>
            <exceptionname>DATABASE_ERROR</exceptionname>
            <exceptionname>ID_NOT_EXIST</exceptionname>
            <exceptionname>MODULE_FILE_NOT_EXIST</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnBlockShow()</function> gets the output of a block
          by calling its 'block_display' function.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>modname</term>
            <listitem>
              <para>

                The well-known name of a module to display the block from.
                This parameter can be left empty, or set to 'Core'
                to display core blocks.

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>block</term>
            <listitem>
              <para>

                The name of the block to load

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>blockinfo</term>
            <listitem>
              <para>

                An associative array of parameters to pass to the
                block display function. The exact number and type of
                parameter is block-dependent.

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns the output of the block display
          function is if it succeeds, or <parameter>void</parameter> if
          an exception was raised.

        </para>
       </refsect1>
       <refsect1>
        <title>Exceptions</title>
        <para>

          This function raises BAD_PARAM if you pass an invalid parameter.
          This function raises DATABASE_ERROR if an error occurs while
          querying data.
          This function raises ID_NOT_EXIST if the block is unknown.
          This function raises MODULE_FILE_NOT_EXIST if the block file doesn't exist.

        </para>
       </refsect1>
       <refsect1>
        <title>Notes</title>
        <para>

           TODO: nail down the block standards.
           Note that the PostNuke block standards state that blocks
           called in this way have to return output themselves. Especially,
           they need to implement the '{$modname}_{$block}block_display'
           function.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
TODO
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnBlockLoad()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnConfigGetVar">
      <refmeta>
        <refentrytitle>pnConfigGetVar</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnConfigGetVar</refname>
        <refpurpose>get configuration variable</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>mixed <function>pnConfigGetVar</function></funcdef>
            <paramdef>
              string <parameter>name</parameter>
            </paramdef>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>BAD_PARAM</exceptionname>
            <exceptionname>DATABASE_ERROR</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnConfigGetVar()</function> obtains a configuration
          variable from the PostNuke system.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>name</term>
            <listitem>
              <para>

                The name of the configuration variable to obtain

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns the requested variable if the variable exists.
          If the variable does not exist then this function will return
          <parameter>void</parameter>.
          This function also returns <parameter>void</parameter> if
          an exception was raised.

        </para>
      </refsect1>
       <refsect1>
        <title>Exceptions</title>
        <para>

          This function raises BAD_PARAM if you pass an invalid parameter.
          This function raises DATABASE_ERROR if an error occurs while
          querying data.

        </para>
       </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          The configuration variables available with this release of the API
          are as follows:

          <variablelist>
            <varlistentry>
              <term>debug</term>
              <listitem>
                <para>

                  Level of debugging required.  0 is no debugging, 1 is normal
                  debugging.

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Version_Num</term>
              <listitem>
                <para>

                  Version of this PostNuke system

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Version_ID</term>
              <listitem>
                <para>

                  ID of this PostNuke system; currently always 'PostNuke'

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>Version_Sub</term>
              <listitem>
                <para>

                  Sub-ID of this PostNuke system

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>startpage</term>
              <listitem>
                <para>

                  Name of initial module for this PostNuke system to load

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>adminmail</term>
              <listitem>
                <para>

                  Email address of site administrator

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>sitename</term>
              <listitem>
                <para>

                  Name of this PostNuke system

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>slogan</term>
              <listitem>
                <para>

                  Slogan of this PostNuke system

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>timezone_offset</term>
              <listitem>
                <para>

                  Timezone offset of this PostNuke system, in hours from GMT-12

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>seclevel</term>
              <listitem>
                <para>

                  Security level of this site; one of 'high', 'medium', or
                  'low'

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>banners</term>
              <listitem>
                <para>

                  Flag to state whether advertising banners are shown; '0' for
                  no or '1' for yes

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>language</term>
              <listitem>
                <para>

                  Code of default language for this PostNuke system

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>locale</term>
              <listitem>
                <para>

                  Locale for this PostNuke system

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>CensorMode</term>
              <listitem>
                <para>

                  Flag to state whether censoring is active; '0' for no or '1'
                  for yes

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>CensorList</term>
              <listitem>
                <para>

                  Array of words that are censored by this PostNuke system

                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>

          Other variables will be made available in future releases of the API.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting width = "35">
// Get locale for this site
$locale = pnConfigGetVar('locale');
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnConfigSetVar()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnConfigSetVar">
      <refmeta>
        <refentrytitle>pnConfigSetVar</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnConfigSetVar</refname>
        <refpurpose>set configuration variable</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>bool <function>pnConfigSetVar</function></funcdef>
            <paramdef>
              string <parameter>name</parameter>,
              string <parameter>value</parameter>
            </paramdef>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>BAD_PARAM</exceptionname>
            <exceptionname>DATABASE_ERROR</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnConfigSetVar()</function> sets a configuration variable
          on the PostNuke system.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>name</term>
            <listitem>
              <para>

                The name of the configuration variable to set

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>value</term>
            <listitem>
              <para>

                The value to set the configuration variable to

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function currently returns <parameter>false</parameter> due to
          not being implemented.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function raises BAD_PARAM if you pass an invalid parameter.
          This function raises DATABASE_ERROR if an error occurs while
          querying data.

        </para>
       </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          This function is not currently implemented.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Set locale for this site
if (!pnConfigSetVar('locale', 'en_GB')) {
    die('Error setting configuration variable');
}
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnConfigGetVar()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnConfigDelVar">
      <refmeta>
        <refentrytitle>pnConfigDelVar</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnConfigDelVar</refname>
        <refpurpose>delete a configuration variable</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>bool <function>pnConfigDelVar</function></funcdef>
            <paramdef>
              string <parameter>name</parameter>
            </paramdef>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>BAD_PARAM</exceptionname>
            <exceptionname>DATABASE_ERROR</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnConfigDelVar()</function> deletes a configuration
          variable from the PostNuke system.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>name</term>
            <listitem>
              <para>

                The name of the configuration variable to delete

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function currently returns <parameter>false</parameter> due to
          not being implemented.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function raises BAD_PARAM if you pass an invalid parameter.
          This function raises DATABASE_ERROR if an error occurs while
          querying data.

        </para>
       </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          This function is not currently implemented.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Remove locale setting
if (!pnConfigDelVar('locale')) {
  die('Error deleting configuration variable');
}
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnConfigGetVar()</function>,
          <function>pnConfigSetVar()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnDBGetConn">
      <refmeta>
        <refentrytitle>pnDBGetConn</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnDBGetConn</refname>
        <refpurpose>get database connection</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>array <function>pnDBGetConn</function></funcdef>
            <void/>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnDBGetConn()</function> obtains database connection
          handles for direct querying of the PostNuke database.

        </para>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns an array of database connection values.  At
          current the only active value is the first one, which should be used
          for all database interaction.

        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          Future versions of the PostNuke API might supply extra connection
          information through this function, to allow for features such as
          replicated or failover databases.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Get database connection
list($dbconn) = pnDBGetConn();
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnDBGetTables()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnDBGetTables">
      <refmeta>
        <refentrytitle>pnDBGetTables</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnDBGetTables</refname>
        <refpurpose>get database tables</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>array <function>pnDBGetTables</function></funcdef>
            <void/>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnDBGetTables()</function> obtains database table
          information for direct querying of the PostNuke database.

        </para>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns an array of database table information.

        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          At current this information is only sparsely documented; more
          documentation on this array and direct database access for developers
          is expected soon.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Get database tables
$pntable = pnDBGetTables();
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnDBGetConn()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnDBInit">
      <refmeta>
        <refentrytitle>pnDBInit</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnDBInit</refname>
        <refpurpose>initialise PostNuke database connection</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>bool <function>pnDBInit</function></funcdef>
            <void/>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnDBInit()</function> initialises connections to the
          PostNuke database.

        </para>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns <parameter>true</parameter> if the connections
          were successfully made, or <parameter>false</parameter> if the
          connections were not successfully made.

        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          <function>pnDBInit()</function> is normally called from within
          <function>pnInit()</function>, and as such should not be called by
          developers.

        </para>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnInit()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnExceptionFree">
      <refmeta>
        <refentrytitle>pnExceptionFree</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnExceptionFree</refname>
        <refpurpose>reset exception status</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>void <function>pnExceptionFree</function></funcdef>
            <void/>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnExceptionFree()</function> makes a reset of current exception status.

        </para>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function does not return a value.

        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          You must always call <function>pnExceptionFree()</function>
          when you handle a caught exception or equivalently you don't throw the
          exception back to the callers chain.

        </para>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnExceptionId()</function>
          <function>pnExceptionMajor()</function>
          <function>pnExceptionSet()</function>
          <function>pnExceptionValue()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnExceptionId">
      <refmeta>
        <refentrytitle>pnExceptionId</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnExceptionId</refname>
        <refpurpose>return current exception identifier</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>string <function>pnExceptionId</function></funcdef>
            <void/>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnExceptionId()</function> returns the string identifying the exception.
          The character string contains the ID for the exception (its PHP class name).

        </para>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns the current exception identifier.
          If invoked when no exception was raised a <parameter>void</parameter> value is returned.

        </para>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnExceptionFree()</function>
          <function>pnExceptionMajor()</function>
          <function>pnExceptionSet()</function>
          <function>pnExceptionValue()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnExceptionMajor">
      <refmeta>
        <refentrytitle>pnExceptionMajor</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnExceptionMajor</refname>
        <refpurpose>return current exception major number</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>int <function>pnExceptionMajor</function></funcdef>
            <void/>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnExceptionMajor()</function> allows the caller to establish whether an exception was raised,
          and to get the type of raised exception. The major PN_NO_EXCEPTION identifies
          the state in which no exception was raised.

        </para>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns one of these values: PN_NO_EXCEPTION, PN_USER_EXCEPTION or PN_SYSTEM_EXCEPTION.

        </para>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnExceptionFree()</function>
          <function>pnExceptionId()</function>
          <function>pnExceptionSet()</function>
          <function>pnExceptionValue()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnExceptionSet">
      <refmeta>
        <refentrytitle>pnExceptionSet</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnExceptionSet</refname>
        <refpurpose>raise an exception</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>void <function>pnExceptionSet</function></funcdef>
            <void/>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnExceptionSet()</function> allows a function to raise an exception.
          The caller must supply a value for the major parameter.
          The major parameter can have one of the values PN_NO_EXCEPTION, PN_USER_EXCEPTION, or PN_SYSTEM_EXCEPTION.
          The value of the major parameter constrains the other parameters in the call as follows:
        </para>
        <para>
          * If the major parameter has the value PN_NO_EXCEPTION, this is a normal outcome
          to the operation. In this case, both exception_id and param must be NULL.
          Note that it is not necessary to invoke <function>pnExceptionSet()</function> to indicate a normal
          outcome; it is the default behavior if the method simply returns.
        </para>
        <para>
          * For any other value of major it specifies either a user-defined or system
          exception. The exception_id parameter is the identifier representing the exception
          type. If the exception is declared to have members, the param parameter must
          be the exception struct (PHP class) containing the members.
          If the exception has no members, param must be NULL.
        </para>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function does not return a value.

        </para>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnExceptionFree()</function>
          <function>pnExceptionId()</function>
          <function>pnExceptionMajor()</function>
          <function>pnExceptionValue()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnExceptionValue">
      <refmeta>
        <refentrytitle>pnExceptionValue</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnExceptionValue</refname>
        <refpurpose>return current exception value</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>void <function>pnExceptionValue</function></funcdef>
            <void/>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnExceptionValue()</function> returns an object corresponding to this exception.

        </para>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns the object that was passed as parameter to <function>pnExceptionSet()</function>.
          If invoked when no exception or an exception for which there is no associated information
          was raised, a <parameter>void</parameter> value is returned.

        </para>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnExceptionFree()</function>
          <function>pnExceptionId()</function>
          <function>pnExceptionMajor()</function>
          <function>pnExceptionSet()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnGetBaseURI">
      <refmeta>
        <refentrytitle>pnGetBaseURI</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnGetBaseURI</refname>
        <refpurpose>get base URI for PostNuke</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>string <function>pnGetBaseURI</function></funcdef>
            <paramdef>
            </paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnGetBaseURI()</function> returns the base URI
					of PostNuke.

        </para>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns the base URI of PostNuke. 

        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          URI is the path part of an URL, for instance in the URL
					'http://www.postnuke.com/stuff/index.php' the URI would
					be '/stuff/index.php'.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// get base URI
$path = pnGetBaseURI();

        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnGetBaseURL()</function>

        </para>
      </refsect1>
    </refentry>
		
		    <refentry id="pnGetBaseURL">
      <refmeta>
        <refentrytitle>pnGetBaseURL</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnGetBaseURL</refname>
        <refpurpose>obtain base URL for this site</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>string <function>pnGetBaseURL</function></funcdef>
            <void/>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnGetBaseURL()</function> obtains the base URL for the
          site.  The base url is defined as the full URL for the site minus any
          file information <foreignphrase>i.e.</foreignphrase> everything
          before the 'index.php' from your start page.

        </para>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns the base URL of the site.

        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          The last character in the string returned by
          <function>pnGetBaseURL()</function> is always '/'

        </para>
        <para>

          <function>pnGetBaseURL()</function> replaces the old
          <parameter>nukeurl</parameter> global variable.

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnGetStatusMsg">
      <refmeta>
        <refentrytitle>pnGetStatusMsg</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnGetStatusMsg</refname>
        <refpurpose>obtain status message</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>string <function>pnGetStatusMsg</function></funcdef>
            <void/>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnGetStatusMsg()</function> obtains the last status message
          posted for this session.  The status message exists in one of two
          session variables: 'statusmsg' for a status message, or 'errormsg'
          for an error message.  If both a status and an error message exists
          then the error message is returned.

        </para>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns the value of the last status message posted, or
          <parameter>void</parameter> if no status message exists.

        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          <function>pnGetStatusMsg()</function> is a destructive function - it
          deletes the two session variables 'statusmsg' and 'erorrmsg' during
          its operation.

        </para>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnSessionSetVar()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnInit">
      <refmeta>
        <refentrytitle>pnInit</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnInit</refname>
        <refpurpose>initialise PostNuke</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>void <function>pnInit</function></funcdef>
            <void/>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnInit()</function> initialises the PostNuke system.  It
          loads the required includes, sets up sessions and database
          connections, and obtains the system configuration.

        </para>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          <function>pnInit()</function> does not return a value; if the
          function fails somewhere it will exit.

        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          In future <function>pnInit()</function> might give a return value,
          to make it easier to optionally include PostNuke functionality in
          third-party scripts.

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnModAPIFunc">
      <refmeta>
        <refentrytitle>pnModAPIFunc</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnModAPIFunc</refname>
        <refpurpose>execute a module API function</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>mixed <function>pnModFunc</function></funcdef>
            <paramdef>
              string <parameter>modname</parameter>,
              string <parameter>type</parameter>,
              string <parameter>func</parameter>,
              array <parameter>args</parameter>
            </paramdef>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>BAD_PARAM</exceptionname>
            <exceptionname>MODULE_FUNCTION_NOT_EXIST</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnModFunc()</function> calls a specific module API
          function.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>modname</term>
            <listitem>
              <para>

                The well-known name of a module to execute a function from

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>type</term>
            <listitem>
              <para>

                The type of function to execute; currently one of 'user' or
                'admin'

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>func</term>
            <listitem>
              <para>

                The name of the module API function to execute

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>args</term>
            <listitem>
              <para>

                An associative array of arguments to pass to the module API
                function.  The exact number and type of arguments is
                function-dependent.

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns whatever the return value of the resultant
          function is if it succeeds.
          This function returns <parameter>void</parameter> if
          an exception was raised.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function raises BAD_PARAM if you pass an invalid parameter.
          This function raises MODULE_FUNCTION_NOT_EXIST if the module function doesn't exist.
          This function throw back exceptions raised by module function.

        </para>
       </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          Before calling this function you MUST load the module API with
          <function>pnModAPILoad</function>.

        </para>
        <para>

          For more information on well-known names of modules please refer
          to the documentation for <function>pnModGetVar()</function>

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Call News module user function getarticles with argument 'id' set to 3
$articles = pnModAPIFunc('News',
                         'user',
                         'getarticles',
                         array('id' => 3));
if (!isset($articles)) {
  // pnModAPIFunc() failed
} elseif ($articles == false)
  // getarticles failed
} else {
  // getarticles succeeded, data in $articles
}

// Call Permissions admin function list with no arguments
$list = pnModAPIFunc('Permissions',
                     'admin',
                     'list');
if (!isset($list)) {
  // pnModAPIFunc() failed
} elseif ($list == false)
  // list failed
} else {
  // list succeeded, data in $list
}

        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnModGetVar()</function>,
          <function>pnModAPILoad()</function>,
          <function>pnModFunc()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnModAPILoad">
      <refmeta>
        <refentrytitle>pnModAPILoad</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnModAPILoad</refname>
        <refpurpose>load a module API</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>int <function>pnModAPILoad</function></funcdef>
            <paramdef>
              string <parameter>modname</parameter>,
              string <parameter>type</parameter>
            </paramdef>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>BAD_PARAM</exceptionname>
            <exceptionname>DATABASE_ERROR</exceptionname>
            <exceptionname>MODULE_FILE_NOT_EXIST</exceptionname>
            <exceptionname>MODULE_NOT_EXIST</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnModAPILoad()</function> loads extra functions into
          the PostNuke system to extend its abilities.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>modname</term>
            <listitem>
              <para>

                The well-known name of a module to load

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>type</term>
            <listitem>
              <para>

                The type of module functions to load; currently one of 'user'
                or 'admin'.

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns <parameter>true</parameter> if the module
          loaded successfully.
          This function returns <parameter>void</parameter> if
          an exception was raised.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function raises BAD_PARAM if you pass an invalid parameter.
          This function raises DATABASE_ERROR if an error occurs while
          querying data.
          This function raises MODULE_FILE_NOT_EXIST if a module file doesn't exist.
          This function raises MODULE_NOT_EXIST if the module doesn't exist.

        </para>
       </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          The PostNuke API keeps track of what modules have been loaded, so
          multiple calls to <function>pnModAPILoad()</function> with the
          same parameters will return <parameter>true</parameter> each
          time.

        </para>
        <para>

          This function does not load in the relevant display functionality
          for this module automatically, this must be carried out by a
          separate call to <function>pnModLoad()</function>.

        </para>
        <para>

          For more information on well-known names of modules please refer
          to the documentation for <function>pnModGetVar()</function>

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// See if News module is available
if (pnModAvailable('News')) {
  // Load the user API for the News module
  if (!pnModAPILoad('News', 'user')) {
    die('Could not load News module API');
  }
}
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnModLoad()</function>,
          <function>pnModGetVar()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnModAvailable">
      <refmeta>
        <refentrytitle>pnModAvailable</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnModAvailable</refname>
        <refpurpose>check if a module is available</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>bool <function>pnModAvailable</function></funcdef>
            <paramdef>
              string <parameter>modname</parameter>
            </paramdef>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>BAD_PARAM</exceptionname>
            <exceptionname>DATABASE_ERROR</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnModAvailable()</function> confirms whether a module
          is available to be used within the PostNuke system.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>modname</term>
            <listitem>
              <para>

                The well-known name of a module to check

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns <parameter>true</parameter> if the module
          is available for use, <parameter>false</parameter> if the module
          is not available for use.
          This function returns <parameter>void</parameter> if
          an exception was raised.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function raises BAD_PARAM if you pass an invalid parameter.
          This function raises DATABASE_ERROR if an error occurs while
          querying data.

        </para>
       </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          A module that is loaded into the PostNuke system but which is
          inactive or uninitialised is defined as not available for use.

        </para>
        <para>

          For more information on well-known names of modules please refer
          to the documentation for <function>pnModGetVar()</function>

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// See if News module is available
if (pnModAvailable('News')) {
  // Load the News module
  if (!pnModAPILoad('News', 'user')) {
    die('Could not load News module API');
  }
}
        </programlisting>
      </refsect1>
    </refentry>

    <refentry id="pnModCallHooks">
      <refmeta>
        <refentrytitle>pnModCallHooks</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnModCallHooks</refname>
        <refpurpose>carry out hook operations for module</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>bool <function>pnModCallHooks</function></funcdef>
            <paramdef>
              string <parameter>hookobject</parameter>
              string <parameter>hookaction</parameter>
              string <parameter>hookid</parameter>
              string <parameter>extrainfo</parameter>
            </paramdef>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>BAD_PARAM</exceptionname>
            <exceptionname>DATABASE_ERROR</exceptionname>
            <exceptionname>MODULE_FILE_NOT_EXIST</exceptionname>
            <exceptionname>MODULE_FUNCTION_NOT_EXIST</exceptionname>
            <exceptionname>MODULE_NOT_EXIST</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnModCallHooks()</function> carries out hook
          operations for a module
        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>hookobject</term>
            <listitem>
              <para>

              the object the hook is called for - either 'item'
              or 'category'

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>hookaction</term>
            <listitem>
              <para>

              the action the hook is called for - one of
              'create', 'delete', 'transform', or 'display'

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>hookid</term>
            <listitem>
              <para>

              the id of the object the hook is called for
              (module-specific)

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>extrainfo</term>
            <listitem>
              <para>

              extra information for the hook, dependent on
              hookaction

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This returns the hook output as <parameter>string</parameter>.
          This function returns <parameter>void</parameter> if
          an exception was raised.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function raises DATABASE_ERROR if an error occurs while
          querying data.
          This function throw back exceptions raised by other functions.

        </para>
       </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>
          Each hook for the module is called in turn. If the action is
          'display' the result is the concatenation of each hook output
          where the hook area is 'GUI'. Otherwise the result is the
          <parameter>extrainfo</parameter> returned by the last hook
          that is called.
        </para>
        <para>

          The list of hook actions is constantly being refined. Check
          the source code for a current list.
          TODO: Have an official online hook action registry.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
    // Let any hooks know that we are displaying an item.  As this is a display
    // hook we're passing a URL as the extra info, which is the URL that any
    // hooks will show after they have finished their own work.  It is normal
    // for that URL to bring the user back to this function
    $output->SetInputMode(_PNH_VERBATIMINPUT);
    $output->Text(pnModCallHooks('item',
                                 'display',
                                 $tid,
                                 pnModURL('Template',
                                          'user',
                                          'display',
                                          array('tid' => $tid))));
    $output->SetInputMode(_PNH_PARSEINPUT);

        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnModRegisterHook()</function>
          <function>pnModUnregisterHook()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnModDBInfoLoad">
      <refmeta>
        <refentrytitle>pnModDBInfoLoad</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnModDBInfoLoad</refname>
        <refpurpose>load database infor for a module</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>bool <function>pnModDBInfoLoad</function></funcdef>
            <paramdef>
              string <parameter>module</parameter>
              string <parameter>directory</parameter>
            </paramdef>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>BAD_PARAM</exceptionname>
            <exceptionname>DATABASE_ERROR</exceptionname>
            <exceptionname>MODULE_NOT_EXIST</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnModDBInfoLoad()</function> loads the database table
          information for a module.  This information is merged with the

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>module</term>
            <listitem>
              <para>

                The well-known name of a module for which to load the database
                table information

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>directory</term>
            <listitem>
              <para>

                The directory name of the module for which to load the database
                table information, if known

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns <parameter>true</parameter>.
          This function returns <parameter>void</parameter> if
          an exception was raised.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function raises BAD_PARAM if you pass an invalid parameter.
          This function raises DATABASE_ERROR if an error occurs while
          querying data.
          This function raises MODULE_NOT_EXIST if the module doesn't exist.

        </para>
       </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          If there is no database table information present then it is assumed
          that the module uses tables defined elsewhere, or no database tables
          at all, hence the function always returns true.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Load the table information for the News module
pnModDBInfoLoad('News'
// Get the table information, now including the news tables
$pntable = pnDBGetTables();
        </programlisting>
      </refsect1>
    </refentry>

    <refentry id="pnModDelVar">
      <refmeta>
        <refentrytitle>pnModDelVar</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnModDelVar</refname>
        <refpurpose>delete a module variable</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>bool <function>pnModDelVar</function></funcdef>
            <paramdef>
              string <parameter>module</parameter>
              string <parameter>name</parameter>
            </paramdef>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>BAD_PARAM</exceptionname>
            <exceptionname>DATABASE_ERROR</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnModDelVar()</function> deletes a module-specific
          variable from the PostNuke system.
          
        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>module</term>
            <listitem>
              <para>

                The well-known name of a module for which to delete the variable

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>name</term>
            <listitem>
              <para>

                The name of the module variable to delete

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns <parameter>true</parameter> if the deletion
          is successful.
          This function returns <parameter>void</parameter> if
          an exception was raised.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function raises BAD_PARAM if you pass an invalid parameter.
          This function raises DATABASE_ERROR if an error occurs while
          querying data.

        </para>
       </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          For more information on well-known names of modules please refer
          to the documentation for <function>pnModGetVar()</function>

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Delete news numitems variable
if (!pnModDelVar('News', 'numitems')) {
  die('Error deleting News variable numitems');
}
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnModGetVar()</function>,
          <function>pnModSetVar()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnModFunc">
      <refmeta>
        <refentrytitle>pnModFunc</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnModFunc</refname>
        <refpurpose>execute a module function</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>mixed <function>pnModFunc</function></funcdef>
            <paramdef>
              string <parameter>modname</parameter>,
              string <parameter>type</parameter>,
              string <parameter>func</parameter>
            </paramdef>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>BAD_PARAM</exceptionname>
            <exceptionname>MODULE_FUNCTION_NOT_EXIST</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnModFunc()</function> calls a specific module
          function.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>modname</term>
            <listitem>
              <para>

                The well-known name of a module to execute a function from

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>type</term>
            <listitem>
              <para>

                The type of function to execute; currently one of 'user' or
                'admin'

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>func</term>
            <listitem>
              <para>

                The name of the module function to execute

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns whatever the return value of the resultant
          function is if it succeeds.
          This function returns <parameter>void</parameter> if
          an exception was raised.

        </para>
        <para>

           Note that the PostNuke module standards state that module functions
           called in this way have to return specific values themselves.  For
           more details on this, please see the PostNuke Module Development
           Guide.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function raises BAD_PARAM if you pass an invalid parameter.
          This function raises MODULE_FUNCTION_NOT_EXIST if the module function doesn't exist.
          This function throw back exceptions raised by module function.

        </para>
       </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          Before calling this function you MUST load the module with
          <function>pnModLoad</function>.

        </para>
        <para>

          For more information on well-known names of modules please refer
          to the documentation for <function>pnModGetVar()</function>

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Display news
$return = pnModFunc('News', 'user', 'display');
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnModGetVar()</function>,
          <function>pnModLoad()</function>,
          <function>pnModAPIFunc()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnModGetAdminMods">
      <refmeta>
        <refentrytitle>pnModGetAdminMods</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnModGetAdminMods</refname>
        <refpurpose>get list of administration modules</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>array <function>pnModGetAdminMods</function></funcdef>
            <void/>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>DATABASE_ERROR</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnModGetAdminMods()</function> obtains information on
          the modules in this PostNuke system that are active and have an
          administrative component to them.

        </para>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns an array of module information arrays if
          the module is found.
          This function returns <parameter>void</parameter> if
          an exception was raised.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function raises DATABASE_ERROR if an error occurs while
          querying data.

        </para>
       </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          Each module array contains the same set of items as a call to
          <function>pnModGetInfo()</function>

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Get list of available modules with administrative interfaces
$modarray = pnModGetAdminMods();
if (!$modarray) {
  die('Error getting list of administrative modules');
}
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnModGetInfo()</function>,
          <function>pnModGetUserMods()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnModGetIDFromName">
      <refmeta>
        <refentrytitle>pnModGetIDFromName</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnModGetIDFromName</refname>
        <refpurpose>get module id from name</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>int <function>pnModGetIDFromName</function></funcdef>
            <paramdef>
              string <parameter>module</parameter>
            </paramdef>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>BAD_PARAM</exceptionname>
            <exceptionname>DATABASE_ERROR</exceptionname>
            <exceptionname>MODULE_NOT_EXIST</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnModGetIDFromName()</function> obtains a module ID in
          this PostNuke system.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>module</term>
            <listitem>
              <para>

                The well-known name of a module for which to obtain the module ID

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns the module ID for the given module.
          This function returns <parameter>void</parameter> if
          an exception was raised.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function raises BAD_PARAM if you pass an invalid parameter.
          This function raises DATABASE_ERROR if an error occurs while
          querying data.
          This function raises MODULE_NOT_EXIST if the module doesn't exist.

        </para>
       </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          For more information on well-known names of modules please refer
          to the documentation for <function>pnModGetVar()</function>

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Obtain ID for News module
$modid = pnModGetIDFromName('News');
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnModGetInfo()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnModGetInfo">
      <refmeta>
        <refentrytitle>pnModGetInfo</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnModGetInfo</refname>
        <refpurpose>get module info</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>array <function>pnModGetInfo</function></funcdef>
            <paramdef>
              int <parameter>modid</parameter>
            </paramdef>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>BAD_PARAM</exceptionname>
            <exceptionname>DATABASE_ERROR</exceptionname>
            <exceptionname>ID_NOT_EXIST</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnModGetInfo()</function> obtains information on a
          module in this PostNuke system.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>modid</term>
            <listitem>
              <para>

                The id of this module in the PostNuke system.

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns an array of module information if the
          module is found.
          This function returns <parameter>void</parameter> if
          an exception was raised.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function raises BAD_PARAM if you pass an invalid parameter.
          This function raises DATABASE_ERROR if an error occurs while
          querying data.
          This function raises ID_NOT_EXIST if the <parameter>modid</parameter>
          is unknown.

        </para>
       </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          The module array contains the following items:

          <variablelist>
            <varlistentry>
              <term>name</term>
              <listitem>
                <para>

                  The well-known name of the module

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>directory</term>
              <listitem>
                <para>

                  The Filesystem directory in which this modules files exist

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>displayname</term>
              <listitem>
                <para>

                  The display-friendly name for this module

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>description</term>
              <listitem>
                <para>

                  A short description of this module's functionality

                </para>
              </listitem>
            </varlistentry>
          </variablelist>

        </para>
        <para>

          For more information on well-known names of modules please refer
          to the documentation for <function>pnModGetVar()</function>

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Get information on News module
$modid = pnModGetIDFromName('News');
$modinfo = pnModGetInfo($modid);
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnModGetIDFromName()</function>,
          <function>pnModGetUserMods()</function>,
          <function>pnModGetAdminMods()</function>,
          <function>pnModGetVar()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnModGetName">
      <refmeta>
        <refentrytitle>pnModGetName</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnModGetName</refname>
        <refpurpose>get name of current top-level module</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>string <function>pnModGetName</function></funcdef>
            <paramdef>
            </paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnModGetName()</function> returns the name of the
					current top-level module.
					
        </para>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function currently returns the name of the
					current top-level module, <parameter>false</parameter> if not 
					in a module.

        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

 
        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// get module name
$name = pnModGetName();
 
        </programlisting>
      </refsect1>
    </refentry>
		
		    <refentry id="pnModGetUserMods">
      <refmeta>
        <refentrytitle>pnModGetUserMods</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnModGetUserMods</refname>
        <refpurpose>get list of user modules</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>array <function>pnModGetUserMods</function></funcdef>
            <void/>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>DATABASE_ERROR</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnModGetUserMods()</function> obtains information on
          the modules in this PostNuke system that are active and have a
          user component to them.

        </para>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns an array of module information arrays if
          the module is found.
          This function returns <parameter>void</parameter> if
          an exception was raised.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function raises DATABASE_ERROR if an error occurs while
          querying data.

        </para>
       </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          Each module array contains the same set of items as a call to
          <function>pnModGetInfo()</function>
          
        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Get list of available modules with user interfaces
$modarray = pnModGetUserMods();
if (!$modarray) {
  die('Error getting list of user modules');
}
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnModGetInfo()</function>,
          <function>pnModGetAdminMods()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnModGetVar">
      <refmeta>
        <refentrytitle>pnModGetVar</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnModGetVar</refname>
        <refpurpose>get module variable</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>mixed <function>pnModGetVar</function></funcdef>
            <paramdef>
              string <parameter>module</parameter>,
              string <parameter>name</parameter>
            </paramdef>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>BAD_PARAM</exceptionname>
            <exceptionname>DATABASE_ERROR</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnModGetVar()</function> obtains a module-specific
          variable from the PostNuke system.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>module</term>
            <listitem>
              <para>

                The well-known name of a module from which to obtain the variable

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>name</term>
            <listitem>
              <para>

                The name of the module variable to obtain

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns the requested variable if the variable exist.
          If the variable does not exist
          then this function will return <parameter>void</parameter>.
          This function returns <parameter>void</parameter> if
          an exception was raised.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function raises BAD_PARAM if you pass an invalid parameter.
          This function raises DATABASE_ERROR if an error occurs while
          querying data.

        </para>
       </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

           A module's well-known name is the uniquely assigned name by
           which the module is know throughout the PostNuke community.  The
           well-known name normally corresponds to the directory in which
           the module code is placed; module information can be found from
           any PostNuke system by going to the modules administration
           section.  Examples of well-known names are 'News', 'FAQ', and
           'Comments'.

        </para>
        <para>

          This function does <emphasis>not</emphasis> get the configuration
          information of the module itself.  To obtain information such as
          the module ID or its current status you must the other PostNuke
          API calls available.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Get the version information for the 'News' module
$newsmodver = pnModGetVar('News', 'Version');
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnModSetVar()</function>,
          <function>pnModDelVar()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnModLoad">
      <refmeta>
        <refentrytitle>pnModLoad</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnModLoad</refname>
        <refpurpose>load module</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>int <function>pnModLoad</function></funcdef>
            <paramdef>
              string <parameter>modname</parameter>,
              string <parameter>type</parameter>
            </paramdef>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>BAD_PARAM</exceptionname>
            <exceptionname>DATABASE_ERROR</exceptionname>
            <exceptionname>MODULE_FILE_NOT_EXIST</exceptionname>
            <exceptionname>MODULE_NOT_EXIST</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnModLoad()</function> loads extra display functions
          into the PostNuke system to extend its abilities.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>modname</term>
            <listitem>
              <para>

                The well-known name of a module to load

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>type</term>
            <listitem>
              <para>

                The type of module functions to load; currently one of 'user'
                or 'admin'.

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns <parameter>true</parameter> if the module
          loaded successfully.
          This function returns <parameter>void</parameter> if
          an exception was raised.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function raises BAD_PARAM if you pass an invalid parameter.
          This function raises DATABASE_ERROR if an error occurs while
          querying data.
          This function raises MODULE_FILE_NOT_EXIST if a module file doesn't exist.
          This function raises MODULE_NOT_EXIST if the module doesn't exist.

        </para>
       </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          The PostNuke API keeps track of what modules have been loaded, so
          multiple calls to <function>pnModLoad()</function> with the
          same parameters will return <parameter>true</parameter> each
          time.

        </para>
        <para>

          For more information on well-known names of modules please refer
          to the documentation for <function>pnModGetVar()</function>

        </para>
        <para>

          This function does not load in the relevant API functionality for
          this module automatically, this must be carried out by a separate
          call to <function>pnModAPILoad()</function>.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// See if News module is available
if (pnModAvailable('News')) {
  // Load the News module
  if (!pnModLoad('News', 'user')) {
    die('Could not load News module');
  }
}
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnModAPILoad()</function>,
          <function>pnModGetVar()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnModRegisterHook">
      <refmeta>
        <refentrytitle>pnModRegisterHook</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnModRegisterHook</refname>
        <refpurpose>register a hook function</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>bool <function>pnModRegisterHook</function></funcdef>
            <paramdef>
              string <parameter>hookobject</parameter>
              string <parameter>hookaction</parameter>
              string <parameter>hookarea</parameter>
              string <parameter>hookmodule</parameter>
              string <parameter>hooktype</parameter>
              string <parameter>hookfunc</parameter>
            </paramdef>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>DATABASE_ERROR</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnModRegisterHook()</function> registers a hook function.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>hookobject</term>
            <listitem>
              <para>

                The hook object - either 'item' or 'category'

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>hookaction</term>
            <listitem>
              <para>

                The action the hook is called for - one of
		'create', 'delete', 'transform', or 'display'
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>hookarea</term>
            <listitem>
              <para>

                The area of the hook (either 'GUI' or 'API')

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>hookmodule</term>
            <listitem>
              <para>

                The name of the hook module

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>hooktype</term>
            <listitem>
              <para>

                The name of the hook type ('user' or 'admin')

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>hookfunc</term>
            <listitem>
              <para>

                The name of the hook function

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns <parameter>true</parameter> on success.
          This function returns <parameter>void</parameter> if
          an exception was raised.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function raises DATABASE_ERROR if an error occurs while
          querying data.

        </para>
       </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          The list of hook actions is constantly being refined. Check
          the source code for a current list.
          TODO: Have an official online hook action registry.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
    // Set up module hooks
    if (!pnModRegisterHook('item',
                           'display',
                           'GUI',
                           'Ratings',
                           'user',
                           'display')) {
        return false;
    }
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnModUnregisterHook()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnModSetVar">
      <refmeta>
        <refentrytitle>pnModSetVar</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnModSetVar</refname>
        <refpurpose>set module variable</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>bool <function>pnModSetVar</function></funcdef>
            <paramdef>
              string <parameter>module</parameter>,
              string <parameter>name</parameter>,
              string <parameter>value</parameter>
            </paramdef>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>BAD_PARAM</exceptionname>
            <exceptionname>DATABASE_ERROR</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnModSetVar()</function> sets a module-specific variable
          on the PostNuke system.  If the variable does not exist then it
          is created.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>module</term>
            <listitem>
              <para>

                The well-known name of a module for which to set the variable

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>name</term>
            <listitem>
              <para>

                The name of the module variable to set

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>value</term>
            <listitem>
              <para>

                The value to set the module variable with

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns <parameter>true</parameter> if the update
          is successful.
          This function returns <parameter>void</parameter> if
          an exception was raised.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function raises BAD_PARAM if you pass an invalid parameter.
          This function raises DATABASE_ERROR if an error occurs while
          querying data.

        </para>
       </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          For more information on well-known names of modules please refer
          to the documentation for <function>pnModGetVar()</function>

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Set the version information for the 'News' module
pnModSetVar('News', 'Version', 2);
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnModGetVar()</function>,
          <function>pnModDelVar()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnModUnregisterHook">
      <refmeta>
        <refentrytitle>pnModUnregisterHook</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnModUnregisterHook</refname>
        <refpurpose>unregister a hook function</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>bool <function>pnModUnregisterHook</function></funcdef>
            <paramdef>
              string <parameter>hookobject</parameter>
              string <parameter>hookaction</parameter>
              string <parameter>hookarea</parameter>
              string <parameter>hookmodule</parameter>
              string <parameter>hooktype</parameter>
              string <parameter>hookfunc</parameter>
            </paramdef>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>DATABASE_ERROR</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnModUnregisterHook()</function> unregisters a hook function.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>hookobject</term>
            <listitem>
              <para>

                The hook object - either 'item' or 'category'

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>hookaction</term>
            <listitem>
              <para>

                The action the hook is called for - one of
                'create', 'delete', 'transform', or 'display'
              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>hookarea</term>
            <listitem>
              <para>

                The area of the hook (either 'GUI' or 'API')

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>hookmodule</term>
            <listitem>
              <para>

                The name of the hook module

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>hooktype</term>
            <listitem>
              <para>

                The name of the hook type ('user' or 'admin')

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>hookfunc</term>
            <listitem>
              <para>

                The name of the hook function

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns <parameter>true</parameter> on success.
          This function returns <parameter>void</parameter> if
          an exception was raised.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function raises DATABASE_ERROR if an error occurs while
          querying data.

        </para>
       </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          The list of hook actions is constantly being refined. Check
          the source code for a current list.
          TODO: Have an official online hook action registry.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
    // Remove module hooks
    if (!pnModUnregisterHook('item',
                             'display',
                             'GUI',
                             'Ratings',
                             'user',
                             'display')) {
        pnSessionSetVar('errormsg', _RATINGSCOULDNOTUNREGISTER);
    }
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnModRegisterHook()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnModURL">
      <refmeta>
        <refentrytitle>pnModURL</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnModURL</refname>
        <refpurpose>create module URL</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>string <function>pnModURL</function></funcdef>
            <paramdef>
              string <parameter>modname</parameter>,
              string <parameter>type</parameter>,
              string <parameter>func</parameter>,
              array <parameter>args</parameter>
            </paramdef>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>BAD_PARAM</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnModURL()</function> creates a PostNuke-compatible URL
          for a specific module function.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>modname</term>
            <listitem>
              <para>

                The well-known name of a module for which to create the URL

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>type</term>
            <listitem>
              <para>

                The type of function for which to create the URL; currently
                one of 'user' or 'admin'

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>func</term>
            <listitem>
              <para>

                The actual module function for which to create the URL

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>args</term>
            <listitem>
              <para>

                An associative array of arguments.  The exact number and
                type of arguments is function-dependent

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns a module URL string if successful.
          This function returns <parameter>void</parameter> if
          an exception was raised.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function raises BAD_PARAM if you pass an invalid parameter.

        </para>
       </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          For more information on well-known names of modules please refer
          to the documentation for <function>pnModGetVar()</function>

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Create a URL to the News 'view' function with parameters 'sid' set to 3
// and 'index' set to '0'
$url = pnModURL('News', 'user', 'view', array('sid' => 3, 'index' => 0));
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnModGetVar()</function>,
          <function>pnModFunc()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnRedirect">
      <refmeta>
        <refentrytitle>pnRedirect</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnRedirect</refname>
        <refpurpose>redirect to another page</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>void <function>pnRedirect</function></funcdef>
            <paramdef>
              string <parameter>url</parameter>,
            </paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnRedirect()</function> creates an absolute URL to a
          PostNuke webpage and sets the relevant HTTP header accordingly.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>url</term>
            <listitem>
              <para>

                A url to redirect to.  The URL can have GET parameters appended
                to it in the normal fashion.

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          <function>pnRedirect()</function> can handle absolute as well as
          relative URLs if required.  This is most often used in conjunction
          with other URL-generating functions such as
          <function>pnModURL</function>.

        </para>
        <para>

          <function>pnRedirect()</function> carries out a HTTP1.1-compliant
          redirection.  This function should not be used when output is also
          required, as the output will not be displayed.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Redirect back to the homepage
pnRedirect('index.php');

// Redirect to a news page
pnRedirect(pnModURL('News',
                    'user',
                    'view',
                    array('sid' => 3, 'index' => 0)));

// Redirect off-site
pnRedirect('http://www.remotesite.com');
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnModURL()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnSecAddSchema">
      <refmeta>
        <refentrytitle>pnSecAddSchema</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnSecAddSchema</refname>
        <refpurpose>add security schema</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>void <function>pnSecAddSchema</function></funcdef>
            <paramdef>
              string <parameter>component</parameter>,
              string <parameter>schema</parameter>
            </paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnSecAddSchema()</function> adds a component schema
          into the PostNuke system.  The component schema list is not used
          anywhere inside PostNuke itself, but can be displayed as part of
          a GUI function to aid in configuration of the PostNuke
          permissions system.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>component</term>
            <listitem>
              <para>

                The component to which this authorisation schema applies

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>schema</term>
            <listitem>
              <para>

                The authorisation schema

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns <parameter>true</parameter> if the
          authorisation schema is added successfully,
          <parameter>false</parameter> if the schema is not added
          successfully (normally due to a duplicate component name), and
          <parameter>void</parameter> if there was an internal API error
          whilst attempting to add the schema.

        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          A full description of the PostNuke authorisation system is beyond
          the scope of this document.  For more in formation on the
          authorisation system and its use of realms, components, and
          instances, please refer to the PostNuke Authorisation System
          documentation.

        </para>
        <para>

          Note that this function was previously known as
          <function>addinstanceschemainfo()</function>.  That name is
          deprecated but still functional in this version of the PostNuke
          API; it is recommended that any calls that are currently made to
          <function>addinstanceschemainfo()</function> are changed to
          <function>pnSecAddSchema()</function>.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Add security schema for foo module
pnSecAddSchema('Foo::', 'Name of foo:Type of foo:foo ID');
        </programlisting>
      </refsect1>
    </refentry>

    <refentry id="pnSecAuthAction">
      <refmeta>
        <refentrytitle>pnSecAuthAction</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnSecAuthAction</refname>
        <refpurpose>authorise attempted action</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>bool <function>pnSecAuthAction</function></funcdef>
            <paramdef>
              int <parameter>realm</parameter>,
              string <parameter>component</parameter>,
              string <parameter>instance</parameter>,
              int <parameter>level</parameter>
              int <parameter>uid(opt)</parameter>
            </paramdef>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>DATABASE_ERROR</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnSecAuthAction()</function> checks against the
          authorisation information held within the PostNuke system to
          decide if a particular level of authorisation can be allowed.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>realm</term>
            <listitem>
              <para>

                The realm that this authorisation is taking place in;
                currently always 0

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>component</term>
            <listitem>
              <para>

                The component for which this authorisation is taking place

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>instance</term>
            <listitem>
              <para>

                The instance for which this authorisation is taking place

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>level</term>
            <listitem>
              <para>

                The level of access which this authorisation requires to be
                allowed

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>uid</term>
            <listitem>
              <para>

                The uid of the user to check for authorisation

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns <parameter>true</parameter> if the level of
          authorisation granted to the user for the given arguments is
          greater than or equal to the required level,
          <parameter>false</parameter> if the level of authorisation
          granted to the user for the given arguments is less than the
          required level.
          This function returns <parameter>void</parameter> if
          an exception was raised.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function raises DATABASE_ERROR if an error occurs while
          querying data.

        </para>
       </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          A full description of the PostNuke authorisation system is beyond
          the scope of this document.  For more in formation on the
          authorisation system and its use of realms, components, and
          instances, please refer to the PostNuke Authorisation System
          documentation.

        </para>
        <para>

          This function was previously known as
          <function>authorised()</function>.  That name is deprecated but
          still functional in this version of the PostNuke API; it is
          recommended that any calls that are currently made to
          <function>authorised()</function> are changed to
          <function>pnSecAuthAction()</function>.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// See if use is authorised to access 'foo' module admin functions
if (pnSecAuthAction(0,
                    'Foo::',
                    'My Foo:Foos of the world:4',
                    ACCESS_ADMIN)) {
  // Yes
} else {
  // No
}
        </programlisting>
      </refsect1>
    </refentry>

    <refentry id="pnServerGetVar">
      <refmeta>
        <refentrytitle>pnServerGetVar</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnServerGetVar</refname>
        <refpurpose>get server or environment variable</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>mixed <function>pnServerGetVar</function></funcdef>
            <paramdef>
              string <parameter>name</parameter>
            </paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnServerGetVar()</function> obtains a server or
          environment variable from the PostNuke system, taking into
          account the different ways this could be done depending on the
          PHP version or configuration (e.g. register_globals Off).
          Typical examples include the HTTP_*, REQUEST_*, REMOTE_*, SERVER_*
          and SCRIPT_* variables set by the webserver for each page request.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>name</term>
            <listitem>
              <para>

                The name of the server or environment variable to obtain

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns the requested variable if it exists, or
          <parameter>void</parameter> if the variable doesn't exist.

        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

           All server and environment variables are not guaranteed to be
           made available by all webservers.

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnSessionDelVar">
      <refmeta>
        <refentrytitle>pnSessionDelVar</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnSessionDelVar</refname>
        <refpurpose>delete session variable</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>bool <function>pnSessionDelVar</function></funcdef>
            <paramdef>
              string <parameter>name</parameter>
            </paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnSessionDelVar()</function> deletes a session-specific
          variable from the PostNuke system.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>name</term>
            <listitem>
              <para>

                The name of the session variable to delete

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns <parameter>true</parameter> if the variable
          was deleted successfully, and <parameter>void</parameter> if
          there was an internal API error whilst attempting to delete the
          variable.

        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

        </para>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnSessionGetVar()</function>,
          <function>pnSessionSetVar()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnSessionGetVar">
      <refmeta>
        <refentrytitle>pnSessionGetVar</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnSessionGetVar</refname>
        <refpurpose>get session variable</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>mixed <function>pnSessionGetVar</function></funcdef>
            <paramdef>
              string <parameter>name</parameter>
            </paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnSessionGetVar()</function> obtains a session-specific
          variable from the PostNuke system.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>name</term>
            <listitem>
              <para>

                The name of the session variable to obtain

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns the requested variable if it exists,
          <parameter>false</parameter> if the variable does not exist, and
          <parameter>void</parameter> if there was an internal API error
          whilst attempting to obtain the variable.

        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

           Session variables are not guaranteed to exist from one process
           run to the next.  Internal housekeeping might remove sessions
           that have been inactive for long periods of time, so do not use
           session variables to store long-term information.

        </para>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnSessionSetVar()</function>,
          <function>pnSessionDelVar()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnSessionInit">
      <refmeta>
        <refentrytitle>pnSessionInit</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnSessionInit</refname>
        <refpurpose>initialse session</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>bool <function>pnSessionInit</function></funcdef>
            <void/>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnSessionInit()</function> initialises a new or current
          session, setting user cookies as needed and obtaining current
          session variables.

        </para>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns <parameter>true</parameter> if the session
          initialisation finished successfully,
          <parameter>false</parameter> if the session initialisation did
          not finish successfully, and <parameter>void</parameter> if there
          was an internal API error whilst attempting to initialise the
          session.

        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          This function is normally called from
          <function>pnInit()</function>, and should not be called by
          modules or any other developer processes.

        </para>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnInit()</function>,
          <function>pnSessionSetup()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnSessionSetup">
      <refmeta>
        <refentrytitle>pnSessionSetup</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnSessionSetup</refname>
        <refpurpose>setup session</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>bool <function>pnSessionSetup</function></funcdef>
            <void/>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnSessionSetup()</function> sets a number of PHP
          configuration variables to allow the PostNuke system to handle
          persistent user sessions across multiple HTTP connections.

        </para>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns <parameter>true</parameter> if the session
          setup finished successfully, <parameter>false</parameter> if the
          session setup did not finish successfully, and
          <parameter>void</parameter> if there was an internal API error
          whilst attempting to set up the session.

        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          This function is normally called from
          <function>pnInit()</function>, and should not be called by
          modules or any other developer processes.

        </para>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnInit()</function>,
          <function>pnSessionInit()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnSessionSetVar">
      <refmeta>
        <refentrytitle>pnSessionSetVar</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnSessionSetVar</refname>
        <refpurpose>set session variable</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>bool <function>pnSessionSetVar</function></funcdef>
            <paramdef>
              string <parameter>name</parameter>
              string <parameter>value</parameter>
            </paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnSessionSetVar()</function> sets a session-specific variable
          on the PostNuke system.  If the variable does not exist then it
          is created.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>name</term>
            <listitem>
              <para>

                The name of the session variable to set

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>value</term>
            <listitem>
              <para>

                The value to set the session variable with

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns <parameter>true</parameter> if the variable
          was set, and <parameter>void</parameter> if there was an internal
          API error whilst attempting to set the variable.

        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

           Session variables are not guaranteed to exist from one process
           run to the next.  Internal housekeeping might remove sessions
           that have been inactive for long periods of time, so do not use
           session variables to store long-term information.

        </para>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnSessionGetVar()</function>,
          <function>pnSessionDelVar()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnThemeLoad">
      <refmeta>
        <refentrytitle>pnThemeLoad</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnThemeLoad</refname>
        <refpurpose>load display theme</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>bool <function>pnThemeLoad</function></funcdef>
            <void/>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnThemeLoad()</function> loads the display theme as
          specified by the user, and sets a number of global variables for
          backwards-compatibility with older display themes.

        </para>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function loads <parameter>true</parameter> if the theme was
          loaded successfully, and <parameter>false</parameter> if the theme
          was not loaded successfully.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Load in user theme
if (!pnThemeLoad()) {
  die('Problem loading theme');
}
        </programlisting>
      </refsect1>
    </refentry>

    <refentry id="pnUserGetAll">
      <refmeta>
        <refentrytitle>pnUserGetAll</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnUserGetAll</refname>
        <refpurpose>get basic information on all users</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>array <function>pnUserGetAll</function></funcdef>
            <void/>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnUserGetAll()</function> obtains a set of basic
          information on all active users in the PostNuke system.
	  <warning>
	  <para>
          <function>pnUserGetAll()</function> is deprecated but still
	  functional in this version of the PostNuke API.
	  You shouldn't use it, since it'll be removed when PostNuke
	  will reach the 1.0 version.
	  Instead you are strongly encouraged to use the users module
	  API <function>getall</function> function:
	  $users = pnModAPIFunc('users', 'user', 'getall');
	  </para>
	  </warning>

        </para>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns an array of associative arrays.  The array
          elements are referenced by UID for quick access to information on a
          specific user.  Each array corresponds to a particular user, and has
          the following array members:

          <variablelist>
            <varlistentry>
              <term>uname</term>
              <listitem>
                <para>

                  The user name of the user

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>uid</term>
              <listitem>
                <para>

                  The user ID of the user


                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>name</term>
              <listitem>
                <para>

                  The full name of this user

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>email</term>
              <listitem>
                <para>

                  The email address of this user

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>url</term>
              <listitem>
                <para>

                  The URL of this user

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>avatar</term>
              <listitem>
                <para>

                  The avatar of this user

                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          Only the <parameter>uname</parameter> and <parameter>uid</parameter>
          fields of each array are guaranteed to be populated; the other items
          may be empty.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Get all users
$allusers = pnUserGetAll();

// Display username and uid for each user
foreach ($allusers as $user) {
        echo "User ID $user[uid] has user name $user[uname]\n";
}

// Display name for uid 5
echo "User ID 5 is called {$allusers[5]['name']}\n";
        </programlisting>
      </refsect1>
    </refentry>



    <refentry id="pnUserGetLang">
      <refmeta>
        <refentrytitle>pnUserGetLang</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnUserGetLang</refname>
        <refpurpose>get current language</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>string <function>pnUserGetLang()</function></funcdef>
            <void/>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>DATABASE_ERROR</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnUserGetLang()</function> obtains the name of the
          current language that this session is using for output display.

        </para>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns the name of the language being used.
          This function returns <parameter>void</parameter> if
          an exception was raised.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function doesn't raise exceptions but throws back exceptions
          raised from other functions.

        </para>
       </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

           The user does not actually have to be logged in for this
           function to operate correctly.  If the user is not logged in
           then this function will return the system's default language
           instead.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Get the user's current language
$lang = pnUserGetLang();
        </programlisting>
      </refsect1>
    </refentry>

    <refentry id="pnUserGetTheme">
      <refmeta>
        <refentrytitle>pnUserGetTheme</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnUserGetTheme</refname>
        <refpurpose>get current theme</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>string <function>pnUserGetTheme</function></funcdef>
            <void/>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>DATABASE_ERROR</exceptionname>
            <exceptionname>UNKNOWN</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>

      <refsect1>
        <title>Description</title>
        <para>

          <function>pnUserGetTheme()</function> obtains the name of the
          current theme that this session is using for output display.

        </para>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns the name of the theme that is being used.
          This function returns <parameter>void</parameter> if
          an exception was raised.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

            This function raises UNKNOWN if it can't find the theme.
            This function throw back exceptions raised by other functions.

        </para>
       </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          This function takes into account per-category and
          per-story theme overrides.

        </para>
        <para>

           The user does not actually have to be logged in for this
           function to operate correctly.  If the user is not logged in
           then this function will return the system's default theme
           instead.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Get the user's current theme
$theme = pnUserGetTheme();
        </programlisting>
      </refsect1>
    </refentry>

    <refentry id="pnUserGetVar">
      <refmeta>
        <refentrytitle>pnUserGetVar</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnUserGetVar</refname>
        <refpurpose>get user variable</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>mixed <function>pnUserGetVar</function></funcdef>
            <paramdef>
              string <parameter>name</parameter>
              string <parameter>uid(opt)</parameter>
            </paramdef>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>BAD_PARAM</exceptionname>
            <exceptionname>DATABASE_ERROR</exceptionname>
            <exceptionname>ID_NOT_EXIST</exceptionname>
            <exceptionname>MODULE_FILE_NOT_EXIST</exceptionname>
            <exceptionname>MODULE_FUNCTION_NOT_EXIST</exceptionname>
            <exceptionname>MODULE_NOT_EXIST</exceptionname>
            <exceptionname>NO_PERMISSION</exceptionname>
            <exceptionname>NOT_LOGGED_IN</exceptionname>
            <exceptionname>UNKNOWN</exceptionname>
            <exceptionname>VARIABLE_NOT_REGISTERED</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnUserGetVar()</function> obtains a user-specific variable
          from the PostNuke system.  By default it will obtain a variable for
          the current user; if the optional <parameter>uid</parameter> variable
          is supplied it will obtain the variable for that user instead.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>name</term>
            <listitem>
              <para>

                The name of the user variable to obtain

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>uid</term>
            <listitem>
              <para>

                The uid of the user to obtain this variable for

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns the requested variable if either the user is
          logged in to the system or an existing user's ID is passed in to the
          function, and the variable exists.  If the variable does not exist this
          function will return <parameter>void</parameter>.
          This function returns <parameter>void</parameter> if
          an exception was raised.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function raises BAD_PARAM if you pass an invalid parameter.
          This function raises DATABASE_ERROR if an error occurs while
          querying data.
          This function raises ID_NOT_EXIST if the user id is unknown.
          This function raises MODULE_FILE_NOT_EXIST if a authentication module file doesn't exist.
          This function raises MODULE_FUNCTION_NOT_EXIST if a authentication module function doesn't exist.
          This function raises MODULE_NOT_EXIST if the authentication module doesn't exist.
          This function raises NOT_LOGGED_IN if the user is not logged in.
          This function raises NO_PERMISSION if you don't have right permission to get variable value.
          This function raises UNKNOWN for internal problems.
          This function raises VARIABLE_NOT_REGISTERED if the metadata of variable you are asking for is not registered.

        </para>
       </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          The user-specific variables available with this release of the
          API are as follows:

          <variablelist>
            <varlistentry>
              <term>email</term>
              <listitem>
                <para>

                  The user's email address

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>name</term>
              <listitem>
                <para>

                  The user's real name

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>theme</term>
              <listitem>
                <para>

                  The name of the user's theme

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>timezone_offset</term>
              <listitem>
                <para>

                  The user's timezone offset, in hours from GMT-12

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>uid</term>
              <listitem>
                <para>

                  The user's identification number, normally only used for
                  internal purposes

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>uname</term>
              <listitem>
                <para>

                  The user's login name

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>url</term>
              <listitem>
                <para>

                  The user's URL

                </para>
              </listitem>
            </varlistentry>
            <varlistentry>
              <term>user_avatar</term>
              <listitem>
                <para>

                  The filename of the user's avatar

                </para>
              </listitem>
            </varlistentry>
          </variablelist>
        </para>
        <para>

          Other variables will be made available in future releases of the
          API.

          You can register new user variables with the register_user_var module API function
          included in Modules module.

          See the User Variable section in the PostNuke Module Development Guide for getting
          an explanation on user variables.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Show information for logged in user
if (pnUserLoggedIn()) {
  $name = pnUserGetVar('name');
  if (isset($name)) {
    echo "Welcome to the site, $name";
  }
}

// Show information for specific user
$useremail = pnUserGetVar('email', 5);
$username = pnUserGetVar('name', 5);
if (!empty($useremail) &amp;&amp; !empty($username)) {
    echo "$username has email address $useremail";
}
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnUserSetVar()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnUserGetVars">
      <refmeta>
        <refentrytitle>pnUserGetVars</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnUserGetVars</refname>
        <refpurpose>get all user variables</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>array <function>pnUserGetVars</function></funcdef>
            <paramdef>
              string <parameter>uid</parameter>
            </paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnUserGetVars()</function> gets all user variables for a
          specified user identified by <parameter>uid</parameter>.
          <function>pnUserGetVars()</function> is deprecated because it can't be integrated
          with the new Dynamic User Data architecture.
          See the User Variable section in the PostNuke Module Development Guide for getting
          an overview of the new architecture.
        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>uid</term>
            <listitem>
              <para>

                The user identifier

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns an associative array of user variables
	  where keys represent variable names and values variable values.

        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>
        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Get user id
$uid = pnSessionGetVar('uid');

// Get user variables
$vars = pnUserGetVars($uid);

$user_description = $vars['name'] . ', ' . $vars['email'];

        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnUserGetVar()</function>
         <function>pnUserSetVar()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnUserLoggedIn">
      <refmeta>
        <refentrytitle>pnUserLoggedIn</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnUserLoggedIn</refname>
        <refpurpose>check if user is logged in</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>bool <function>pnUserLoggedIn</function></funcdef>
            <void/>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnUserLoggedIn()</function> ascertains whether or not the
          current user is logged in to the PostNuke system.

        </para>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns <parameter>true</parameter> if the user is
          logged in to the PostNuke system, and <parameter>false</parameter> if
          the user is not logged in.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <para>

          See example for <function>pnUserGetVar()</function> for example of use.

        </para>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnUserLogIn()</function>,
          <function>pnUserLogOut()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnUserLogIn">
      <refmeta>
        <refentrytitle>pnUserLogIn</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnUserLogIn</refname>
        <refpurpose>log user in</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>bool <function>pnUserLogIn</function></funcdef>
            <paramdef>
              string <parameter>uname</parameter>,
              string <parameter>pass</parameter>,
              string <parameter>rememberme</parameter>
            </paramdef>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>BAD_PARAM</exceptionname>
            <exceptionname>DATABASE_ERROR</exceptionname>
            <exceptionname>MODULE_FILE_NOT_EXIST</exceptionname>
            <exceptionname>MODULE_FUNCTION_NOT_EXIST</exceptionname>
            <exceptionname>MODULE_NOT_EXIST</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnUserLogIn()</function> attempts to log the user in to
          the PostNuke system with the supplied parameters.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>uname</term>
            <listitem>
              <para>

                The username of the user attempting to log in

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>pass</term>
            <listitem>
              <para>

                The password of the user attempting to log in

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>rememberme</term>
            <listitem>
              <para>

                If <parameter>true</parameter>, PostNuke will attempt to
                remember this user's credentials as long as possible
                within the bounds of the security policy that has been
                laid down by the site administrator.

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns <parameter>true</parameter> if the user is
          successfully logged in, otherwise it returns
          <parameter>false</parameter>.
          This function returns <parameter>void</parameter> if
          an exception was raised.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function raises BAD_PARAM if you pass an invalid parameter.
          This function raises DATABASE_ERROR if an error occurs while
          querying data.
          This function throw back exceptions raised by other functions.

        </para>
       </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Attempt to log user in
if (!pnUserLogIn(pnVarCleanFromInput('username'),
                 pnVarCleanFromInput('password'),
                 pnVarCleanFromInput('rememberme')) {
  die('Bad username/password');
} else {
  // User logged on successfully
}
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnUserLoggedIn()</function>,
          <function>pnUserLogOut()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnUserLogOut">
      <refmeta>
        <refentrytitle>pnUserLogOut</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnUserLogOut</refname>
        <refpurpose>log user out</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>bool <function>pnUserLogOut</function></funcdef>
            <void/>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>DATABASE_ERROR</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnUserLogOut()</function> attempts to log the user out of
          the PostNuke system.

        </para>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns <parameter>true</parameter> if the logout
          attempt was successful or the user is already logged out.
          This function returns <parameter>void</parameter> if
          an exception was raised.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function raises DATABASE_ERROR if an error occurs while
          querying data.

        </para>
       </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Log the user out
pnUserLogOut();
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnUserLoggedIn()</function>,
          <function>pnUserLogIn()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnUserSetVar">
      <refmeta>
        <refentrytitle>pnUserSetVar</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnUserSetVar</refname>
        <refpurpose>set user variable</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>bool <function>pnUserSetVar()</function></funcdef>
            <paramdef>
              string <parameter>name</parameter>,
              string <parameter>value</parameter>
            </paramdef>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>BAD_PARAM</exceptionname>
            <exceptionname>DATABASE_ERROR</exceptionname>
            <exceptionname>ID_NOT_EXIST</exceptionname>
            <exceptionname>MODULE_FILE_NOT_EXIST</exceptionname>
            <exceptionname>MODULE_FUNCTION_NOT_EXIST</exceptionname>
            <exceptionname>MODULE_NOT_EXIST</exceptionname>
            <exceptionname>NOT_LOGGED_IN</exceptionname>
            <exceptionname>NO_PERMISSION</exceptionname>
            <exceptionname>UNKNOWN</exceptionname>
            <exceptionname>VARIABLE_NOT_REGISTERED</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnUserSetVar()</function> sets a user-specific variable
          on the PostNuke system.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>name</term>
            <listitem>
              <para>

                The name of a user variable to set

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>value</term>
            <listitem>
              <para>

                The value to set the named user variable to

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns <parameter>true</parameter> if the update
          is successful, <parameter>false</parameter> if the variable validation fails.
          This function returns <parameter>void</parameter> if
          an exception was raised.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function raises BAD_PARAM if you pass an invalid parameter.
          This function raises DATABASE_ERROR if an error occurs while
          querying data.
          This function raises ID_NOT_EXIST if the user id is unknown.
          This function raises MODULE_FILE_NOT_EXIST if a authentication module file doesn't exist.
          This function raises MODULE_FUNCTION_NOT_EXIST if a authentication module function doesn't exist.
          This function raises MODULE_NOT_EXIST if the authentication module doesn't exist.
          This function raises NOT_LOGGED_IN if the user is not logged in.
          This function raises NO_PERMISSION if you don't have right permission to set variable value.
          This function raises UNKNOWN for internal problems.
          This function raises VARIABLE_NOT_REGISTERED if the metadata of variable you are trying to update is not registered.

        </para>
       </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          The user-specific variables available with this release of the
          API listed in the documentation for
          <function>pnUserGetVar()</function>
          See the User Variable section in the PostNuke Module Development Guide for getting
          an explanation on user variables.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Update the user's email address
if (!pnUserSetVar('email', 'foo@bar.net')) {
  die('Problem setting user variable');
}
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnUserGetVar()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnUserValidateVar">
      <refmeta>
        <refentrytitle>pnUserValidateVar</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnUserValidateVar</refname>
        <refpurpose>validate user variable</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>bool <function>pnUserValidateVar()</function></funcdef>
            <paramdef>
              string <parameter>name</parameter>,
              string <parameter>value</parameter>
            </paramdef>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>BAD_PARAM</exceptionname>
            <exceptionname>DATABASE_ERROR</exceptionname>
            <exceptionname>UNKNOWN</exceptionname>
            <exceptionname>VARIABLE_NOT_REGISTERED</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnUserValidateVar()</function> validates a user-specific variable
          on the PostNuke system.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>name</term>
            <listitem>
              <para>

                The name of a user variable to validate

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>value</term>
            <listitem>
              <para>

                The value to be validate against the named user variable

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns <parameter>true</parameter> if the validation
          is successful, <parameter>false</parameter> if the validation fails.
          This function returns <parameter>void</parameter> if
          an exception was raised.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function raises BAD_PARAM if you pass an invalid parameter.
          This function raises DATABASE_ERROR if an error occurs while
          querying data.
          This function raises UNKNOWN for internal problems.
          This function raises VARIABLE_NOT_REGISTERED if the metadata of variable you are asking for is not registered.

        </para>
       </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          See the User Variable section in the PostNuke Module Development Guide for getting
          an explanation on user variables.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>

// Validate the user's email address
if (!pnUserValidateVar('email', $email)) {
  module_user_askdata(array('errmsg' => 'Invalid email'));
}
// Validate the user's timezone_offset address
if (!pnUserValidateVar('timezone_offset', $timezone_offset)) {
  module_user_askdata(array('errmsg' => 'Invalid timezone offset'));
}

pnUserSetVar('email', $email);
pnUserSetVar('timezone_offset', $timezone_offset);
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnUserGetVar()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnVarCensor">
      <refmeta>
        <refentrytitle>pnVarCensor</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnVarCensor</refname>
        <refpurpose>remove censored words from variable</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>mixed <function>pnVarCensor</function></funcdef>
            <paramdef>
              string <parameter>var</parameter>,
              string <parameter>...</parameter>
            </paramdef>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>BAD_PARAM</exceptionname>
            <exceptionname>DATABASE_ERROR</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnVarCensor()</function> takes a variable number of
          <parameter>var</parameter> arguments and for each one examines it for
          words which are deemed offensive or otherwise not allowed to be
          displayed.  These words are replaced with asterix marks to show that
          words have been removed.

        </para>
        <para>

          <function>pnVarCensor()</function> tries to be intelligent in its
          attempt to remove censored words whilst not censoring words on the
          censor list that happen to be embedded in a larger word.

        </para>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          If <function>pnVarCensor()</function> is only passed a single
          <parameter>var</parameter> argument then it returns the corresponding
          censored variable.  If <function>pnVarCensor()</function> is passed
          multiple arguments then it returns an array of corresponding censored
          variables.
          This function returns <parameter>void</parameter> if
          an exception was raised.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function doesn't raise exceptions but throws back exceptions
          raised from other functions.

        </para>
       </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          <function>pnVarCensor()</function> uses the information provided in
          the configuration setting 'CensorList' as the basis of the words that
          it censors.  It also looks for commonly derivations of the words used
          to try to avoid censoring.  The system is also case-insensitive.

        </para>
        <para>

          It is possible to censor information either before it is stored in
          the database or before it is displayed on-screen.  The choice of
          which one to do is up to the developer, but the implications of the
          two different approaches should be considered.  By censoring
          information before putting it in to the database it is stored
          internally with censored marks, and it is possible that part of the
          meaning might be lost due to a bad choice of words in the censor
          list.  By censoring information before it is displayed the ability to
          add items to the censor list and have them take effect
          retrospectively is possible, but there is an overhead involved each
          time that the information is displayed, and the uncensored text will
          be stored in the database.

        </para>
        <para>

          Care should be taken to consider the effect of censorship, and if it
          should be applied to all information that is passed in by the user or
          if it should only be used in specific cases.  It is also up to the
          developer to decide whether to accept the censored version of text or
          to return it to the user for editing.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Obtain user comment and censor it
$comment = pnVarCleanFromInput('comment');
$comment = pnVarCensor($comment);

// See if user input contains censored words
$userinput = pnVarCleanFromInput('info');
if ($userinput != pnVarCensor($userinput)) {
        // Contains censored words
}
        </programlisting>
      </refsect1>
    </refentry>


    <refentry id="pnVarCleanFromInput">
      <refmeta>
        <refentrytitle>pnVarCleanFromInput</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnVarCleanFromInput</refname>
        <refpurpose>obtain form variable</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>mixed <function>pnVarCleanFromInput</function></funcdef>
            <paramdef>
              string <parameter>name</parameter>,
              string <parameter>...</parameter>
            </paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnVarCleanFromInput()</function> takes a variable number
          of <parameter>name</parameter> arguments and for each one obtains
          the variable from the input namespace.  It removes any preparsing
          done by PHP to ensure that the string is exactly as expected,
          without any escaped characters.

        </para>
        <para>

          <function>pnVarCleanFromInput()</function> also removes any HTML
          tags that could be considered dangerous to the PostNuke system's
          security.

        </para>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          If <function>pnVarCleanFromInput()</function> is only passed a
          single <parameter>name</parameter> argument then it returns the
          corresponding variable.  If
          <function>pnVarCleanFromInput()</function> is passed multiple
          arguments then it returns an array of corresponding variables.

        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          Obtaining input variables from the global namespace, or from
          arrays such as HTTP_POST_VARS, is not supported and should never
          be done.  <function>pnVarCleanFromInput()</function> is the only
          supported way of obtaining such variables.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Obtain a single value
$id = pnVarCleanFromInput('id');

// Obtain a number of values
list($name, $number) = pnVarCleanFromInput('name', 'number');
        </programlisting>
      </refsect1>
    </refentry>

    <refentry id="pnVarDelCached">
      <refmeta>
        <refentrytitle>pnVarDelCached</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnVarDelCached</refname>
        <refpurpose>remove a variable from temporary cache</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>void <function>pnVarDelCached</function></funcdef>
            <paramdef>
              string <parameter>key</parameter>,
              string <parameter>name</parameter>
            </paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnVarDelCached()</function> removes a variable that
          was previously placed in a temporary cache with
          <function>pnVarSetCached()</function>.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>key</term>
            <listitem>
              <para>

                The key identifying the particular cache you want to access

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>name</term>
            <listitem>
              <para>

                The name of the variable in that particular cache

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns <parameter>void</parameter> in all cases.

        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

           This function relies on a temporary memory cache -within a single
           page request- and will only allow you to remove variables that
           have been set previously during processing of the same request.
           It is meant to replace the excessive use of globals by core,
           modules and blocks, to prevent conflicts in variable name space
           and to structure the setting/retrieval of temporary variables.

           Typical examples include saving and retrieving variables for use
           by other functions, modules and blocks.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// see if this variable is already cached
if (pnVarIsCached('Modules.articles', 'myvar')) {
    // if so, retrieve the value from cache
    $value = pnVarGetCached('Modules.articles', 'myvar');
} else {
    // if not, do some processing/queries to generate the value
    ...
    $value = ...
    // and save it to cache (if you need it again in the same page request)
    pnVarSetCached('Modules.articles', 'myvar', $value);
}
...
// remove the variable from cache
pnVarDelCached('Modules.articles', 'myvar');
...
// remove everything from that variable cache
pnVarFlushCached('Modules.articles');
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnVarFlushCached()</function>,
          <function>pnVarGetCached()</function>,
          <function>pnVarIsCached()</function>,
          <function>pnVarSetCached()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnVarFlushCached">
      <refmeta>
        <refentrytitle>pnVarFlushCached</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnVarFlushCached</refname>
        <refpurpose>flush a particular variable cache</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>void <function>pnVarFlushCached</function></funcdef>
            <paramdef>
              string <parameter>key</parameter>
            </paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnVarFlushCached()</function> allows you to flush a
          particular variable cache that was used for
          <function>pnVarSetCached()</function> etc.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>key</term>
            <listitem>
              <para>

                The key identifying the particular cache you want to flush

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns <parameter>void</parameter> in all cases.

        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

           This function relies on a temporary memory cache -within a single
           page request- and will only allow you to unset a cache that
           has been used previously during processing of the same request.
           It is meant to replace the excessive use of globals by core,
           modules and blocks, to prevent conflicts in variable name space
           and to structure the setting/retrieval of temporary variables.

           Typical examples include saving and retrieving variables for use
           by other functions, modules and blocks.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// see if this variable is already cached
if (pnVarIsCached('Modules.articles', 'myvar')) {
    // if so, retrieve the value from cache
    $value = pnVarGetCached('Modules.articles', 'myvar');
} else {
    // if not, do some processing/queries to generate the value
    ...
    $value = ...
    // and save it to cache (if you need it again in the same page request)
    pnVarSetCached('Modules.articles', 'myvar', $value);
}
...
// remove the variable from cache
pnVarDelCached('Modules.articles', 'myvar');
...
// remove everything from that variable cache
pnVarFlushCached('Modules.articles');
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnVarDelCached()</function>,
          <function>pnVarGetCached()</function>,
          <function>pnVarIsCached()</function>,
          <function>pnVarSetCached()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnVarGetCached">
      <refmeta>
        <refentrytitle>pnVarGetCached</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnVarGetCached</refname>
        <refpurpose>get the value of a cached variable</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>mixed <function>pnVarGetCached</function></funcdef>
            <paramdef>
              string <parameter>key</parameter>,
              string <parameter>name</parameter>
            </paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnVarGetCached()</function> returns the value of a
          variable that was previously placed in a temporary cache with
          <function>pnVarSetCached()</function>.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>key</term>
            <listitem>
              <para>

                The key identifying the particular cache you want to access

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>name</term>
            <listitem>
              <para>

                The name of the variable in that particular cache

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns the value of the requested variable if it
          exists, or <parameter>void</parameter> if the variable isn't in
          the cache.

        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

           This function relies on a temporary memory cache -within a single
           page request- and will only allow you to retrieve variables that
           have been set previously during processing of the same request.
           It is meant to replace the excessive use of globals by core,
           modules and blocks, to prevent conflicts in variable name space
           and to structure the setting/retrieval of temporary variables.

           Typical examples include saving and retrieving variables for use
           by other functions, modules and blocks.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// see if this variable is already cached
if (pnVarIsCached('Modules.articles', 'myvar')) {
    // if so, retrieve the value from cache
    $value = pnVarGetCached('Modules.articles', 'myvar');
} else {
    // if not, do some processing/queries to generate the value
    ...
    $value = ...
    // and save it to cache (if you need it again in the same page request)
    pnVarSetCached('Modules.articles', 'myvar', $value);
}
...
// remove the variable from cache
pnVarDelCached('Modules.articles', 'myvar');
...
// remove everything from that variable cache
pnVarFlushCached('Modules.articles');
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnVarDelCached()</function>,
          <function>pnVarFlushCached()</function>,
          <function>pnVarIsCached()</function>,
          <function>pnVarSetCached()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnVarIsCached">
      <refmeta>
        <refentrytitle>pnVarIsCached</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnVarIsCached</refname>
        <refpurpose>check if a variable is available in a particular cache</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>bool <function>pnVarIsCached</function></funcdef>
            <paramdef>
              string <parameter>key</parameter>,
              string <parameter>name</parameter>
            </paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnVarIsCached()</function> checks if a particular
          variable was previously placed in a temporary cache with
          <function>pnVarSetCached()</function> and is available.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>key</term>
            <listitem>
              <para>

                The key identifying the particular cache you want to access

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>name</term>
            <listitem>
              <para>

                The name of the variable in that particular cache

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function returns <parameter>true</parameter> if that variable
          is available in that cache, or <parameter>false</parameter> if not.

        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

           This function relies on a temporary memory cache -within a single
           page request- and will only allow you to check for variables that
           have been set previously during processing of the same request.
           It is meant to replace the excessive use of globals by core,
           modules and blocks, to prevent conflicts in variable name space
           and to structure the setting/retrieval of temporary variables.

           Typical examples include saving and retrieving variables for use
           by other functions, modules and blocks.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// see if this variable is already cached
if (pnVarIsCached('Modules.articles', 'myvar')) {
    // if so, retrieve the value from cache
    $value = pnVarGetCached('Modules.articles', 'myvar');
} else {
    // if not, do some processing/queries to generate the value
    ...
    $value = ...
    // and save it to cache (if you need it again in the same page request)
    pnVarSetCached('Modules.articles', 'myvar', $value);
}
...
// remove the variable from cache
pnVarDelCached('Modules.articles', 'myvar');
...
// remove everything from that variable cache
pnVarFlushCached('Modules.articles');
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnVarDelCached()</function>,
          <function>pnVarFlushCached()</function>,
          <function>pnVarGetCached()</function>,
          <function>pnVarSetCached()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnVarPrepForDisplay">
      <refmeta>
        <refentrytitle>pnVarPrepForDisplay</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnVarPrepForDisplay</refname>
        <refpurpose>prepare variable for display</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>mixed <function>pnVarPrepForDisplay</function></funcdef>
            <paramdef>
              string <parameter>var</parameter>,
              string <parameter>...</parameter>
            </paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnVarPrepForDisplay()</function> takes a variable number
          of <parameter>var</parameter> arguments and for each one carries
          out suitable escaping of characters such that when output as part
          of an HTML page the exact string is displayed.

        </para>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          If <function>pnVarPrepForDisplay()</function> is only passed a
          single <parameter>var</parameter> argument then it returns the
          corresponding display-ready variable.  If
          <function>pnVarPrepForDisplay()</function> is passed multiple
          arguments then it returns an array of corresponding display-ready
          variables.

        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          Running <function>pnVarPrepForDisplay()</function> multiple times is
          cumulative, as is running a combination on
          <function>pnVarPrepForDisplay()</function> and
          <function>pnVarPrepHTMLDisplay()</function>, and is not reversible.
          It recommended that variables that have been returned from
          <function>pnVarPrepForDisplay()</function> are only used in output
          functions, and then discarded.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Get a version of name and number ready to display
list($outname,$outnumber) = pnVarPrepForDisplay($name, $number);

// Print some output
$html = "Name is $outname&lt;p&gt;
         Number is $outnumber&lt;p&gt;
         Other info is " . pnVarPrepForDisplay($otherinfo) . "&lt;p&gt;";
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnVarPrepHTMLDisplay()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnVarPrepForOS">
      <refmeta>
        <refentrytitle>pnVarPrepForOS</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnVarPrepForOS</refname>
        <refpurpose>prepare variable for operating system</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>mixed <function>pnVarPrepForOS</function></funcdef>
            <paramdef>
              string <parameter>var</parameter>,
              string <parameter>...</parameter>
            </paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnVarPrepForOS()</function> takes a variable number of
          <parameter>filename</parameter> arguments and for each one
          carries out suitable escaping of characters such that when used
          as part of an operating system filename it is valid and as close
          to the original string as possible.

        </para>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          If <function>pnVarPrepForOS()</function> is only passed a single
          <parameter>var</parameter> argument then it returns the corresponding
          operating-system-ready variable.  If
          <function>pnVarPrepForOS()</function> is passed multiple arguments
          then it returns an array of corresponding operating-system-ready
          variables.

        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          If the parameter passed to <function>pnVarPrepForOS()</function>
          contains characters that are illegal for that operating system then
          they will be replaced with a suitable character (normally '_').  The
          directory separator ('/' on Unix systems, '\' on Windows systems) is
          considered one of these, and will be replaced.  As such only
          filenames, and not pathnames, should be passed to this function.

        </para>
        <para>

          This function does not need to be run on the content of files,
          just their names.
        </para>
        <para>

          Running <function>pnVarPrepForOS()</function> multiple times is
          cumulative, and is not reversible unless the developer knows how
          many times it has been run.  It recommended that variables that
          have been returned from <function>pnVarPrepForOS()</function> are
          only used in operating system functions, and then discarded.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Get a version of name and number ready to use as directory and file names
list($osname, $osnumber) = pnVarPrepForOS($name, $number);

// Open file $topdirectory/$name/$number
$fh = fopen(pnVarPrepForOS($topdirectory) . "$osname/$osnumber", 'w');
        </programlisting>
      </refsect1>
    </refentry>

    <refentry id="pnVarPrepForStore">
      <refmeta>
        <refentrytitle>pnVarPrepForStore</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnVarPrepForStore</refname>
        <refpurpose>prepare variable for database storage</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>mixed <function>pnVarPrepForStore</function></funcdef>
            <paramdef>
              string <parameter>var</parameter>,
              string <parameter>...</parameter>
            </paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnVarPrepForStore()</function> takes a variable number
          of <parameter>var</parameter> arguments and for each one carries
          out suitable escaping of characters such that when inserted into
          a database the exact string is stored.

        </para>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          If <function>pnVarPrepForStore()</function> is only passed a
          single <parameter>var</parameter> argument then it returns the
          corresponding database-ready variable.  If
          <function>pnVarPrepForStore()</function> is passed multiple
          arguments then it returns an array of corresponding database-ready
          variables.

        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          Running <function>pnVarPrepForStore()</function> multiple times
          is cumulative, and is not reversible unless the developer knows
          how many times it has been run.  It recommended that variables
          that have been returned from
          <function>pnVarPrepForStore()</function> are only used in SQL
          functions, and then discarded.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// Get a version of name and number ready to store in the database
list($dbname, $dbnumber) = pnVarPrepForStore($name, $number);

// Create some database-ready SQL
$sql = "SELECT * from table
    WHERE col1 = '$dbname'
    AND col2 = '$dbnumber'
    AND col3 = '" . pnVarPrepForStore($otherinfo) . "'";
        </programlisting>
      </refsect1>
    </refentry>

    <refentry id="pnVarPrepHTMLDisplay">
      <refmeta>
        <refentrytitle>pnVarPrepHTMLDisplay</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnVarPrepHTMLDisplay</refname>
        <refpurpose>prepare variable for display, preserving some HTML tags</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>mixed <function>pnVarPrepHTMLDisplay</function></funcdef>
            <paramdef>
              string <parameter>var</parameter>,
              string <parameter>...</parameter>
            </paramdef>
          </funcprototype>
          <funcsynopsisinfo>
            <exceptionname>BAD_PARAM</exceptionname>
            <exceptionname>DATABASE_ERROR</exceptionname>
          </funcsynopsisinfo>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnVarPrepHTMLDisplay()</function> takes a variable number
          of <parameter>var</parameter> arguments and for each one carries out
          suitable escaping of characters such that when output as part of an
          HTML page the exact string is displayed, except for a number of
          admin-defined HTML tags which are left as-is for display purposes.

        </para>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          If <function>pnVarPrepHTMLDisplay()</function> is only passed a
          single <parameter>var</parameter> argument then it returns the
          corresponding display-ready variable.  If
          <function>pnVarPrepHTMLDisplay()</function> is passed multiple
          arguments then it returns an array of corresponding display-ready
          variables.
          This function returns <parameter>void</parameter> if
          an exception was raised.

        </para>
      </refsect1>
      <refsect1>
        <title>Exceptions</title>
        <para>

          This function doesn't raise exceptions but throws back exceptions
          raised from other functions.

        </para>
       </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          <function>pnVarPrepHTMLDisplay()</function> should be used with great
          care, as it does allow certain HTML tags to be displayed.

        </para>
        <para>

          The HTML tags that will be displayed are those defined in the
          configuration variable <parameter>AllowableHTML</parameter>, which is
          set on a per-instance basis by the site administrator.

        </para>
        <para>

          Running <function>pnVarPrepHTMLDisplay()</function> multiple times is
          cumulative, as is running a combination on
          <function>pnVarPrepHTMLDisplay()</function> and
          <function>pnVarPrepForDisplay()</function>, and is not reversible.
          It recommended that variables that have been returned from
          <function>pnVarPrepHTMLDisplay()</function> are only used in output
          functions, and then discarded.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
 // Get the home and body text of a story (allow specified HTML tags through)
list($hometext,$bodytext) = pnVarPrepHTMLDisplay($hometext, $bodytext);

// Print some output - numer should not have
// HTML tags in it, so use pnVarPrepForDisplay rather than pnVarPrepHTMLDisplay
$html = "Home text is $hometext&lt;p&gt;
         Body text is $bodytext&lt;p&gt;
         Story number is " . pnVarPrepForDisplay($storynum) . "&lt;p&gt;
         Notes are " . pnVarPrepHTMLDisplay($bodytext) . "&lt;p&gt;";
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnVarPrepForDisplay()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnVarSetCached">
      <refmeta>
        <refentrytitle>pnVarSetCached</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnVarSetCached</refname>
        <refpurpose>set the value of a cached variable</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>void <function>pnVarSetCached</function></funcdef>
            <paramdef>
              string <parameter>key</parameter>,
              string <parameter>name</parameter>,
              mixed <parameter>value</parameter>
            </paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnVarSetCached()</function> allows you to save the
          value of a variable in a temporary cache, for later retrieval
          (only within the same page request) with
          <function>pnVarGetCached()</function>.

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>key</term>
            <listitem>
              <para>

                The key identifying the particular cache you want to access

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>name</term>
            <listitem>
              <para>

                The name of the variable in that particular cache

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>value</term>
            <listitem>
              <para>

                The value you want to set that variable to. Any valid PHP
                variable can be used here (e.g. string, array, reference, ...)

              </para>
            </listitem>
          </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function <parameter>void</parameter> in all cases.

        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

           This function relies on a temporary memory cache -within a single
           page request- and will only allow you to set variables for use
           during further processing of the same request.
           It is meant to replace the excessive use of globals by core,
           modules and blocks, to prevent conflicts in variable name space
           and to structure the setting/retrieval of temporary variables.

           Typical examples include saving and retrieving variables for use
           by other functions, modules and blocks.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// see if this variable is already cached
if (pnVarIsCached('Modules.articles', 'myvar')) {
    // if so, retrieve the value from cache
    $value = pnVarGetCached('Modules.articles', 'myvar');
} else {
    // if not, do some processing/queries to generate the value
    ...
    $value = ...
    // and save it to cache (if you need it again in the same page request)
    pnVarSetCached('Modules.articles', 'myvar', $value);
}
...
// remove the variable from cache
pnVarDelCached('Modules.articles', 'myvar');
...
// remove everything from that variable cache
pnVarFlushCached('Modules.articles');
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function>pnVarDelCached()</function>,
          <function>pnVarFlushCached()</function>,
          <function>pnVarGetCached()</function>,
          <function>pnVarIsCached()</function>

        </para>
      </refsect1>
    </refentry>

    <refentry id="pnVarValidate">
      <refmeta>
        <refentrytitle>pnVarValidate</refentrytitle>
      </refmeta>
      <refnamediv>
        <refname>pnVarValidate</refname>
        <refpurpose>validate a variable</refpurpose>
      </refnamediv>
      <refsynopsisdiv>
        <funcsynopsis>
          <funcprototype>
            <funcdef>bool <function>pnVarValidate</function></funcdef>
            <paramdef>
              string <parameter>var</parameter>
              string <parameter>type</parameter>
              array <parameter>args</parameter>
            </paramdef>
          </funcprototype>
        </funcsynopsis>
      </refsynopsisdiv>
      <refsect1>
        <title>Description</title>
        <para>

          <function>pnVarValidate()</function> returns <parameter>true</parameter> if the
          validation was successful, <parameter>false</parameter> if not

        </para>
      </refsect1>
      <refsect1>
        <title>Parameters</title>
        <variablelist>
          <varlistentry>
            <term>var</term>
            <listitem>
              <para>

                The variable to validate

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
            <term>type</term>
            <listitem>
              <para>

                The type of validation to perform either email or url

              </para>
            </listitem>
          </varlistentry>
          <varlistentry>
             <term>args</term>
             <listitem>
               <para>

                An optional Array of arguments

                </para>
               </listitem>
             </varlistentry>
        </variablelist>
      </refsect1>
      <refsect1>
        <title>Return Values</title>
        <para>

          This function currently returns <parameter>true</parameter> on successful validation, and
          <parameter>false</parameter> if validation was unsuccessful.

        </para>
      </refsect1>
      <refsect1>
        <title>Notes</title>
        <para>

          <parameter>args</parameter> is unimplemented currently.

        </para>
      </refsect1>
      <refsect1>
        <title>Examples</title>
        <programlisting>
// validate email address
if (!pnVarValidate('john.doe@example.com', 'email')) {
    die('email address is incorrect format');
}

// validate url
if(!pnVarValidate('http://www.example.com','url')) {
    die('URL is invalid');
}
        </programlisting>
      </refsect1>
      <refsect1>
        <title>See Also</title>
        <para>

          <function></function>

        </para>
      </refsect1>
    </refentry>
		
		  </chapter>
</book>
