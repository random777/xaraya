<?xml version="1.0"?>
    <!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<!-- <?rfc private='my private memo'?>  Produce a private memo rather than a Xaraya-standard --> 
<?rfc toc='yes'?>

<rfc number="0001" category="info">
  <front>
    <title>Content Management System</title>
    <author initials="F." surname="Besler" fullname="Frank Besler">
      <organization>Xaraya Development Group</organization>
      <address>
	<email>besfred@gmx.net</email>
	<uri>http://www.xaraya.com</uri>
      </address>
    </author>
    <date month="January" year="2002"/>
    
    <!-- The abstract summarizes in one or two paragraphs the content of the RFC -->
    <abstract>
      <t>The contents of this RFC contain the literal content of the old plain
	text version of RFC-0001</t>
      <t>When time is a less scarcer good, someone might convert the plain text
	into structured XML so we can benefit from it.
      </t>
    </abstract>
  </front>
  
  <!-- The middle section is used for the actual content of the RFC -->
  <middle>
    <!-- One content section is mandatory -->
    <section title="Original content">
      <t>
	<artwork>

RFC-10 Postnuke Theme System 


 stratagem   We need to decide what it is we want the theme/template
system to do. Take out all the hardcore coding decisions and come up
with a viable solution that will make themes easy to produce for the
novice and powerful enough to satisfy the needs of the coder. Lets
take all the talk of current available systems out of this
discussion. I want theme guys to ring in with their thoughts on what
they would like to see. Coders should provide these items as
well. Then lets come to a common ground.   stratagem   We also need to
create a matrix from this to test other systems to see if they will
become a viable solution. If not then maybe we need to "roll" our own
to get this accomplished.  
1. Introduction 
2. General Statements About
Theme Systems 
3. Requirements 
4. Solution Proposal - Display
Abstraction Layer &amp; Pluggable Theme Engines and Arrangement of files
5. Code to be changed 
5a. Desireable Data Structures 
6. Code to be
written 
7. Basic documents for this RFC 
8. Current issues 
9. Tools
that need to be written from scratch
 10. Retractions 
11. Changelog

1. Introduction All ?xxx numbers refer to the basic documents in
section 7. We read through the articles on http://www.postnuke.com,
its forum threads, feature requests on sourceforge and the developers
mailing list. The following RFC is a first summary and contains some
solution proposals either compiled from the basic documents or from
general definitions concerning comments systems / forums.

 2. General
Statements About Theme Systems A theme system acts as an intermediary
between the program logic and the program's user, formatting and
displaying data in ways the user can understand. Theme systems
separate program logic from data presentation.  the problem with this
definition is it seems to combine two different physical definitions,
Themes and Templating Engines. perhaps:   Templating Engine:
Class/Function which abstracts display functionality into editable
template files and returns merged html/xhtml/xml string for output. 
 Themes: Sets of template files &amp; CSS files that create the layout &amp;
color/style of the postnuke display- ?ladyofdragons''   I'll agree
with that. - Dracos 

 The overall structure of PostNuke is causing the problems that this RFC is trying to address. The output generated is a document (HTML, RDF, XML) which has numerous blocks and modules. Yet, the generation of the document is driven from within the module. So the module needs to know about things outside of itself which requires us tto create templates and send data here and there. Instead, we need to change it so that the document is the driver and blocks and modules are the responders. - ?ColdRolledSteel 

 ?ColdRolledSteel has a good point. To allow complete customization, a page needs to be built from a document, not from a module. The designer should be able to specify what data/content is needed and the presentation layer should be able to communicate with the backend (modules, etc.) to retrieve it. - ?paul 

3. Requirements 
 *Separate data from formatting. - (or content from presentation/layout) - ?mberkay 
Revise current data structures to contain zero format/display information. 
Identify other data structures as needed. 
Improve PostNuke performance. 
 *be extensible to all smaller portions of postnuke, including modules and blocks. -?ladyofdragons 

 Modules should be looked at as APIs for working with their relevant data types, they should do no actual formatting. The presentation layer should be responsible for working with these APIs to retreive data. This way pages can be built that use different aspects of multiple modules. - ?paul 

4. Solution Proposal - Display Abstraction Layer &amp; Pluggable Theme Engines 
Several schools of thought exist within the PostNuke developer community concerning theme issues. Several discussions in various communication channels point to a "Display Abstraction Layer" as a solution. This would allow site administrators to choose what "Theme Engine" they prefer to use. 
 - (template engine is a fundamental part of an application platform. Although there are benefits of providing people choice of their favorite theme/template engine to work with, I believe benefits of having single, standard, well-defined system overweighs the choice. Choosing a time tested, solid existing template engine may also save development time.) - ?mberkay 
This solution does not disallow the need for native functionality that may be required outside of the theme system (such as may be required internally by legacy modules). The current theme system along with pnHTML may fill this role, with modification. 
A "Theme Engine" would be packaged similar to modules. Each "Theme Engine" would use its own templates and perform its own processing. 
It may not be feasable to have multiple "Theme Engines" active at the same time. 
It should be noted that only a site administrator could change the engine used by the site, which would in turn determine what themes are available to users. Users would not be able to use a theme which is installed, but developed for a different engine. 
Arrangement of files 
The file tree below is presented as a first proposal, and subject to change. 
 	html/
 		layout/
 			&lt;theme engine&gt;/
 				&lt;files as required&gt;
 		themes/
 			&lt;theme engine&gt;/
 				&lt;theme name&gt;/
 					&lt;files as required&gt;
This structure allows several things: 
separates engine code from its templates 
keeps templates and engine code in standard locations 
allows the same theme to exist under multiple engines 
There are several problems with this approach which I think will hamper postnuke development far more than it helps it: 
 * Modules should be able to separate out their display with templating engines so site admins can change the layout of the module. this allows a site admin to choose exactly how the layout of a download item or web_link looks and acts in a way that works with THEIR site concept. This is really important. pnHTML doesn't do this, and can't do this. Only a templating engine can. but if we allow multiple templating engines, modules can't be sure which engine will be available to them. Believe me, there's enough work that goes into building a module without having to worry about building output for 5 different templating engines. And if modules aren't templated, that means that every postnuke site will still look just the same, because the internal module content of everyone's modules will be static in its layout. - ?ladyofdragons 
 * pluggable theme engines' will splinter theme development more than it already is. It's nice to say that a theme can be made for several different templating engines, but would you want to? why quadruple your workload just to make sure that all postnuke users can enjoy your theme? As is, we don't have nearly the number of themes that php-nuke has, and people DO comment on that fact and choose php-nuke because they get the impression it has more to offer - ?ladyofdragons 
 * Caching would be uncontrolable since each engine used by each module would have a separate and incompatible cache mechanism. - ?aidan 
 * Session management combined with incompatible caching would be totally broken. - ?aidan 
 * I would be next to imposssible to gather a consensus about the screen model from all the screen components - how do you build a screen from 20 blocks and a module if each block is using a different template engine? - ?aidan 
 ;:if a single templating engine is chosen for postnuke, purely on its merits based on benchmarking &amp; the fact that it has the minimal feature set that is necessary to fulfill its function, this will solve the 'plugin' problems. Can you imagine what would have happened if postnuke decided to go with both PEAR and ADODB? It would be a logistical nightmare trying to decide what module used what system. The same idea applies here. - ?ladyofdragons 

 Yes, modules must be templated. This is why we have a default/internal template engine. Modules don't have to look for it, and if an admin really wants to, they can switch all modules to use another engine with a single setting. I don't see this as really splintering theme development, but forking it n-times, where n is the number of template engines PostNuke works with. - Dracos 

5. Code To Be Changed 
Code that assembles data into a structure which is then passed to a Theme Engine. 
Code that makes calls to theme-related functions. 
Code that sends output directly to the user. 

5a. Desireable Data Structures 
PostNuke currently passes data as arrays, with keys acting both as real data and metadata. This is acceptable. However, some data structures embed formatting into the array values, which is unacceptable. This practice should only continue as long as there is a call for legacy compatibility. 

6. Code To Be Written 
Code that loads, initializes, administers, and executes Theme Engines. 
A themeAPI which is Engine independant, allowing any module, block, or template to make direct calls to this set of functions. The themeAPI may act as a wrapper for other functions as necessary. 
7. Basic Documents For This RFC 

[1] RFC-10 Appendix 1 
8. Current issues 
The theme system currently used by PostNuke has both merits 
Organizes data into recognizeable structures 
Easy to learn 
and flaws 
Reliant on PHP knowledge 
HTML-centric 
Procedural nature hinders performance 
Theme design steered toward 5 zones: header, left column, content, right column, footer 
Theme design hampered/complicated by nonstandard data structures 
9. Tools that need to be written from scratch 
10. Retractions 
11. Changelog 


	</artwork>
      </t>
    </section>
  </middle>
</rfc>
