<?xml version="1.0" encoding="iso-8859-1"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xsl"?>
    <!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<!-- <?rfc private='my private memo'?>  Produce a private memo rather than a Xaraya-standard --> 
<?rfc toc="yes"?>

<rfc number="0007" category="info">
  <front>
    <title>Modularized Data</title>
    <author initials="G." surname="Rothfuss" fullname="Gregor J. Rothfuss">
      <organization>Project Management Core</organization>
      <address>
    <email>gregor@xaraya.com</email>
    <uri>http://www.xaraya.com</uri>
      </address>
    </author>
    <author initials="J." surname="Schrage" fullname="Jan Schrage">
      <organization>Xaraya Development Team</organization>
      <address>
    <email>jan@xaraya.com</email>
    <uri>http://www.xaraya.com</uri>
      </address>
    </author>
    <date month="January" year="2002"/>
    
    <!-- The abstract summarizes in one or two paragraphs the content of the RFC -->
    <abstract>
      <t>This RFC proposes to have a unified mechanism to extend modules with custom data.</t>
    </abstract>
  </front>
  
  <!-- The middle section is used for the actual content of the RFC -->
  <middle>
    <!-- One content section is mandatory -->
    <section title="Introduction">
      <t></t>
    </section>
    <section title="General statements about Modularized Data">
      <t></t>
    </section>
    <section title="List of requirements for Modularized Data">
      <t></t>
    </section>
    <section title=" Solution proposals - database tables">
      <t>
        This is the DB setup as extracted from the admin API.
        <figure>
          <artwork type="image/png" src="images/rfc0007_2.png"/>
        </figure>
      </t>
      <t>   
        This design is for text-based dynamic data.
        <figure><artwork type="image/png" src="images/rfc0007_1.png"/></figure>
        This design is for user data that can be assigned to groups,
        with optional selection lists for fields, i.e. for dropdowns.
        <figure><artwork type="image/png" src="images/rfc0007_3.png"/></figure>
      </t>
      <t>
        This design attempts to merge Dynamic Data, Dynamic User Data and Module
        Variables. Values are serialized to support transparent storage of complex
        types (arrays etc). Each type has a default BL tag for rendering, which can
        be overwritten in the property. Properties are referenced by module name.
            </t>
      <figure><artwork type="image/png" src="images/rfc0007_5.png"/></figure>
      <t>Proposed change: Remove field "validation": 
        Validation aspects should be handled by the data dictionary.
      </t>
    </section>
    <section title="Table 'Content'">
      <t></t>
    </section>
    <section title=" Solution proposals - APIs">
      <t>
        Dynamic Data will use two sets of APIs. Creation and Deletion of of variables is done within
        a module, while reading and writing variable contents is done in the core.
        
        There are currently discussions whether to combine Dynamic User Data with generalized
        Dynamic Data, in essence abstracting away the relationship between users and dynamic
        data, and allowing every module to define its own dynamic data. This brings up the question
        if module variables are being reinvented, and what should happen with the functionality
        to assign responsibility for storing user variables to authentication modules. 
        
        The current core API functions are:
        <figure><artwork type="image/png" src="images/rfc0007_4.png"/></figure>
      </t>
      <section title="Review of the current DD API with extension proposals">
        <list style="hanging">    
          <t>
            function dynamicdata_adminapi_createprop($args)
            <list>
              <t>modid - module id of the item field to create</t>
              <t>itemtype - item type of the item field to create</t>
              <t>label - name of the field to create</t>
              <t>type - type of the field to create</t>
              <t>default - default of the field to create</t>
              <t>validation - validation of the field to create</t>
            </list>
            Proposed changes:
            Add
            <list>
              <t>active - boolean: is this property active, i.e. usable?</t>
              <t>order -  int: sort order for display</t>
              <t>tag - string: BL tag that handles the output</t>
            </list>
            Delete
            <list>
              <t>validation: handled by data dictionary</t>
            </list>
          </t>
          <t>
            function dynamicdata_adminapi_updateprop($args)
            <list>
              <t>prop_id - property id of the item field to update</t>
              <t>modid - module id of the item field to update (optional)</t>
              <t>itemtype - item type of the item field to update (optional)</t>
              <t>label - name of the field to update</t>
              <t>type - type of the field to update</t>
              <t>default - default of the field to update (optional)</t>
              <t>validation - validation of the field to update (optional)</t>
            </list>
            
            Proposed changes:
            
            Add:
            <list>
              <t>active - boolean: is this property active, i.e. usable?</t>
              <t>order -  int: sort order for display</t>
              <t>tag - string: BL tag that handles the output</t>
            </list>
            
            Delete: 
            <list>
              <t>modid: A property that belongs to a specific module should remain there</t>
              <t>itemtype: Update of item types may break the module logic. 
                Should be handled by deletion and new creation</t>
              <t>type: Likewise.</t>
              <t>validation: handled by data dictionary</t>
            </list>
          </t>
          <t>
            function dynamicdata_adminapi_deleteprop($args)
            <list>
              <t>prop_id - property id of the item field to delete</t>
              <t>modid - module id of the item field to delete</t>
              <t>itemtype - item type of the item field to delete</t>
              <t>label - name of the field to delete</t>
              <t>type - type of the field to delete</t>
              <t>default - default of the field to delete</t>
              <t>validation - validation of the field to delete</t>
            </list>
            Proposed changes:
            <list style="symbols">
              <t>Delete all parameters except prop_id and modid:
                For security check ensure a module can delete only its own properties.
                It should, however, be allowed to delete any of them.
              </t>
            </list>
          </t>
        </list>
        <t>
          Proposed new functions:
          
          <list>
            <t>
              function getAllProperties(modid):
              get a list of all properties for module $modid
              and their basic type and BL tags.
              returns array(propid,type,tag)
            </t>
          </list>
        </t>
      </section>
    </section>
    
    <section title="Relationship to other areas">
      <t>It will need to be determined if it makes sense to allow storage of certain properties
        via the modular authentication system. For instance, it could be beneficial to store
        dynamic properties for the users module in LDAP. Also, it needs to be determined how and
        if dynamic properties integrate with the Multilangue system. Marco has some thoughts about
        this, i hope he will share them soon. Property validation should be done by using the
        facilties provided by xarVarValidate.</t>
    </section>
    <section title="Code that will need to be rewritten">
      <t>xarUserGetVar, xarUserSetVar and xarUserValidateVar will go away, to be replaced
        by xarModGetVar, xarModSetVar, xarVarValidate respectively.</t>
    </section>
    <section title="Tools that need to be created from scratch">
      <t></t>
    </section>
    <section title="Basic documents for this RFC 7">
      <t></t>
    </section>
    <section title="Retractions">
      <t></t>
    </section>
    <section title="Author contact">
      <t></t>
    </section>
    <section title="Changelog">
      <t></t>
    </section>
  </middle>
  <back>
    <section title="Additional comments">
      <section title="Introduction">
        <t>
          Dynamic data (or any data in fact) generally goes through
          several steps :
          <list style="numbers">
            <t>definition : the admin (or the system) defines some dynamic
              property for a module item type </t>
            <t>input : the user/admin can enter or modify the data in a form</t>
            <t>validation : the system verifies that it has an acceptable value</t>
            <t>storage : the data is saved/updated in the database, or perhaps
              it is passed along to some external store (e.g. other DB, LDAP,
              web service, ...)</t>
            <t>retrieval : the data is retrieved from the database, or from some
              other external store</t>
            <t>display : the data is made available for display by the module</t>
          </list>
        </t>
        <t>
          Xaraya should facilitate *all* these steps, and it seems we're still
          missing a few pieces of the puzzle here.
        </t>
        
        <t>
          I'll start with what we should be able to do from a user/admin
          point of view, and then go back to the definition part, to see
          what kind of information we need in order to define all this.
        </t>
      </section>
      <section title="User input">
        <t>
          This implies showing some kind of form field of a certain type
          (or some equivalent like a date selector or image picker), with
          a particular field name (or names), some initial content,
          possibly some list of acceptable values, and so on.
        </t><t>
          One approach is to let BL do all the work, and use one
          common tag that handles all the proper formatting for you.
          An example of that is the (current) articles-field tag, that
          receives a name, property type and value from the module,
          and handles all the rest automatically.
          That includes providing the right formatting, retrieving the list
          of acceptable values based on the property type ("field format"),
          or in some cases even retrieving the value itself (e.g. for
          username or date).
        </t><t>
          For the moment, there is no explicit support for retrieving
          a list of acceptable values by individual property, rather than
          by property type, but this is certainly going to be necessary
          if you want to provide even simple things like dropdown lists
          etc.
        </t><t>
          And going one step further (cfr. FormExpress), you could
          imagine defining a function when creating your property,
          and let BL invoke that function to retrieve the list for you.
        </t><t>
          The BL template is reduced to a simple loop :
          <artwork>
            &lt;xar:loop name="$fields"&gt;
            &lt;tr align="left" valign="middle"&gt;
            &lt;td&gt;&amp;xar-var-label;&lt;/td&gt;
            &lt;td&gt;&lt;xar:articles-field definition="$definition" /&gt;&lt;/td&gt;
            &lt;/tr&gt;
            &lt;/xar:loop&gt;
          </artwork>
          and with a better definition of properties, you could even replace
          that by a single tag like
          <artwork>
            &lt;xar:articles-form module="articles" itemtype="1" itemid="1234"&gt;
          </artwork>
        </t><t>
          That's one extreme, and I'm not far from being able to do just
          that ... for articles. You could imagine doing the same thing
          for any module, with the right support of property definitions
          by Xaraya.
          <t>
            Advantage : you define your properties, and Xaraya does the rest.
          </t><t>
            Disadvantage : no fine control over how the form is created, except
            by modifying how the individual fields are generated by that tag.
          </t><t>
            But by allowing admins to modify the formatting of individual
            properties (and/or making use of widgets in the future), non-designer
            people [like me :)] can let Xaraya create the whole input interface.
          </t>
        </t><t>
          The other extreme -the "classic" approach I came from- is of course
          to build your whole form yourself in the module template, retrieving
          the data, acceptable values etc. in your module. This works fine
          as long as you know beforehand which fields you're going to have,
          but once you start dealing with dynamic data, this may no longer
          be valid.
        </t><t>
          That means that you have another choice to make :<list>
            <t>
              a. either those dynamic fields should appear "automagically" in the
              input form via hooks, and the creation of the fields should be done
              via some mechanism similar to what I described above for articles,
            </t><t>
              b. or the module should be able to retrieve the dynamic data itself
              and the admin will then manually add the additional form fields in
              the template himself
            </t></list>
        </t><t>
          For the moment, option a. is used in the dynamic data module,
          but option b. should be made available as well. And of course,
          we could imagine having some generator build a sample template
          based on the dynamic properties defined for that module...
        </t>
        
      </section>
      <section title="Validation">
        <t>
          The xarVarFetch() and xarVarValidate() functions already provide
          some basic validation based on data type, and also some
          verification of allowed HTML tags (cfr. other on-going thread), but
          it doesn't come anywhere near the kind of validations we'll need
          for dynamic data yet.
        </t><t>
          Some sample validations I'm thinking of here :<list style="symbols">
            <t>is it a existing user ?
            </t><t>is this a valid date (year, month, day, hour, min, sec) ?
            </t><t>does this belong to that list of acceptable values ?
            </t><t>is this an acceptable URL ?
            </t><t>is this a local image from that directory where you're allowed
              to pick some image from ?
            </t><t>is this text not too long ?
            </t><t>is that a valid status change ?
            </t><t>is that really a webpage that you're trying to retrieve ?
            </t><t>is this a valid file upload, of those acceptable file types, size, ... ?
            </t><t>...
            </t></list></t>
        <t>
          So far, most of the validations in articles are pretty simplistic too,
          but that's the kind of input validation we will need if we want to
          provide more than really basic dynamic data.
        </t><t>
          And as mentioned before, some validations may be on the
          level of property types, others may require specific rules
          per individual property (for a particular module + item type),
          and others might be "filled in" dynamically by the module
          for each item we're dealing with.
          So Xaraya should support validation rules on all three levels.
        </t><t>
          
          Another aspect is *what* data to validate. Each module knows
          what particular data it has to receive on input/modification,
          but of course this list is dynamic for ... dynamic data. This is
          (again) handled via hooks at the moment, but in some cases,
          there might be properties that *may not* be modified, either
          because it is not a valid input field (e.g. the current user is
          fixed), or because the field (e.g. the article status) may not be
          modified by this particular user (permissions).
        </t><t>
          So another aspect of property definition is that the admin (or the
          property type) should be able to decide whether this is a valid
          input at all, or who is allowed to input/modify it - something I
          didn't cover in 1) User Input, but has an impact there as well,
          obviously.
        </t><t>
          
          And since we're pushing the envelope anyway, why not consider
          the situation where input validation for a module could be done
          without requiring any coding by the module developer as well ?
          After all, if Xaraya is (someday) able to display a complete
          input form based on property definitions, it should be able to
          handle the results as well, no ? [you're probably way ahead of
          me by now :)]
        </t><t>
          Again, this is not something that should be mandatory (forced
          by the core), but a convenience...
        </t>
      </section>
      <section title="Storage and retrieval of data">
        <t>
          Okay, so we have our dedicated tables for each module, and we
          have some ways to retrieve (user) data via LDAP or other means,
          and now we have some generic dynamic data table where people
          can store additional stuff if they want to extend a module.
        </t><t>
          And in the future, it would be nice if we could get data from other
          places as well, like some other external databases, or information
          made available via web services, in files, whatever.
        </t><t>
          Now unlike some other projects I won't mention :-), I don't think
          that putting *everything* in some generic meta-table is the best
          approach. Dedicated tables have their use, and we shouldn't get
          rid of them just for the sake of "ultra-flexibility".
        </t><t>
          But one thing that would really allow us to go beyond the
          "my module, my tables" stage would be to improve and
          extend the way user data can now be retrieved from different
          "sources" to [at least] allow you to do the same for dynamic
          data in general.
        </t><t>
          Basically, what we need then is some "mapping" mechanism
          between the logical property definitions used by Xaraya,
          and the physical access to that data in local or remote
          databases, via LDAP, and so on. And of course, "connectors"
          providing the corresponding access mechanisms to each
          of those "data stores".
        </t><t>
          Putting this into place will probably not be done overnight,
          but right now, there are a few blocking points in the core
          that make this nearly impossible to even start implementing.
        </t><t>
          And the most important one (in my point of view) is the
          correct handling of multiple database connections - I'm
          by no means an expert on PHP ADODB, but is it really
          so hard to make sure that module developers can (if they
          want to) open up another database connection without
          Xaraya loosing its own database connection along the
          way ?
          I haven't tried it myself with Xaraya, but this seems to be a
          very common complaint for PostNuke module developers,
          and somehow I don't think we've solved that particular
          issue yet - or have we ?
        </t><t>
          
          Anyway, besides some of the more fancy stuff we might
          implement someday [like importing meta definitions from
          existing sources and automatically making them available
          as property definitions for use in dynamic data], we could
          also imagine automating the select, insert, update, delete
          methods - not only for dynamic data itself, but also for
          dedicated module tables.
        </t><t>
          Again, not something mandatory, but another feature that
          Xaraya would provide for module developers and/or admins,
          so that once they've defined which properties their data
          should have, they could access it transparently via the
          core.
          And a step further of course, that they could do it for
          any data, regardless of where it comes from...
        </t><t>
          
          In the short term (for RFC 7), this means that dynamic
          properties may not always have their data (per item)
          stored in the dynamic data table, but the data might
          be located elsewhere - so it should be possible to
          say where it's coming from, and where it's going to
          be stored.
          We can then work on providing different "connectors"
          as we move along, making use of what's already been
          done in the context of the auth* modules - and then
          turn the situation around and let some of the auth*
          modules make use of the generic connectors.
        </t><t>
          That's it for data storage and retrieval - now let's 
          finally do something with that data :)
        </t>
      </section>
      <section title="Displaying data">
        <t>
          One thing that's seriously lacking in the current dynamic data
          implementation is how to handle the actual display of that data.
          So far, I'm just creating a name - value list and passing it
          along via the display hook, which obviously isn't good enough.
        </t><t>
          Now, remember those different templating options mentioned
          for User Input. Assuming we had a "display field" tag for each
          property, as well as an "input field" tag, we could (theoretically)
          provide a similar approach like :
          <artwork>
            &lt;xar:loop name="$fields"&gt;
            &lt;xar:articles-displayfield definition="$definition" /&gt;
            &lt;/xar:loop&gt;
          </artwork>
          or even
          <artwork>
            &lt;xar:articles-display module="articles" itemtype="1" itemid="123" /&gt;
          </artwork>
        </t><t>
          Again, this could be built up automatically by Xaraya based
          on the property definitions, by providing some default display
          for each property type. Of course, people aren't likely to be happy
          with the way things would be displayed "out of the box", but
          this would at least provide some basic configurable output, and
          a stepping stone towards full customisation.
        </t><t>
          For item lists and displays, module developers, designers and
          admins are much more likely to adapt templates to suit their
          needs, so here it's essential that they can handle the display
          of dynamic data directly, which means we need to :
          <list style="symbols">
            <t>have some BL tags that allow you to get some default display
              for each dynamic property, or
            </t>
            <t>have some BL tags that allow you to get the data itself for
              each property in the template, or
            </t>
            <t>be able to automatically retrieve the dynamic data in the module
              and make it available for the template like any other variable, or
            </t>
            <t>any combination of the above ;)
            </t></list>
        </t><t>
          Frankly, I'm not sure which of the above should be our first
          priority, and which one(s) should be supported in the end.
        </t><t>
          Ideally, the fact that there is dynamic data available or not
          should be made transparent if the admin is happy with some
          "standard" presentation, but he should be able to fully customise
          how and where the dynamic data will appear otherwise...
        </t><t>
          If we used transparent data wrappers that can hide where
          the data is coming from (dedicated table, dynamic data, ...
          see part 3), this would be less of a problem, but I don't think
          we can rely on that in any reasonably short period of time.
        </t><t>
          Either way, there's nothing implemented in the dynamic data
          module for this beyond some rudimentary display via hooks,
          so I'm certainly open for suggestions or ideas on how to
          proceed on the display part at this point !!! :-)
        </t><t>
          
          That's about all I can think of about using dynamic data from
          the point of view of users/admin - now let's see what all this
          means in terms of property definitions, and the design of the
          DD module in general. Which leads us to the last part of this
          RFC-about-an-RFC :)
        </t>
      </section>
      <section title="Putting it all together">
        <t>Based on all of the above, here's how I see us moving forward with
          property definitions and dynamic data :
        </t>
        <t><list style="numbers">
            <t>in core (some new 'datadict' module, perhaps ?), define standard
              property types (in the sense of articles, not in the sense of xarVar
              or users module) and allow the creation of new property types.
              <t>
                This includes support by a BL tag to generate a standard input
                field (or equivalent), advanced validation rules (implemented with
                extended xarFetch and xarVarValidate), and support by some other
                BL tag to generate a standard display as output.
              </t><t>
                Ideally, there should be 1 common BL input tag and 1 common BL
                display tag, possibly supported by a bunch of widgets (Xaraya 1.1)
                or whatever for easier customisation afterwards.
              </t></t>
            <t>in core ('dynamicdata' module or other), modules/admins can register
              properties for a particular module + item type. In the short term, this
              covers only dynamic data, and this module is optional. In the longer
              term, this also covers the "static" properties (=dedicated tables ) of
              each module, and it will no longer be optional.
              <t>
                For each property, modules can use the common BL input and display
                tags, or specify some specific input and display tags (to be defined how).
              </t><t>
                For each property, modules can also "fill in" the generic validation rule
                of the corresponding property type, where necessary. Example : the
                acceptable values for a list, the base directory to look for images, a
                callback function, or whatever is relevant for that property type.
              </t><t>
                In the short term, the 'dynamicdata' module will create corresponding
                records in a dynamic data table for each property. In the longer term,
                modules will be able to specify where/how data should be stored/retrieved
                for each property.
              </t></t>
            <t>the 'dynamicdata' module will provide functions to store/retrieve data
              for each of the properties defined for a module. In the short term, only
              with the dynamic data table - in the longer term, also with other
              "data stores" like dedicated module tables, external databases, LDAP,
              etc.
              <t>
                Also relevant in this context is nuncanada's proposal for new hook
                functions (cfr. mail of 1/1/2003 "Proposing new hooks functions").
              </t><t>
                In my opinion, the functions he proposed should *not* be seen as
                a replacement for the current hooks, but as data access functions
                to be provided by the core via the (extended) 'dynamicdata' module.
              </t><t>
                If/when each module registers its "static properties" to the core, the
                dynamicdata module can then create the appropriate joint statements
                transparently. But this would not be for Xaraya 1.0 (IMHO).
              </t></t>
            <t>the 'dynamicdata' module will provide a BL form tag to show the input
              fields for all properties of a module+item type, and a BL output tag to 
              show the display for all properties of a module+item type, making
              use of the standard BL input and display tags, or the individual tags
              defined for each property.
            </t>
            <t>the 'dynamicdata' module will be able to validate input for all properties 
              defined for that module (in the short term, only the dynamic properties,
              and in the longer term, every property defined for that module).
            </t>
            <t>for more customized display of dynamic data by the modules, we need
              to rapidly select one (or more) of the options discussed in the previous
              part.
            </t>
            <t>did I miss anything ?
            </t>
          </list>
        </t><t>
          Much of the short-term stuff is already available in one place or another.
          Missing is the central 'datadict' functionality and its corresponding BL
          tags and validations, and the display part. So do we go ahead with this
          or not ? :-)
        </t>
      </section>
    </section>
  </back>
</rfc>
