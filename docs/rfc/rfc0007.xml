<?xml version="1.0"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xsl"?>
    <!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<!-- <?rfc private='my private memo'?>  Produce a private memo rather than a Xaraya-standard --> 
<?rfc toc='yes'?>

<rfc number="0007" category="info">
  <front>
    <title>Content Management System</title>
    <author initials="G." surname="Rothfuss" fullname="Gregor J. Rothfuss">
      <organization>Project Management Core</organization>
      <address>
	<email>rothfuss@abstrakt.ch</email>
	<uri>http://www.xaraya.com</uri>
      </address>
    </author>
    <date month="January" year="2002"/>
    
    <!-- The abstract summarizes in one or two paragraphs the content of the RFC -->
    <abstract>
      <t>The contents of this RFC contain the literal content of the old plain text version of RFC-0001</t>
      <t>When time is a less scarcer good, someone might convert the plain text	into structured XML so we can benefit from it.</t>
    </abstract>
  </front>
  
  <!-- The middle section is used for the actual content of the RFC -->
  <middle>
    <!-- One content section is mandatory -->
    <section title="Introduction">
      <t></t>
    </section>
    <section title="General statements about Modularized User Data">
      <t></t>
    </section>
    <section title="List of requirements for Modularized User Data">
      <t></t>
    </section>
    <section title=" Solution proposals - database tables">
      <t>
        This is the DB setup as extracted from the admin API.
		<figure><artwork src="images/rfc0007_2.png"/></figure>
        This design is for text-based dynamic user data.
		<figure><artwork src="images/rfc0007_1.png"/></figure>
		This design is for user data that can be assigned to groups,
        with optional selection lists for fields, i.e. for dropdowns.
		<figure><artwork src="images/rfc0007_3.png"/></figure>
	  </t>
    </section>
    <section title="Table 'Content'">
      <t></t>
    </section>
    <section title=" Solution proposals - APIs">
      <t>
      Dynamic User Data will use two sets of APIs. Creation and Deletion of of variables is done within
      a module, while reading and writing variable contents is done in the core.

      There are currently discussions whether to combine Dynamic User Data with generalized
      Dynamic Data, in essence abstracting away the relationship between users and dynamic
      data, and allowing every module to define its own dynamic data. This brings up the question
      if module variables are being reinvented, and what should happen with the functionality
      to assign responsibility for storing user variables to authentication modules. 

      The current core API functions are:
		<figure><artwork src="images/rfc0007_4.png"/></figure>
      </t>
    </section>
    <section title="Relationship to other areas">
      <t></t>
    </section>
    <section title="">
      <t></t>
    </section>
    <section title="Code that will need to be rewritten">
      <t></t>
    </section>
    <section title="Tools that need to be created from scratch">
      <t></t>
    </section>
    <section title="Basic documents for this RFC 7">
      <t></t>
    </section>
    <section title="Retractions">
      <t></t>
    </section>
    <section title="Author contact">
      <t></t>
    </section>
    <section title="Changelog">
      <t></t>
    </section>
  </middle>
</rfc>
