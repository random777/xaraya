<?xml version="1.0" encoding="iso-8859-1"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xsl"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<!-- <?rfc private='my private memo'?>  Produce a private memo rather than a Xaraya-standard -->
<?rfc editing="yes"?>
<?rfc toc="yes"?>
<?rfc tocdepth="3"?>

<rfc number="0010" category="std">
    <front>
        <title>Block Layout (Xaraya Theme System)</title>
        <author initials="M." surname="Vance" fullname="Dracos">
            <organization>Xaraya Development Group</organization>
            <address>
                <email>dracos@thedragonsforge.com</email>
            </address>
        </author>
        <author initials="P." surname="Rosania" fullname="Paul Rosania">
            <organization>Xaraya Development Group</organization>
            <address>
                <email>prosania@attbi.com</email>
            </address>
        </author>
        <author initials="M." surname="Canini" fullname="Marco Canini">
            <organization>Xaraya Development Group</organization>
            <address>
                <email>marco@xaraya.com</email>
            </address>
        </author>
        <author initials="M.R." surname="van der Boom" fullname="Marcel van der Boom">
            <organization>Xaraya Development Group</organization>
            <address>
                <email>marcel@hsdev.com</email>
            </address>
        </author>
        <date month="November" year="2002"/>
        <!-- The abstract summarizes in one or two paragraphs the content of the RFC -->
        <abstract>
            <t>The contents of this RFC describes the blocklayout templating system for xaraya.</t>
        </abstract>
    </front>
    <!-- The middle section is used for the actual content of the RFC -->
    <middle>
    <section title="Introduction">
      <t>
        Blocklayout is intended to give theme developers a maximum of control
        over the appearance and functionality of their Xaraya website. This
        file documents the structure and syntax of blocklayout, and details
        required changes to themes and the core.
      </t>
      <t>
        Blocklayout is potentially a very powerful tool. However, modules and
        blocks need to be modified somewhat in order to take advantage of
        Blocklayout's flexibility. The conversion process is not complicated.
      </t>
      <t>
        <xref target="ddproperties">Dynamic data properties</xref>, like modules and blocks, can also provide a flexible templated output after a conversion process.</t>
      <t>
        In addition, certain changes to the Xaraya directory structure are
        necessary to accomodate templates and their defaults. Those
        structural changes are illustrated below.
    <artwork><![CDATA[
html/
    |-- modules/
    |       <module name>/
    |           xartemplates/
    |               <user|admin>-<module function>[-<template>].xd
    |               blocks/
    |                   <block name>-<template name>.xd
    |               includes/
    |                   <file>.xd
    |-- includes/
    |       xarTemplate.php
    |       xarBLCompiler.php
    |-- themes/
            <theme name>/
            |-- theme.php
            |-- pages/
            |       <master templates>.xt
            |-- modules/
            |       <module name>/
            |           <user|admin>-<module function>[-<template name>].xt
            |           blocks/
            |               <block name>-<template name>.xt
            |           includes/
            |               <file>.xt
            |-- includes/
                    <file>.xt
      ]]></artwork>
            </t>

      <t>
        html/themes/&lt;theme name&gt;/xartheme.php contains metadata about the theme;
        no actual markup can reside there. Such metadata includes:
        <list style="symbols">
          <t>$themeinfo['name']</t>
          <t>$themeinfo['author']</t>
          <t>$themeinfo['homepage']</t>
          <t>$themeinfo['email']</t>
          <t>$themeinfo['description']</t>
          <t>$themeinfo['contact_info']</t>
          <t>$themeinfo['publish_date']</t>
          <t>$themeinfo['license']</t>
          <t>$themeinfo['version']</t>
          <t>$themeinfo['xaraya_version']</t>
          <t>$themeinfo['blocklayout_version']</t>
        </list>
      </t>
    </section>
    <section title="Required CSS Classes">
      <t>
        The following is a list of CSS classes which may be referenced by
        module and block developers with assurance that their output will
        integrate well with any Blocklayout theme. Blocklayout themes must
        define all of these classes.
      </t>
      <t>
        The first group is standard classes. Selectors here will be applied to
        every instance of a tag, unless overridden by a more specific class.
        <list style="symbols">
          <t>A</t>
          <t>BLOCKQUOTE</t>
          <t>BODY</t>
          <t>CODE</t>
          <t>H1</t>
          <t>H2</t>
          <t>H3</t>
          <t>H4</t>
          <t>TH</t>
          <t>TD</t>
          <t>TABLE</t>
          <t>THEAD</t>
          <t>TBODY</t>
          <t>TFOOT</t>
          <t>P</t>
          <t>PRE</t>
          <t>INPUT</t>
          <t>BUTTON</t>
          <t>SELECT</t>
          <t>OPTION</t>
          <t>OPTGROUP</t>
          <t>TEXTAREA</t>
          <t>LABEL</t>
          <t>IMG</t>
          <t>LI</t>
          <t>UL</t>
          <t>OL</t>
          <t>SUB</t>
          <t>SUP</t>
        </list>
      </t>
      <t>
        Next are individual classes, mostly related to tables. Unlike previous
        versions, Blocklayout 1.1 relies on CSS inheritance to style
        individual tags; this makes many inidividual rules unnecessary.
        <list style="symbols">
          <t>TD.xar-norm</t>
          <t>TD.xar-alt</t>
        </list>
      </t>
      <t>
        Finally are anonymous classes. Selectors here can be applied to any tag.
        <list style="symbols">
          <t>.xar-block-head</t>
          <t>.xar-block-head-[block group]</t>
          <t>.xar-block-title</t>
          <t>.xar-block-title-[block group]</t>
          <t>.xar-block-body</t>
          <t>.xar-block-body-[block group]</t>
          <t>.xar-block-foot</t>
          <t>.xar-block-foot-[block group]</t>
          <t>.xar-mod-head</t>
          <t>.xar-mod-title</t>
          <t>.xar-mod-body</t>
          <t>.xar-mod-foot</t>
          <t>.xar-norm</t>
          <t>.xar-norm-outline</t>
          <t>.xar-accent</t>
          <t>.xar-accent-outline</t>
          <t>.xar-alt</t>
          <t>.xar-alt-outline</t>
          <t>.xar-sub</t>
          <t>.xar-menu-section</t>
          <t>.xar-menu-item</t>
          <t>.xar-menu-subitem</t>
          <t>.xar-menu-section-current</t>
          <t>.xar-menu-item-current</t>
          <t>.xar-menu-subitem-current</t>
          <t>.xar-error</t>
        </list>
      </t>
      <t>
        Rules with partially bracketed names are optional. Rules applied to
        individual blocks are left up to the theme author.  Additional menu item
        rules may be devised as necessary to satisfy the depth of the menu.
      </t>
      <t>
        Theme developers may introduce their own classes in their templates.
        This practice should be avoided by module and block developers.
        Extensions of the required classes list will not be    supported by other
        themes or modules, and are not endorsed by Xaraya.
      </t>
      <t>
        These classes allow each block or group of blocks to have a different
        appearance than modules (normal).
      </t>
      <t>
        It is suggested that the classes be defined in the given order, to
        avoid odd results in different browsers.
      </t>
    </section>
    <section title="Templates">
      <t>
        Each page in Blocklayout is assembled from a collection of templates and
        fitted with the necessary data. A "Master" template is loaded first.
        This template defines the basic layout of the page and what information
        will be presented. Each module function or block called from the Master
        template has a child template associated with it. The data it handles
        is parsed through this template before being inserted into the Master.
        In this manner, templates can be nested any number of levels deep.
        <figure>
          <artwork type="image/gif" src="images/rfc0010_1.gif"/>
        </figure>
      </t>
      <t>
        Internal Templates (.xd) provide default output formatting for Xaraya
        modules. Themes cannot alter these templates, but may contain their
        own version of them. Be careful! Editing Internal Templates may cause
        Xaraya to behave unexpectedly or not at all.
      </t>
      <t>
        The first time a template is called, it is compiled into PHP code. It
        will not be compiled again unless the original copy is updated. This
        procedure allows a maximum of template flexibility without slowdown in
        page generation time.
      </t>
    </section>
    <section title="Blocklayout tags">
      <t>
        Tags in Blocklayout adhere to XML syntax. The standard Blocklayout
        namespace is "xar" and at this time that may not be changed. There is one
        root tag:
        <list style="symbols">
          <t><xref target="blocklayout">&lt;xar:blocklayout /&gt;</xref></t>
        </list>
        The following tags can be used in any context:
        <list style="symbols">
          <t><xref target="block">&lt;xar:block /&gt;</xref></t>
          <t><xref target="blockgroup">&lt;xar:blockgroup /&gt;</xref></t>
          <t><xref target="comment">&lt;xar:comment /&gt;</xref></t>
          <t><xref target="for">&lt;xar:for /&gt;</xref></t>
          <t><xref target="foreach">&lt;xar:foreach /&gt;</xref></t>
          <t><xref target="if">&lt;xar:if /&gt;</xref></t>
          <t><xref target="loop">&lt;xar:loop /&gt;</xref></t>
          <t><xref target="ml">&lt;xar:ml /&gt;</xref></t>
          <t><xref target="mlkey">&lt;xar:mlkey /&gt;</xref>(can also be used as a child tag, see <xref target="ml">&lt;xar:ml /&gt;</xref>)</t>
          <t><xref target="mlstring">&lt;xar:mlstring /&gt;</xref> (can also be used as a child tag, see <xref target="ml">&lt;xar:ml /&gt;</xref>)</t>
          <t><xref target="module">&lt;xar:module /&gt;</xref></t>
          <t><xref target="sec">&lt;xar:sec /&gt;</xref></t>
          <t><xref target="set">&lt;xar:set /&gt;</xref></t>
          <t><xref target="template">&lt;xar:template /&gt;</xref></t>
          <t><xref target="var">&lt;xar:var /&gt;</xref></t>
          <t><xref target="while">&lt;xar:while /&gt;</xref></t>
        </list>
        The following tags have a specific context:
        <list style="symbols">
          <t><xref target="else">&lt;xar:else /&gt;</xref></t>
          <t><xref target="elseif">&lt;xar:elseif /&gt;</xref></t>
          <t><xref target="break">&lt;xar:break /&gt;</xref></t>
          <t><xref target="continue">&lt;xar:continue /&gt;</xref></t>
          <t><xref target="mlvar">&lt;xar:mlvar /&gt;</xref></t>
        </list>
      </t>
      <section title="Referencing data within templates">
          <t>
          Blocklayout variables are delimited by # ... #. For example, the variable
          $foo is accessed by the #$foo# directive.
        </t>
        <t>
          String keys in arrays should be
          single quoted (#$foo['bar']#) rather than double (#$foo["bar"]#). An
          alternative syntax for constant keys uses a 'dot' to specify the keys.
          #$foo.bar# is equivalent to #$foo['bar']#. These can go down to any
          level and can include numbers, for example, $foo.bar.dee.2
        </t>
        <t>
          In addition to template variables, Blocklayout also allows direct access
          to a limited set of xarAPI functions (list to be determined). Function
          calls are represented as #xarAPIFunc($arg1, 'arg2')#. Function arguments
          should also be single quoted (as necessary).
        </t>
      </section>
      <section title="Comments in Templates">
        <t>
          Placing comments in Blocklayout templates is done by surrounding the
          content in question with &lt;xar:comment&gt; .... &lt;/xar:comment&gt; Content
          within these tags will be stripped from the final output stream.
          Standard two-hyphen comments (&lt;!-- --&gt;) will be passed on to the
          output stream.
        </t>
        <t>
          We used to have the &lt;--- ---&gt; construct, but this is invalid XML, do NOT USE this
          anymore. Note that inside &lt;xar:comment/&gt; tags, things will still have to be valid
          XML. If you want complete freedom on what to put inside your comments, you'll have to experiment
          with CDATA sections and &lt;-- style comments inside the &lt;xar:comment&gt; tag.
        </t>
      </section>
      <section anchor="tagdescriptions" title="Tag descriptions and Attributes">
        <t>
          A note on logic tags: The condition attribute present on most logic
          tags will frequently call for the use of &lt;, &gt;, and &amp; characters. These
          characters are restricted in XML documents and may not be used in this context.
          Therefore, to present an easy, readable alternative to PHP comparison
          operators, Blocklayout uses Perl-like string operators within
          templates. Assignment operators are not affected. See below:

          <artwork>
        BL operator PHP operator    English
        eq          ==              equal to
        id          ===             identical to
        lt          &lt;               less than
        gt          &gt;               greater than
        le          &lt;=              less or equal to
        ge          &gt;=              greater or equal to
        ne          !=              not equal to
        nd          !==             not identical to
        and         and             and
        or          or              or
        xor         xor             exclusive or
        not         not             not
      </artwork>
        </t>
        <t>
          For the description of the tag attributes the following conventions are used:
          <list>
            <t><em>attributename</em> indicates the name of the attribute described</t>
            <t><em>[attribute]</em> when square brackets surround the attribute this indicates an optional attribute</t>
            <t><em>[attribute]</em> (defaultvalue) indicates an optional attribute, the default value is
              given between the brackets
            </t>
            <t><em>attribute</em> {(value)|value2} indicates that the attribute can have the values 'value' and
              'value2' of which 'value' is the default if none is specified.
            </t>
          </list>
        </t>
        <t>
          The 'context' section for each tag description describes to
          which 'parent' tag the described tag belongs, in the sense of
          required structure, and the child tags which are expected
          before the closing tag, again in terms of required
          structure.
        </t>
        <!-- xar:blocklayout -->
        <section anchor="blocklayout" title="&lt;xar:blocklayout /&gt;">
          <t>
            The &lt;xar:blocklayout /&gt; tag is the root-tag of a blocklayout complete
            template. With a <em>complete</em> template we mean the assembly of the page
            level template, the relevant module templates and all other template snippets
            necessary to construct the complete template for a particular request.
          </t>
          <t>
            Note that this complete template does not (yet) exist in one piece anywhere, it
            is assembled from the several templates applicable for a certain request.
          </t>
          <t>
            A root tag is required in each valid XML document and can occur only once. For
            Xaraya this means the &lt;xar:blocklayout /&gt; tag occurs in a page template only;
            once as opening tag at or near the beginning of the template and once as
            closing tag at the end of the page template.
          </t>
          <section title="Forms">
            <t>This tag only has an open form</t>
          </section>
          <section title="Attributes">
            <t>
              <list>
                <t><em>version</em>
                  <t>required attribute. At the moment of writing blocklayout is at version 1.0 or
                    below, since we are still in beta. When new versions of the blocklayout language
                    are released this attribute is used for compatability issues. The version number
                    indicates what version of the blocklayout syntax to expect in the templates.
                  </t>
                </t>
                <t><em>[content]</em>(text/html)
                  <t>
                    The content attribute denotes the type of content the page template describes. The
                    value of this attribute is a legal string according to the IETF RFC describing
                    mime-types. The default content type is "text/html"
                  </t>
                  <t>
                    The complete MIME type functionality is described in several IETF RFCs. The most
                    relevant one for this RFC is: http://www.ietf.org/rfc/rfc2046.txt There are a large
                    number of content types which can be specified. The most relevant ones for blocklayout
                    are in the 'text' type of content. Examples:
                    <list>
                      <t>text/html  - plain old html</t>
                      <t>text/plain - plain text</t>
                      <t>text/xml   - xml data</t>
                      <t>application/vnd.mozilla.xul+xml - more complicated mime type, identifying a xul document.</t>
                    </list>
                  </t>
                  <t>
                    In theory, blocklayout could support any mimetype, but the text and application types will
                    be the two types, with their respective subtypes which will be used most frequently
                  </t>
                </t>
                <t><em>xmlns:xar</em>
                  <t>declaration of the xar namespace. As we currently hardcode the namespace this
                    attribute can only have the value:
                    <artwork>xmlns:xar="http://xaraya.com/2004/blocklayout"</artwork>
                  </t>
                </t>
              </list>
            </t>
          </section>
          <section title="Syntax examples">
            <t>
            <artwork><![CDATA[
              <?xml version="1.0" encoding="utf-8"?>
              <xar:blocklayout version="1.0" content="text/html" xmlns:xar="http://www.xaraya.com/2004/blocklayout">
                <!-- Rest of the page level template goes here -->
              </xar:blocklayout>]]>
            </artwork>
            </t>
          </section>
          <section title="Context">
            <t>
              This tag is the root tage of the blocklayout language, it has no parent tags and all other
              tags are children of this tag.
            </t>
          </section>
        </section>
        <!-- xar:block -->
        <section anchor="block" title="&lt;xar:block /&gt;">
          <t>
            The xar:block tag places a "block" of content into the
            output. A block is always owned by a module, which is
            responsible for feeding the block with the appropriate
            information to produce its output. There are a number of
            flexible ways to control what a block contains and how it
            will appear in the output.
          </t>
          <t>
            The block tag is one of the most flexible constructs
            in blocklayout (how surprising). We haven't even touched
            at all the possibilities ourselves yet. Unfortunately
            this makes it also the most untested area in blocklayout
            and vulnerable for surprises.
          </t>
          <t>
            There are two approaches to content that blocks take. They are:
            <list style="numbers">
              <t>static content</t>
              <t>dynamic content</t>
            </list>
          </t>
          <t>
            Static content blocks are defined completely within their
            template file, and are not dependent on any other
            information. A block containing a piece of html to render
            is an example of such a block. Dynamic blocks however,
            have dynamic contents. This means that their content
            depends on a certain state of the site at a certain
            moment in time. Examples of this type are: "Last 5 items
            posted on site", "Currently logged on users"
            etcetera. Each block consist of a title and content. The
            title may be an empty string.
          </t>
          <t>
            In essense though, there is no difference in the way that
            blocks with static or dynamic content are managed.
          </t>
          <section title="Forms">
            <t>Empty form:
              <t>
                Since a block accepts structured data in its overriding
                parameters, this tag only supports the empty form at 
                present.
              </t>
            </t>
            <t>Block form:
              <t>
                This is for future expansion. Although the empty form
                of this tag allows attributes to over-ride any default
                or pre-defined parameter of the block, attributes are
                not suitable for passing in all types of data. We
                envisage a method of allowing overriding block parameter 
                data to be passed in through the block content, perhaps
                using a child tag. It could look something like this:
                <artwork><![CDATA[
                    <xar:block instance="123">
                        <xar:param name="category">42</xar:param>
                        <xar:param name="alt_title">My News Stories</xar:param>
                    </xar:block>
                ]]></artwork>
              </t>
            </t>
          </section>
          <section title="Attributes">
            <t>
              <t>
                A block is identified by its instance or by the module and type.
                A block identified by its instance, will have been created
                through the blocks administration screens, and will have custom
                content set. A block identified by its module/type does not need
                to created first through the blocks admin screens, and will
                initially contain default content for that block type.
              </t>
              <list>
                <t><em>[id]</em><t> an identifier for the tag</t></t>
                <t><em>[instance]</em>
                  <t>
                    If instance is specified, it's value is used to look
                    up the the specific block in the database. The instance
                    can take the form of a block ID or a block name.
                  </t>
                </t>
                <t><em>[module]</em>
                  <t>
                    Name of the module which owns the block. In the
                    administration part of Xaraya this is visible when
                    looking at the block types. This attribute must be
                    used in conjunction with the [type] attribute.
                  </t>
                </t>
                <t><em>[type]</em>
                  <t>
                    Name of the block to display. The name is the value
                    of the field filled in by the site manager in the
                    administration part of Xaraya. This attibute must
                    be used in conjunction with the [module] attribute.
                  </t>
                </t>
                <t><em>[name]</em>
                  <t>
                    The name of the block to display. The name is used
                    only for security checks, to determine whether the
                    block should be loaded at run-time.
                  </t>
                </t>
                <t><em>[title]</em>
                  <t>The title to use for the block.</t>
                </t>
                <t><em>[state]</em>
                  <t>The state of the block (0 is hidden, 3 is maximized).</t>
                </t>
                <t><em>[template]</em>
                  <t>
                    Name of a template to use for the block. The
                    template attribute can define two templates: the
                    box template and the block template. Essentially
                    the block template defines the layout within a block
                    and the box template defines a wrapper to go around
                    the block. The format of this attribute is:
                    box-template;block-template - both of which are
                    optional. Default templates will be used if none
                    are specified with this attribute.
                  </t>
                </t>
                <t><em>[*]</em>
                  <t>
                    All other attributes are passed to the block as
                    overriding parameters. The attribute names are
                    specific to each block. A system for allowing a
                    block to declare which attributes are available, 
                    and what kind of validation will be performed on
                    them, will also be in place. Blocks not declaring
                    allowed attributes will not have any restrictions
                    placed on the overriding parameters passed in to
                    them, so be aware that without validation, rendering
                    results can be undefined.
                  </t>
                </t>
              </list>
            </t>
          </section>
          <section title="Syntax examples">
            <t>
              <t>
              This renders block instance number 2, or the block instance named 'block_x', directly.
              The 'module' and 'type' attributes are ignored, since we are using the instance
              attribute to identify a block that has been pre-defined though the admin screens.
              </t>

              <artwork><![CDATA[
                <xar:block instance="2" module="base" />
                <xar:block instance="block_x" type="random" />
              ]]></artwork>

              <t>
              Look for block 'goodie' owned by module 'base' (this provides the implicit content) and
              try to render it with box template 'block_2'. The block will execute with it's default
              parameters.
              </t>

              <artwork><![CDATA[
                <xar:block module="base" name="goodie" template="block_2" />
              ]]></artwork>

              <t>
              This block has explicit contents specified directly in the block tag. That content will
              be rendered by applying the default block template from the 'base' module and block 'goodie'
              (which may still be overridden by the theme). It will also be enclosed in the default
              box template from the current theme (usually blocks/default.xt).
              </t>

              <artwork><![CDATA[
                <xar:block module="base" name="goodie" />
              ]]></artwork>

              <t>
              This example will render the articles/topitems block, displaying just two items, with
              a static (i.e. non-dynamic) title 'Standalone Topitems', and a default state of 3
              (maximised). The block will be named 'standalone_topitems', and that name can be
              used to hide that block from some users through the permissions system. The box (outer) template
              will be 'right' (in {current-theme}/blocks/right.xt, falling back to default.xt if that
              template cannot be found). The block (inner) template is specified as 'mytop'.
              The customised block template will be {current-theme}/modules/articles/blocks/topitems-mytop.xt,
              falling back to topitems.xt and then modules/articles/xartemplates/xarblocks/topitems.xd.
              This block has not been pre-defined through the block admin screens.
              </t>

              <artwork><![CDATA[
                <xar:block module="articles" type="topitems" title="Standalone Topitems"
                    state="3" numitems="2" dynamictitle="false" name="standalone_topitems" 
                    template="right;mytop" />
              ]]></artwork>
            </t>
          </section>
          <section title="Context">
            <t>Parent tag: <xref target="blockgroup">&lt;xar:blockgroup&gt;</xref> when that tag
                is used in block form.</t>
            <t>Child tags: none</t>
          </section>
                </section>
        <!-- xar:blockgroup -->
        <section anchor="blockgroup" title="&lt;xar:blockgroup /&gt;">
          <t>
            The Blockgroup tag is responsible for rendering a group of
            blocks. If empty, it renders the named group from the
            database.  Otherwise, it can specify the box template to use
            on all &lt;xar:block/&gt; tags within it.
          </t>
          <section title="Forms">
            <t>Empty form
              <t>The group of blocks is determined at runtime based on the
                value of the name attribute. The name references a value entered
                in the blocks adminstration indicating which block group to render.
              </t>
              <t>Block form
                <t>When specified as a block tag all the block tags specified within the
                  blockgroup are rendered.
                </t>
              </t>
            </t>
          </section>
          <section title="Attributes">
            <t>
              <list>
                <t><em>[id]</em>
                  <t>an identifier for the tag.</t>
                </t>
                <t><em>name</em>
                  <t>The name of the block group to render. When the tag is
                    used in its empty form this attribute is required. The attribute is
                    ignored when the tag is used in its block form.
                  </t>
                </t>
                <t><em>template</em>
                  <t>Name of the box template to use by default on all blocks within
                    the blockgroup tag. In its empty form, the template will be used
                    to wrap all blocks within it. In its non-empty form, each block
                    may individually override the box template, but otherwise will
                    share the template defined by this attribute. This attribute is
                    optional.
                  </t>
                </t>
              </list>
            </t>
          </section>
          <section title="Syntax examples">
            <t>
            <artwork>
                Renders the blockgroup 'left'. The template attribute is ignored or, when in strict
                rendering creates an exception:

              &lt;xar:blockgroup name="left" template="SeaBreeze_left"/&gt;

                Renders the block 'login' in a blockgroup using the template 'SeaBreeze_center' for the
                blockgroup. The login block uses the block (inner) template 'simple_login' and is
                wrapped in the box (outer) template 'SeaBreeze_center':

              &lt;xar:blockgroup template="SeaBreeze_center"&gt;
                &lt;xar:block type="login" module="users" template=";simple_login"/&gt;
              &lt;/xar:blockgroup&gt;
           </artwork>
            </t>
          </section>
          <section title="Context">
            <t>Parent tag: none.</t>
            <t>Child tags: in block form at least one <xref target="block">&lt;xar:block&gt;</xref> tag.</t>
          </section>
        </section>
        <!-- xar:break -->
        <section anchor="break" title="&lt;xar:break /&gt;">
          <t>
            Escapes the closest
            <xref target="for">&lt;xar:for /&gt;</xref>,
            <xref target="foreach">&lt;xar:foreach /&gt;</xref>,
            <xref target="loop">&lt;xar:loop /&gt;</xref>, or
            <xref target="while">&lt;xar:while /&gt;</xref>.
            The depth attribute, if present and an integer
            greater than 1, an equal number of enclosing loops are broken out of.
          </t>
          <section title="Forms">
            <t>Only in empty form</t>
          </section>
          <section title="Attributes">
            <t>
              <list>
                <t><em>[id]</em>
                  <t>an identifier for the tag (optional)</t>
                </t>
                <t><em>[depth]</em> (1)
                  <t>how many levels of enclosing loops to be broken out of.</t>
                </t>
              </list>
            </t>
          </section>
          <section title="Syntax examples">
            <t>
            <artwork>
              &lt;xar:for start="$i = 0" test="$i &lt; 10" iter="$i++"&gt;
                &lt;xar:if condition="$i eq 5"&gt;
                  &lt;xar:break/&gt;
                &lt;/xar:if&gt;
                #$i#
              &lt;/xar:for&gt;
            </artwork>
            </t>
            <t>
              The above will generate:
              <artwork>
                01234
              </artwork>
            </t>
          </section>
          <section title="Context">
            <t>
              Parent tags:
              <xref target="for">&lt;xar:for /&gt;</xref>,
              <xref target="loop">&lt;xar:loop /&gt;</xref>, or
              <xref target="while">&lt;xar:while /&gt;</xref>.
            </t>
            <t>Child tags: none</t>
          </section>
        </section>
        <!-- xar:comment -->
        <section anchor="comment" title="&lt;xar:comment /&gt;">
          <t>
            Marks a block of a template as being a comment, which will not
            result in any output. The tag is primarly used to supply templates
            with comments for developers and theme designers. Anything inside
            the xar:comment block will be ignored.
          </t>
          <section title="Forms">
            <t>Only to be used in open form</t>
          </section>
          <section title="Attributes">
            <t>
              none
            </t>
          </section>
          <section title="Syntax examples">
            <t>
            <artwork>
              &lt;xar:comment&gt;
                The contents of the comment tag will be ignored completely
              &lt;/xar:comment&gt;
            </artwork>
            </t>
            </section>
          <section title="Context">
            <t>Parent tags: none</t>
            <t>Child tags: none</t>
          </section>
        </section>
        <!-- xar:continue -->
        <section anchor="continue" title="&lt;xar:continue&gt;">
          <t>
            Ends the current iteration of a
            <xref target="for">&lt;xar:for /&gt;</xref>,
            <xref target="foreach">&lt;xar:foreach /&gt;</xref>,
            <xref target="loop">&lt;xar:loop /&gt;</xref>, or
            <xref target="while">&lt;xar:while /&gt;</xref>, and begins the next iteration.
            If the depth attribute is present and an integer greater than 1, an equal number
            of enclosing loops are skipped to the end of their current iteration.
          </t>
          <section title="Forms">
            <t>Only to be used in empty form</t>
          </section>
          <section title="Attributes">
            <t>
              <list>
                <t><em>[id]</em>
                  <t>an identifier for the tag (optional)</t>
                </t>
                <t><em>[depth]</em> (1)
                  <t>how many levels of enclosing loops to skip to the end of (optional)</t>
                </t>
              </list>
            </t>
          </section>
          <section title="Syntax examples">
            <t>
            <artwork>
              &lt;xar:for start="$i = 0" test="$i &lt; 10" iter="$i++"&gt;
                &lt;xar:if condition="$i eq 5"&gt;
                  &lt;xar:continue/&gt;
                &lt;/xar:if&gt;
                #$i#
              &lt;/xar:for&gt;
            </artwork>
              </t>
              <t>
                The above will generate:
                <artwork>
                  012346789
                </artwork>
              </t>
            </section>
          <section title="Context">
            <t>Parent tags:
                <t><xref target="for">&lt;xar:for /&gt;</xref>
                  <xref target="loop">&lt;xar:loop /&gt;</xref>, or
                  <xref target="while">&lt;xar:while /&gt;</xref>.
                </t>
              </t>
            <t>Child tags: none</t>
          </section>
        </section>
        <!-- xar:else -->
        <section anchor="else" title="&lt;xar:else /&gt;">
          <t>
            Separates template code within an <xref
            target="if">&lt;xar:if /&gt;</xref> tag. When the
            condition of the <xref target="if">&lt;xar:if /&gt;</xref>
            tag is true, the template content preceeding <xref
            target="else">&lt;xar:else /&gt;</xref> is
            executed. Otherwise, the template content after <xref
            target="if">&lt;xar:if /&gt;</xref> is executed. When
            <xref target="elseif">&lt;xar:elseif /&gt;</xref>is used
            within an <xref target="if">&lt;xar:if /&gt;</xref> block,
            <xref target="else">&lt;xar:else /&gt;</xref> must appear
            last.
          </t>
          <section title="Forms">
            <t>This tag has only an empty form</t>
          </section>
          <section title="Attributes">
            <t>
              <list>
                <t><em>[id]</em>
                  <t>an identifier for the tag (optional)</t>
                </t>
              </list>
            </t>
          </section>
          <section title="Syntax examples">
            <t>
              See <xref target="if">&lt;xar:if /&gt;</xref> for syntax.
            </t>
          </section>
          <section title="Context">
            <t>Parent tag: <xref target="if">&lt;xar:if /&gt;</xref></t>
            <t>Child tags: none</t>
          </section>
        </section>
        <!-- xar:elseif -->
        <section anchor="elseif" title="&lt;xar:elseif /&gt;">
          <t>
            Contains template code to be executed if all related
            preceeding <xref target="if">&lt;xar:if /&gt;</xref> and
            <xref target="elseif">&lt;xar:elseif /&gt;</xref> tag
            conditions evaluate to false. All instances of <xref
            target="elseif">&lt;xar:elseif /&gt;</xref> attached to
            <xref target="if">&lt;xar:if /&gt;</xref>must appear
            before <xref target="else">&lt;xar:else /&gt;</xref>
          </t>
          <section title="Forms">
            <t>This tag has only the empty form</t>
          </section>
          <section title="Attributes">
            <t>
              <list>
                <t><em>[id]</em>
                  <t>an identifier for the tag (optional)</t>
                </t>
                <t><em>condition</em>
                  <t>The condition attribute is specified as a PHP expression
                    which should evaluate to false or true. Within the condition
                    attribute, normal php expressions can be used with one exception.
                    When comparing values, the &lt; and &gt; would conflict with XML
                    syntax. See <xref target="tagdescriptions">the note on logic tags</xref>
                    above for the details.
                  </t>
                </t>
              </list>
            </t>
          </section>
          <section title="Syntax examples">
            <t>
              See <xref target="if">&lt;xar:if /&gt;</xref> for syntax.
            </t>
          </section>
          <section title="Context">
            <t>Parent tag: <xref target="if">&lt;xar:if /&gt;</xref></t>
            <t>Child tags: none</t>
          </section>
        </section>
        <!-- xar:for -->
        <section anchor="for" title="&lt;xar:for /&gt;">
          <t>
            The &lt;xar:for&gt; tag is a control structure which emulates a
            for loop, like encountered in most programming languages. Based
            on a 'start', 'test' and 'iter' attribute, the child tags of the
            tag are processed zero or more times.
          </t>
          <section title="Forms">
            <t>Only allowed in block form.</t>
          </section>
          <section title="Attributes">
            <t>
              <list>
                <t><em>[id]</em>
                  <t>an identifier for the tag</t>
                </t>
                <t><em>start</em>
                  <t>An expression which should evaluate to a value, which
                    is taken as the initial value of the loop variable to iterate
                    over.
                  </t>
                </t>
                <t><em>test</em>
                  <t>The condition to test the iterated value against. This attribute
                    is a php expression which should evaluate to false or true on each
                    iteration. The for loop stops iterating when the value of the
                    'test' attributes is false. Again, when using comparison operators
                    refer to the <xref target="tagdescriptions">note on logictags</xref>
                  </t>
                </t>
                <t><em>iter</em>
                  <t>The action to perform at the end of each pass through the loop.
                    The blocklayout for construct is just as susceptible to infinite
                    looping as any for construct in another language. In fact, the 'for'
                    tag is almost literally translated into a for construct in php. Anything
                    which can go wrong with a php for loop, also holds for the blocklayout
                    variety of it.
                  </t>
                </t>
              </list>
            </t>
          </section>
          <section title="Syntax examples">
            <t>
            <artwork>
              &lt;xar:for start="$i = 0" test="$i le 10" iter="$i++"&gt;
                // stuff which gets process during $i &lt;= 10
              &lt;/xar:for&gt;
            </artwork>
            </t>
          </section>
          <section title="Context">
            <t>Parent tag: none.</t>
            <t>Child tags: none</t>
          </section>
        </section>
        <!-- xar:foreach -->
        <section anchor="foreach" title="&lt;xar:foreach /&gt;">
          <t>
            Iterates over an array, assigning each element in
            <em>in</em> to <em>value</em> using <em>key</em>.
            Note that the order in which the elements are processed is
            <em>NOT GUARANTEED</em> to be the same order as the elements
            of the 'in' attribute. If you absolutely want to make sure
            the elements are processed in the order in which they are
            stored in the array you should use the
            <xref target="loop">xar:loop</xref> element.
          </t>
          <t>
            The foreach construct operates on copies of the variables
            specified in its attributes. A 'save scope' is created for
            them. This means, that whatever the value was for a variable
            before the foreach construct, it's guaranteed to have the
            same value after the foreach construct.
          </t>
          <section title="Forms">
            <t>Only allowed in block form</t>
          </section>
          <section title="Attributes">
            <t>
              <list>
                <t><em>[id]</em>
                  <t>an identifier for the tag</t>
                </t>
                <t><em>in</em>
                  <t>An expression which evaluates to the name of an array
                    containing the elements to process. Normally this will
                    just be the array variable itself ($varname)
                  </t>
                </t>
                <t><em>[key]</em>
                  <t>Variable to assign the key of the array to. This attribute
                    is optional. If it is not specified, no key is used in the
                    foreach loop. If it is not specified, the 'value' attribute
                    is required.
                  </t>
                </t>
                <t><em>[value]</em>
                  <t>variable to assign value to. If this attribute is not specified
                    the 'key' attribute is required and the key is used to loop
                    over the elements.
                  </t>
                </t>
              </list>
            </t>
          </section>
          <section title="Syntax examples">
            <t>
            <artwork>
              &lt;xar:foreach in="$hooks" key="$hookmodule" value="$hookoutput"&gt;
                // stuff to process
              &lt;/xar:foreach&gt;
            </artwork>
            </t>
          </section>
          <section title="Context">
            <t>Parent tag: none.</t>
            <t>Child tags: none</t>
          </section>
        </section>
        <!-- xar:if -->
        <section anchor="if" title="&lt;xar:if /&gt;">
          <t>
            Contains template code processed if the condition evaluates to true.
            The value of Condition is a php expression.
          </t>
          <section title="Forms">
            <t>Only allowed in block form</t>
          </section>
          <section title="Attributes">
            <t>
              <list>
                <t><em>[id]</em>
                  <t>an identifier for the tag</t>
                </t>
                <t><em>condition</em>
                  <t>A php an expression evaluating to false or true. When
                    it evaluates to true, the children of this element are
                    processed. For comparison operators refer to
                    <xref target="tagdescriptions">the note on logic tags</xref>
                  </t>
                </t>
                <t><em>[inline]</em> {true|(false)}
                  <t>Defaulting to false, this attribute specifies whether the
                    condition should be in assignable (inline) form. This
                    correspond to the php expression : (condition ? truepart:falsepart)
                  </t>
                  <t>Note: this attribute is not implemented yet</t>
                </t>
              </list>
            </t>
          </section>
          <section title="Syntax examples">
            <t>
            <artwork>
              &lt;xar:if condition="$func eq 'editStory'"&gt;
                // stuff
              &lt;xar:elseif condition="$func eq 'saveStory'"&gt;
                //more stuff
              &lt;xar:elseif condition="$func eq 'viewStory'"&gt;
                //still more stuff
              &lt;xar:else /&gt;
                //even more stuff
              &lt;/xar:if&gt;
            </artwork>
            </t>
          </section>
          <section title="Context">
            <t>Parent tag: none.</t>
            <t>Child tags:
               <t><xref target="else">&lt;xar:else /&gt;</xref></t>
               <t><xref target="elseif">&lt;xar:elseif /&gt;</xref></t>
            </t>
          </section>
        </section>
        <!-- xar:loop -->
        <section anchor="loop" title="&lt;xar:loop /&gt;">
          <t>
            Loop allows theme authors to execute snippets of a template multiple
            times based on a condition.
          </t>
          <section title="Forms">
            <t>Only allowed in block form</t>
          </section>
          <section title="Attributes">
            <t>
              <list>
                <t><em>[id]</em>
                  <t>an identifier for the tag</t>
                </t>
                <t><em>name</em>
                  <t>The name of an array variable over which the loop executes. The
                    elements are guaranteed to be processed in the same order as they
                    are stored in this array.
                  </t>
                </t>
                <t><em>[prefix]</em> DEPRECATED - not supported anymore)</t>
              </list>
            </t>
            <t>
              In the body of the loop, a number of special variables are accessible
              to access the loop variables:
              <artwork>
                #$loop:[id:]item['var']# ; or
                #$loop:[id:]item.var#    : if you created the $module_data array and put in a
                                           variable call 'var' the value of this variable is
                                           displayed. Optionally  you can specify id: to reference
                                           other loop constructs.
                #$loop:[id:]index#       : the numeric loop index (of loop with id 'id')
                #$loop:[id:]number#      : the loop number in the current context. This can also be interpreted as the current loop nesting level
                #$loop:[id:]key#         : the key of the item being referenced
              </artwork>
              <t>The 'id' part in these variables refers to other loops.
                When nesting loops, the right variables from the right loops can be
                accessed this way. As for the foreach construct the loops are executed
                in a 'save scope'; the values outside the loops are not affected by
                the loops.
              </t>
            </t>
          </section>
          <section title="Syntax examples">
            <t>
            <artwork>
              &lt;xar:loop name="$module_data"&gt;
                // stuff
                &lt;p&gt;#$loop:item.title#&lt;/p&gt;
              &lt;/xar:loop&gt;
            </artwork>
            </t>
          </section>
          <section title="Context">
            <t>Parent tag: none.</t>
            <t>Child tags: none</t>
          </section>
        </section>
        <!-- xar:ml -->
        <section anchor="ml" title="&lt;xar:ml /&gt;">
          <t>
            The &lt;xar:ml&gt; tag is a wrapper for <xref target="mlkey">&lt;xar:mlkey
            /&gt;</xref> and <xref target="mlstring">&lt;xar:mlstring
            /&gt;</xref> when their values contain placeholders. These
            placeholders are replaced by the content of <xref
            target="mlvar">&lt;xar:mlvar /&gt;</xref> tags in the
            order they appear in the template.
          </t>
          <t>
            The enclosing &lt;xar:mlstring&gt; or &lt;xar:mlkey&gt; should have
            placeholders in its definition of the form #(1)..#(n) if there are
            'n' variables to be replaced. The contents of th first
            &lt;xar:mlvar&gt; tag is put in the place of #(1), the second in the
            location of #(2) etcetera.
          </t>
          <section title="Forms">
            <t>Only allowed in block form</t>
          </section>
          <section title="Attributes">
            <t>
              <list>
                <t><em>[id]</em>
                  <t>an identifier for the tag</t>
                </t>
              </list>
            </t>
          </section>
          <section title="Syntax examples">
            <t>
            <artwork>
              &lt;xar:ml&gt;
                &lt;xar:mlkey&gt;USERSONLINE&lt;/xar:mlkey&gt;
                &lt;xar:mlvar&gt;78&lt;/xar:mlvar&gt;
                &lt;xar:mlvar&gt;120&lt;/xar:mlvar&gt;
              &lt;/xar:ml&gt;

              The values '78' and '120' are put in the place of
              #(1) and #(2) in the definition of the key 'USERSONLINE'.
              Note that these aren't visible in the template itself.

              &lt;xar:ml&gt;
                &lt;xar:mlstring&gt;There are #(1) members and #(2) guests online.&lt;/xar:mlstring&gt;
                &lt;xar:mlvar&gt;78&lt;/xar:mlvar&gt;
                &lt;xar:mlvar&gt;120&lt;/xar:mlvar&gt;
              &lt;/xar:ml&gt;

              Same as first example, but with the &lt;xar:mlstring&gt; form.
            </artwork>
            </t>
          </section>
          <section title="Context">
            <t>Parent tag: none.</t>
            <t>Child tags:
              <t><xref target="mlkey">&lt;xar:mlkey /&gt;</xref>,</t>
              <t><xref target="mlstring">&lt;xar:mlstring /&gt;</xref>,</t>
              <t><xref target="mlvar">&lt;xar:mlvar /&gt;</xref>, (optional)</t>
            </t>
          </section>
        </section>
        <!-- xar:mlkey -->
        <section anchor="mlkey" title="&lt;xar:mlkey /&gt;">
          <t>
            <xref target="mlkey">&lt;xar:mlkey&gt;</xref> retrieves a
            multilanguage string based on the database key contained
            in the tag. If the resulting string does not use
            placeholders, mlkey may be used alone. Otherwise, mlkey
            must have <xref target="ml">&lt;xar:ml /&gt;</xref> as a
            parent tag, with <xref target="mlvar">&lt;xar:mlvar
            /&gt;</xref> tags as siblings. See <xref
            target="ml">&lt;xar:ml /&gt;</xref> for syntax examples
            using placeholders.
          </t>
          <section title="Forms">
            <t>Only block form is allowed</t>
          </section>
          <section title="Attributes">
            <t>
              <list>
                <t><em>[id]</em>
                  <t>an identifier for the tag</t>
                </t>
              </list>
            </t>
          </section>
          <section title="Syntax examples">
            <t>
            <artwork>
              &lt;xar:mlkey&gt;LOGIN&lt;/xar:mlkey&gt;

              Retrieves the 'LOGIN' key in the appropriate language and puts its
              contents in the current context.
            </artwork>
            </t>
          </section>
          <section title="Context">
            <t>Parent tag:
             <t><xref target="ml">&lt;xar:ml /&gt;</xref> (optional).</t>
            </t>
            <t>Child tags: none</t>
          </section>
        </section>
        <!-- xar:mlstring -->
        <section anchor="mlstring" title="&lt;xar:mlstring /&gt;">
          <t>
            &lt;xar:mlstring&gt; processes a multilanguage string. It
            first finds the string in the db and, based on the
            string's key, returns the corresponding string in the
            current locale. If the resulting string does not use
            placeholders, mlstring may be used alone. Otherwise,
            mlstring must have <xref target="ml">&lt;xar:ml
            /&gt;</xref> as a parent tag, with <xref
            target="mlvar">&lt;xar:mlvar /&gt;</xref> tags as
            siblings. See <xref target="ml">&lt;xar:ml /&gt;</xref>
            for syntax examples using placeholders.
          </t>
          <section title="Forms">
            <t>Only block form is allowed</t>
          </section>
          <section title="Attributes">
            <t>
              <list>
                <t><em>[id]></em>
                  <t>an identifier for the tag (optional)</t>
                </t>
              </list>
            </t>
          </section>
          <section title="Syntax examples">
            <t>
            <artwork>
              &lt;xar:mlstring&gt;Remember Me&lt;/xar:mlstring&gt;

              The string 'Remember Me' is looked up and translated
              into the appropriate language.
            </artwork>
            </t>
          </section>
          <section title="Context">
            <t>Parent tag:
              <t><xref target="ml">&lt;xar:ml /&gt;</xref> (optional).</t>
            </t>
            <t>Child tags: none</t>
          </section>
        </section>
        <!-- xar:mlvar -->
        <section anchor="mlvar" title="&lt;xar:mlvar /&gt;">
          <t>
            Contains a string passed to an accompanying <xref
            target="mlkey">&lt;xar:mlkey /&gt;</xref> or <xref
            target="mlstring">&lt;xar:mlstring /&gt;</xref> to occupy
            a place holder.
          </t>
          <section title="Forms">
            <t>Only block form is allowed</t>
          </section>
          <section title="Attributes">
            <t>
              <list>
                <t><em>[id]</em>
                  <t>an identifier for the tag</t>
                </t>
              </list>
            </t>
          </section>
          <section title="Syntax examples">
            <t>
              See <xref target="ml">&lt;xar:ml /&gt;</xref> for
              syntax examples using placeholders.
            </t>
          </section>
          <section title="Context">
            <t>Parent tag:
              <t><xref target="ml">&lt;xar:ml /&gt;</xref></t>
            </t>
            <t>Child tags: none</t>
          </section>
        </section>
        <!-- xar:module -->
        <section anchor="module" title="&lt;xar:module /&gt;">
          <t>
            The module tag produces output generated by a module.
            When the 'main' attribute is true, this tag acts as a placeholder for
            the output of the main module function, and the module
            gets all variables needed directly from the core. The main
            module function itself is at this moment executed by the core
            *before* template loading.
          </t>
          <t>
            On the other hand, if a module and optional other
            attributes are specified, this tag will call the
            corresponding module function during the template loading,
            and insert its output here.
          </t>
          <section title="Forms">
            <t>Only empty form is allowed</t>
          </section>
          <section title="Attributes">
            <t>
              <list >
                <t><em>[id]</em>
                  <t>an identifier for the tag</t>
                </t>
                <t><em>main</em> {true|false}
                  <t>Boolean specifying whether this is for the main module output or not.
                    The attribute is required, but the actual value isn't used. See below.
                  </t>
                  <t>Note: this attribute is likely to be deprecated, because it is redundant,
                    the presence / absence of the module attribute is enough to decided whether
                    the default module should be used or not. At this point, the 'main' attribute
                    is required, but the code actually checks the presence of the 'module'
                    attribute to decide what to do. If this attribute is not specified the rest of
                    the attributes is ignored, and the main module output is used.
                  </t>
                </t>
                <t><em>[module]</em>
                  <t>Name of the module to call, if it is not the main module.</t>
                </t>
                <t><em>[type]</em> (user)
                  <t>The type of function to call, if this attribute isn't specified the value
                    defaults to 'user'
                  </t>
                </t>
                <t><em>[func]</em> (main)
                  <t>Name of the function to call. The value defaults to 'main' if not
                    specified.
                  </t>
                </t>
                <t><em>[args]</em>
                  <t>array of arguments to pass to the function, or</t>
                </t>
                <t><em>[any other attribute]</em>
                  <t>Individual arguments to pass to the function. This means if you specify
                    param="4", test="yes", the attributes are translated by blocklayout into an
                    argument array and passed to the function. In this example:
                    <artwork>
                      array('param' => '4', 'test' => 'yes)
                    </artwork>
                    would be passed to the function
                  </t>
                </t>
              </list>
            </t>
          </section>
          <section title="Syntax examples">
            <t>
            <artwork>
              &lt;xar:module main="true" /&gt;

              Main module output will be used (not because main="true" but because module isn't specified.

              &lt;xar:module main="false" module="polls" /&gt;

              The 'main' function from the 'polls' module will be called from the 'user' part of the module

              &lt;xar:module main="false" module="$mymodule" type="user" func="$func" args="$args" /&gt;

              The value of $func, $mymodule and $args will be used to determine the module to use, which
              function to call and which arguments to pass. The function is looked up in the 'user' section
              of the module. Note that the 'type' attribute in this case is redundant.

              &lt;xar:module main="false" module="articles" type="user" func="view" ptid="1" numitems="10" startnum="$startnum" /&gt;

              From the 'articles' module, the 'user' 'view' function is called, with parameters ptid,numitems and startnum
            </artwork>
            </t>
          </section>
          <section title="Context">
            <t>Parent tag: none.</t>
            <t>Child tags: none</t>
          </section>
        </section>
        <!-- xar:sec -->
        <section anchor="sec" title="&lt;xar:sec /&gt;">
          <t>
            &lt;xar:sec&gt; translates directly to a call to
            xarSecurityCheck(), and is treated like an 'if'
            clause. <xref target="else">&lt;xar:else /&gt;</xref> and
            <xref target="elseif">&lt;xar:elseif /&gt;</xref> tags may
            be attached as for an <xref target="if">&lt;xar:if
            /&gt;</xref>.
          </t>
          <section title="Forms">
            <t>Only block form is allowed</t>
          </section>
          <section title="Attributes">
            <t>
              <list>
                <t><em>[id]</em>
                  <t>an identifier for the tag</t>
                </t>
                <t><em>mask</em>
                  <t>The mask for which to check the privileges. This is a required
                    attribute. Refer to RFC-0030 for the full details on the
                    security system.
                  </t>
                </t>
                <t><em>[catch]</em> ({(true)|false}
                  <t>Sometimes it may be necessary to check for a certain security
                    privilege, but not raise an exception if the privileg check
                    fails. In those cases, specify catch="false" and no exception will
                    be raised. By default, if a security check fails, an exception will
                    be raised.
                  </t>
                </t>
                <t><em>[component]</em>
                  <t>For which component will the security check be done? Defaults to empty.</t>
                </t>
                <t><em>[instance]</em>
                  <t>For which instance will this check be made? Defaults to empty</t>
                </t>
              </list>
            </t>
          </section>
          <section title="Syntax examples">
            <t>
            <artwork>
            &lt;xar:sec id="unique1" mask="EditCategories" catch="false" component="mycomponent" &gt;
              &lt;p&gt;You are granted access&lt;/p&gt;
            &lt;xar:else/&gt;
                &lt;p&gt;Sorry, no can do &lt;/p&gt;
            &lt;/xar:sec&gt;

            Checks for the 'EditCategories' mask on 'mycomponent'. If the check fails (no privilege)
            no exception is raised but the text 'Sorry, no can do' is added to the output.
            </artwork>
            </t>
          </section>
          <section title="Context">
            <t>Parent tag: none.</t>
            <t>Child tags:
              <t><xref target="else">&lt;xar:else /&gt;</xref></t>
              <t><xref target="elseif">&lt;xar:elseif /&gt;</xref></t>
            </t>
          </section>
        </section>
        <!-- xar:set -->
        <section anchor="set" title="&lt;xar:set /&gt;">
          <t>
            Causes the variable identified by the 'name' attribute to
            be set to the value of the tag's body. The variable must
            be available in the scope of the tag.  Values set this way
            do not persist beyond the current page load.
          </t>
          <t>
            Note: &lt;xar:set&gt; is a bit of a problem child. It is the
            most vulnerable tag we have, security wise. As the base compilation
            translates this tag into something like: " echo .....", with some
            work it's easily abused as a php-scripter tag in our current setup.
          </t>
          <section title="Forms">
            <t>Only block form is allowed</t>
          </section>
          <section title="Attributes">
            <t>
              <list>
                <t><em>[id]</em>
                  <t>An identifier for the tag</t>
                </t>
                <t><em>name</em>
                  <t>The name of the variable to be set</t>
                </t>
                <t><em>[scope]</em> {module|block|theme}
                  <t>Note: this attribute is not implemented</t>
                </t>
              </list>
            </t>
          </section>
          <section title="Syntax examples">
            <t>
            <artwork>
              &lt;xar:set name="$foo"&gt;'bar'&lt;/xar:set&gt;

              Sets the value of variable $foo to 'bar'
            </artwork>
            </t>
          </section>
          <section title="Context">
            <t>Parent tag: none.</t>
            <t>Child tags: none</t>
          </section>
        </section>
        <!-- xar:template -->
        <section anchor="template" title="&lt;xar:template /&gt;">
          <t>
            Opens the file specified by the 'file' attribute and
            processes it within the context of the calling
            template. Included templates are stored in:
            <list>
              <t>/modules/[module name]/xartemplates/includes/</t>
              <t>/themes/[theme name]/modules/[module name]/includes/</t>
              <t>/themes/[theme name]/includes/</t>
            </list>
          </t>
          <t>
            The 'file' attribute determines the basename of the file to
            be included, the extension will be filled in by xaraya whether
            the template is included from an internal source or an overridden
            location in the theme.
          </t>
          <t>
            The 'module' attribute defines which module the template file is located in, 
            in conjunction with the 'type' attribute as described below. If this attribute 
            is omitted the module where the tag resides is assumed.
          </t>
          <t>
            The 'type' attribute tells the compiler where to look for
            the file. If the value is 'module', the template to be included
            belongs to the module and Xaraya looks in (in this order):
            <list style="numbers">
              <t>/themes/[themename]/modules/[module name]/includes/file.xt</t>
              <t>/modules/[module name]/xartemplates/includes/file.xd</t>
            </list>
          </t>
          <t>
            If the value is 'theme', Xaraya uses the following locations:
            <list style="numbers">
              <t>/themes/[themename]/includes/file.xt</t>
            </list>
          </t>
          <t>
            If the value is 'system', the file attribute is interpreted as a 
            relative location to the containing filename. These so called 'system'
            includes are formally not part of the 'module-space' or 'theme-space' 
            and as such cannot be overridden. This tag is used to guarantee that 
            the template contents is used regardless of the theme being used, 
            unless the theme overrides the container template which does away 
            with the xar:template tag in the overridden template.
           </t>
          <section title="Forms">
            <t>Only the empty form is allowed</t>
          </section>
          <section title="Attributes">
            <t>
              <list>
                <t><em>[id]</em>
                  <t>An identifier for the tag</t>
                </t>
                <t><em>file</em>
                  <t>the basename of the file to include.</t>
                </t>
                <t><em>[module]</em>
                  <t>module where the file resides.</t>
                </t>
                <t><em>[type]</em> {(module)|theme|system}
                  <t>A string which tells Xaraya what kind of template to include.
                    If mainly affects the locations where Xaraya looks for the file.
                  </t>
                </t>
                <t><em>[subdata]</em> (container data array)
                  <t>
                    This allows to pass in an array with data which should be known in
                    the included template. When this attribut <em>is not</em> specified the included
                    template will inherit the data known to the parent template.
                  </t>
                  <t>
                    When the subdata attribute <em>is</em> specified, only the data in the array
                    designated by subdata will be known by the included template. This is the only
                    way to shield data from an included template (to prevent variable collisions for
                    example). If you want the included template to know about the parent template
                    variables, use xar:set of pass them in from the code.
                  </t>
                </t>
              </list>
            </t>
          </section>
          <section title="Syntax examples">
            <t>
            <artwork>
              &lt;xar:template file="top_links" type="theme"/&gt;

              Looks for file /theme/[themename]/includes/top_links.xt and includes
              it in the current template.

              &lt;xar:template file="top_links" /&gt;

              Looks for file /themes/[themename]/modules/[module name]/includes/top_links.xt
              and, when found, uses it. If not found it looks for
              /modules/[module name]/xartemplates/includes/top_links.xd and uses that file

              &lt;xar:template file="top_links" module="categories" type="module" /&gt;

              Looks for file /modules/categories/xartemplates/includes/top_links.xd.
              
              &lt;xar:template file="signals/alert.xml" type="system" /&gt;
              
              Looks for a file 'alert.xml' in the directory 'signals' below the location
              of the containing template.              
            </artwork>
            </t>
          </section>
          <section title="Context">
            <t>Parent tag: none.</t>
            <t>Child tags: none</t>
          </section>
        </section>
        <!-- xar:var -->
        <section anchor="var" title="&lt;xar:var /&gt;">
          <t>
            &lt;xar:var&gt; deals with variables in different scopes. If no scope is
            specified, Blocklayout returns the contents of the local variable.
          </t>
          <t>
            Variables are referenced by name, without the preceeding "$". Arrays
            can be indexed via dot notation, i.e.:
            <artwork>
              &lt;xar:var name="preformat.catandtitle" /&gt;
            </artwork>
          </t>
          <t>
            The 'scope' attribute value has the following effect:
            <list style="symbols">
              <t><em>local</em>: use the local scope of the template to get the variable;</t>
              <t><em>config</em>: get the configuration variable with the specified name;</t>
              <t><em>module</em>: get the module variable with the specified name;</t>
              <t><em>block</em>: not implemented</t>
              <t><em>theme</em> : get the theme variable with the specified name;</t>
              <t><em>user</em>  : get the user variable with the specified name;</t>
              <t><em>session</em> : get the session variable with the specified naem;</t>
            </list>
          </t>
          <t>
            The value of the 'scope' attribute does reasonably straighforward determine the
            function which Xaraya uses to get the right variable
          </t>
          <section title="Forms">
            <t>Only empty form is allowed</t>
          </section>
          <section title="Attributes">
            <t>
              <list>
                <t><em>[id]</em>
                  <t>An identifier for the tag</t>
                </t>
                <t><em>[scope]</em> {(local)|config|module|block|theme|user}
                  <t>What kind of variable should we retrieve</t>
                </t>
                <t><em>[prep]</em> {(false)|true}
                  <t>If the prep attribute has the value 'true' the contents of
                    the variable are prepared for displaying. Normally it is the 
                    responsibility of the developer to supply reasonable values to
                    a template and preparing them if necessary. This attribute gives
                    the theme designer an option to use this tag to explicitly prepare 
                    values for displaying. The attribute is optional and defaults to false.
                   </t>
                </t>
                <t><em>name</em>
                  <t>String specifying the name of the variable to retrieve within
                    the given scope
                  </t>
                </t>
                <t><em>module</em>
                  <t>String specifying the modulename to get the variable from; this is only
                    applicable when scope is module. Otherwise the value is ignored.
                    the given scope
                  </t>
                </t>
              </list>
            </t>
          </section>
          <section title="Syntax examples">
            <t>
            <artwork>
              &lt;xar:var name="preformat.catandtitle" /&gt;

              Retrieves the local variable $preformat['catandtitle']
            </artwork>
            </t>
          </section>
          <section title="Context">
            <t>Parent tag: none.</t>
            <t>Child tags: none</t>
          </section>
        </section>
        <!-- xar:while -->
        <section anchor="while" title="&lt;xar:while /&gt;">
          <t>
            Contains template data evaluated while the expression
            specified in the 'condition' attribute is true.
          </t>
          <section title="Forms">
            <t>Only block form is allowed</t>
          </section>
          <section title="Attributes">
            <t>
              <list>
                <t><em>[id]</em>
                  <t>An identifier for the tag</t>
                </t>
                <t><em>condition</em>
                  <t>PHP expression evaluating to true or false. During the while
                    loop this expression is evaluated each time at the start of the
                    loop and while the value is true, the child tags are added to the
                    output repeatedly. For comparison operators see the
                    <xref target="tagdescriptions">Note on logic tags</xref>
                  </t>
                </t>
              </list>
            </t>
          </section>
          <section title="Syntax examples">
            <t>
            <artwork>
              &lt;xar:while condition="list($uid, $uname) = each($user_result)"&gt;
                // stuff executing as long a the expression is true
              &lt;/xar:while&gt;
            </artwork>
            </t>
          </section>
          <section title="Context">
            <t>Parent tag: none.</t>
            <t>Child tags:
              <t><xref target="break">&lt;xar:break&gt;</xref> (optional)</t>
              <t><xref target="break">&lt;xar:continue&gt;</xref> (optional).</t>
            </t>
          </section>
        </section>
      </section>
    </section>
    <section title="Tags Interdependence">
      <t>Logical Tags:
        <list style="symbols">
          <t><xref target="for">&lt;xar:for /&gt;</xref></t>
          <t><xref target="foreach">&lt;xar:foreach /&gt;</xref></t>
          <t><xref target="if">&lt;xar:if /&gt;</xref></t>
          <t><xref target="loop">&lt;xar:loop /&gt;</xref></t>
          <t><xref target="while">&lt;xar:while /&gt;</xref></t>
        </list>
      </t>
      <t>Value Returning Tags (isAssignable()):
        <list style="symbols">
          <t><xref target="block">&lt;xar:block /&gt;</xref></t>
          <t><xref target="blockgroup">&lt;xar:blockgroup /&gt;</xref></t>
          <t><xref target="ml">&lt;xar:ml /&gt;</xref></t>
          <t><xref target="mlkey">&lt;xar:mlkey /&gt;</xref>(can also be used as a child tag, see <xref target="ml">&lt;xar:ml /&gt;</xref>)</t>
          <t><xref target="mlstring">&lt;xar:mlstring /&gt;</xref> (can also be used as a child tag, see <xref target="ml">&lt;xar:ml /&gt;</xref>)</t>
          <t><xref target="ml">&lt;xar:module /&gt;</xref></t>
          <t><xref target="sec">&lt;xar:sec /&gt;</xref></t>
          <t><xref target="module">&lt;xar:module /&gt;</xref></t>
          <t><xref target="template">&lt;xar:template /&gt;</xref></t>
          <t><xref target="var">&lt;xar:var /&gt;</xref></t>
        </list>
            </t>
      <t>Child only tags:
        <list style="symbols">
          <t><xref target="else">&lt;xar:else /&gt;</xref></t>
          <t><xref target="elseif">&lt;xar:elseif /&gt;</xref></t>
          <t><xref target="break">&lt;xar:break /&gt;</xref></t>
          <t><xref target="continue">&lt;xar:continue /&gt;</xref></t>
          <t><xref target="mlvar">&lt;xar:mlvar /&gt;</xref></t>
        </list>
      </t>
      <t>Variable Value Setting (needParameter()):
        <list style="symbols">
          <t><xref target="set">&lt;xar:set /&gt;</xref></t>
        </list>
      </t>
    </section>
    <section anchor="ddproperties" title="Dynamic Data Property Templates">
      <t>
        Dynamic Data Properties can also provide templated output. It is a simple process to make the required changes to the data property itself, and supply appropriately named templates.
      </t>
      <t>At the present time the <em>showInput()</em> and <em>showOutput()</em> functions of each dynamic property may return data to a corresponding template in the modules/dynamicdata/xartemplate directory.
      </t>
      <t>
        The directory structure and changes required for dynamic data property templates are illustrated below. The <em>propertyname</em> used for the specific template name is taken from the corresponding property array in the GetPropertyTypes() function in the modules/dynamicdata/class/properties.php file.
    <artwork><![CDATA[
html/
    |-- modules/
    |       dynamicdata/
    |           xartemplates/
    |               <admin-showinput|user-showoutput>[-<propertyname>].xd
    |
    |-- includes/
    |       properties/
    |           Dynamic_<propertydescription>_property.php
    |
    |-- themes/
            <theme name>/
            |-- modules/
                    dynamicdata/
                        <admin-showinput|user-showoutput>[-<propertyname>].xt

      ]]></artwork>
      </t>
      <t>Details of specific tags used to retrieve and display dynamic property data within module templates is documented in RFC0007 Modularized Data. Further details on retrieval and display of dynamic property data can be found in the overview and templates (as comments) of the Dyn_Example module.
      </t>
    </section>

    <section title="Notes">
      <t>
        Blocklayout output is not restricted to HTML. Potential output formats
        include HTML, RSS, and RDF.
      </t>
    </section>
    <section title="Tag registration">
      <t>
        Each module may expand the list of available tags as necessary. For
        example, the Reviews module may define &lt;xar:reviews-review /&gt;. Modules
        must register their tags with the system in order for the compiler to
        recognize them. Tag registration is best handled by a module's init()
        function. Removing tags from the system (unregistration) is best
        performed in the module's remove() function.
        <artwork>
          xarTplRegisterTag('module_name', 'tag_name', tag_object, 'handler_func_name');
          xarTplUnregisterTag('tag_name');
        </artwork>
      </t>
      <t>
        Non-core tags must adhere to some simple naming conventions. This is
        to prevent conflicts between modules that implement different tags
        with the same name. A non-core tag must be prefixed by a module
        identifier (the name of the module, or another string assigned during
        the module certification process), a hyphen, and a string which
        loosely described the tags purpose. Tag names must begin with a
        letter.
      </t>
      <t>Example:
        <artwork>
          xarTplRegisterTag('reviews', 'reviews-review', ...);
        </artwork>
      </t>
      <t>This would register the tag:
        <artwork>
          &lt;xar:reviews-review/&gt;
        </artwork>
      </t>
      <t>
        Remember, "xar" is the namespace, and is not part of the tag
        name, even though blocklayout requires the namespace identifier to be
        present in every tag.
      </t>
    </section>
  </middle>
  <back>
    <section title="Future features">
      <t>
        Widgets: This feature will abstract common User Interface components
        into templatable tags.  The goal of such a feature is to give common
        components a consistent look and feel and cut down on code duplication
        while also making these features easy to use.
      </t>
      <t>
        Because widgets are meant for common usage, it is good practice for
        their output to take on a consistent appearance.  This makes for an
        easier and more pleasant user experience, and assures some level of
        consistency within a theme.
      </t>
      <t>
        Widgets will have certain constraints on their design, such as:
        <list style="numbers">
          <t>must generate a common piece of markup</t>
          <t>must be theoretically useable across modules</t>
          <t>must implement only a single template</t>
          <t>must present a point of interaction between the user and Xaraya, and/or</t>
          <t>must present markup that allows standard data to be returned to xaraya</t>
        </list>
            </t>
      <t>
        Dynamic Style Sheets: This feature would use server-side browser
        sniffing to identify what CSS classes &amp; attributes a given module can
        render (reasonably) correctly. Based on the result, either a &lt;style&gt;
        or &lt;link&gt; tag to the css would be output. The tag would reference a
        php script (css.php) which would actually generate the style sheet
        from database records.
      </t>
      <t>
        Theme Management: Blocklayout will necessitate the creation of
        administration tools to manage themes. These would include a template
        manager, theme variable manager, and possibly a theme
        installer/uninstaller (similar to what modules have).
      </t>
      <t>
        Multi-module layouts: This feature would allow Xaraya to display
        output from more than one module during a page request. Major core
        changes are required; hooks may provide some insight into how to
        implement this feature. At the moment, simple multi-module layouts
        are possible via the xar:module tag.
      </t>
      <t>
        The help system will add a new widget:
        <artwork>
          &lt;xar:help /&gt; (scheduled beyond 1.0)
        </artwork>
            </t>
    </section>
  </back>
</rfc>
