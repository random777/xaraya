-- 
-- Recommended settings for monotone for Xaraya committers
--
-- Explanation:
-- This file contains some definitions and hooks which will 
-- probably grow over time. Monotone uses a set of default
-- hooks which are predefined and may not always be suitable
--
-- A so called rcfile can live in 3 places:
-- 1. $HOME/.monotone/monotonerc
-- 2. <workdir>/MT/monotonerc
-- 3. specified on commandline as --rcfile=<file> or --rcfle=<directory>
--
-- The places 1. and 2. are checked automatically by monotone where
-- settings in 2. override settings in 1. (repo specific vs. global)
-- The --rcfile open overrides the settings in the automatic places; if 
-- you specify a directory after --rcfile, all files contained in that
-- directory will load
--
-- This file focusses on settings and hooks for the Xaraya project and
-- the obvious location would be <workdir>/MT/monotonerc if you use 
-- monotone for projects other than Xaraya and you dont want to have
-- the settings applied to those other projects, or $HOME/.monotone/monotonerc
-- if you want the settings in this file to be applicable for all your
-- projects.
--
-- All settings will be documented inline as much as needed to explain what
-- their effect will be. We only include settings and hooks which differ
-- from the default hooks which monotone predefines.
--
--

--
-- Return my pass when i use my id
-- This is probably the most important hook to have defined
-- replace <yourid> with your monotone key id (usually your xaraya email)
-- and replace <yourpassphrase> with the passphrase you entered when creating
-- your key.
function get_passphrase(identity)
   if (identity == "<yourid>") then return "<yourpassphrase>" end
end

--
-- Inode cache
--
-- For all monotone commands which need to inspect your working copy this
-- setting (should) speed up those operations, at the expense of a (small)
-- chance of getting some file states wrong. If you are a little paranoid
-- and find monotone's speed increase not worth the risk, either delete
-- the whole function, or return false from it.
function use_inodeprints()
   return true
end

-- This hook gets called just before writing a commit
-- changelog entry.
-- What we do here is massage the status text generated
-- by monotone to generate a gnu like Changelog entry as
-- best as we can
function edit_comment(basetext, existinglog)
   local exe = "vi"
   local visual = os.getenv("VISUAL")
   if (visual ~= nil) then exe = visual end
   local editor = os.getenv("EDITOR")
   if (editor ~= nil) then exe = editor end

   -- Write the initial contents to temporary file
   local tmp, tname = temp_file()
   if (tmp == nil) then return nil end

   -- Parse the basetext a bit (this takes a status message and produces a changelog
   -- compatible list of * file: whathappenedto it
   generatedlog = parse_statusmsg(basetext)

   -- Construct the log
   tmp:write("\n")
   tmp:write(generatedlog)
   tmp:write(existinglog)
   local notes = [[
MT: ----------------------------------------------
MT: Above is what has been parsed as changelog from 
MT: the status of your working dir.
MT: Augment them you see fit. Write the revision comment
MT: on the first line(s) and per file comments on the next.
MT: Lines starting with MT: will automatically be
MT: removed]]
   tmp:write(notes)
   io.close(tmp)

   -- Remove the temporary file  if execution did not return 0
   if (execute(exe, tname) ~= 0) then
      os.remove(tname)
      return nil
   end

   -- Read it back in and remove all MT: lines
   tmp = io.open(tname, "r")
   if (tmp == nil) then os.remove(tname); return nil end
   local res = ""
   local line = tmp:read() -- eat the first line (WATCH OUT FOR THIS)
   while(line ~= nil) do 
      if (not string.find(line, "^MT:")) then
         res = res .. line .. "\n"
      end
      line = tmp:read()
   end
   io.close(tmp)
   os.remove(tname)

   -- Return the string to be further processed by monotone (as in put into a certificate)
   return res
end

function parse_statusmsg(msg)
   -- Go over the lines and massage it so it comes very close to what 
   -- we want to enter as a comment anyway
   local pattern = "([^\n]-)\n" -- shortest thing before the newline
   local lines = {}
   local rename_string = nil
   local parsed = ""

   for line in string.gfind(msg, pattern) do 
      -- Handle renames
      _,_,file = string.find(line,'^rename_file "(.-)"') -- which file?
      if(file~=nil) then 
         rename_string = ": renamed ("..file..")" 
      end
      _,_,file = string.find(line,'^%s+to "(.-)"') -- to what?
      if(file~=nil and rename_string~=nil) then
         table.insert(lines,"\t* "..file..rename_string)
         rename_string = nil
      end
      -- Handle new files
      _,_,file = string.find(line,'^add_file "(.-)"')
      if(file~=nil) then 
         table.insert(lines,"\t* "..file..": new file") 
      end
      -- Handle dropped files
      _,_,file = string.find(line,'^delete_file "(.-)"')
      if(file~=nil) then
         table.insert(lines,"\t* "..file..": dropped")
      end
      
      -- Handle changed files
      _,_,file = string.find(line,'^patch "(.-)"')
      if(file~=nil) then neworadded = file end
      
      -- Based on the from line, only add changed stuff
      i,_,oldrev = string.find(line,"^%s+from %[([%a%d]+)%]")
      if(oldrev~=nil and neworadded~=nil ) then
         table.insert(lines,"\t* "..neworadded..": ...")
         neworadded = nil
      end
   end
   for index, line in pairs(lines) do  parsed = parsed .. line .. "\n" end
   
   return parsed
end


--
-- This hook runs just after revision id revid has been committed
-- After the revision has been committed, we parse the changelog and
-- comment certificates for mentioning of bugs. If found, the user
-- is asked if they want to create certificates for them
-- NOTE: this hook spawns the monotone executable inside a lua hook
-- and assumes that monotone(.exe) exists on the path.
-- While it is a bit risky to call monotone itself in a hook, this
-- hook runs *after* a revision has been committed, so i think it's OK here.
function note_commit(revid, status_text, certs)
   -- Gather the info needed
   -- table with bug numbers
   bugs = extractbugs(certs)
   local buglist = ""
   for bug, there in pairs(bugs) do 
      if(buglist ~= "") then buglist = buglist .. ", " end
      buglist = buglist .. bug
   end
   if(buglist ~= "") then 
      print("----------------------------------")
      print(string.format("Mentioned bugs: %s",buglist))
      io.write("Link these bugs to revision? [Y/n]")
      response = io.read()
      if(response == "" or response=="y" or response=="Y") then
         print("Ok, creating certificates for them")
         for bug, there in pairs(bugs) do
            -- TODO: add some checking here?
            result,exitcode = execute("monotone","cert",revid,"bug",bug)
         end
      else
         print("Ok, skipping bug certificates")
      end
      print("----------------------------------")
   end
end

--
-- Extract a table of bugids mentioned in certs, 
--
function extractbugs(certs)
   local bugs = {} -- empty table for holding the bugs
   -- which certificates do we want to look in ?
   -- at this moment, only changelog is relevant. Other certs can only
   -- be created after a commit, so this function will never get called for
   -- those certificates ( I think :-) )
   local whichcerts = {
      changelog = true,
      comment   = true
   }
   -- A list of patterns to match in comments, when matched the bug number is recorded
   -- TODO: make this more intelligent
   local patterns = {                     
      "bug%s+[#]?(%d+)",                     -- basic 'bug 999' and 'bug #999' mention
      "bug[s]?.-[#]?(%d+)",                  -- 'bug[s]' and first number after that
      "bug[s]?.-[#]?%d+[,]?%s+.-[#]?(%d+)",  -- 'bug[s]' and second number after that
      "bug[s]?.-and%s+[#]?(%d+)"             -- 'bug[s]' and number preceded by 'and '
   }

   -- subfunction to actually make the number
   function  extractbugnumbers(value)
      for index, pattern in patterns do
         for w in string.gfind(string.lower(value), pattern) do  
            bugs[w] = true
         end
      end
   end

   -- Start main function
   if(type(certs) == "table") then
      for cert, value in pairs(certs) do
         -- Go over each cert
         if whichcerts[cert] then
            -- Configured to be parsed
            extractbugnumbers(value)
         end
      end
   end
   return bugs
end
