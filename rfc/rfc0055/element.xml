<?xml version="1.0" encoding="UTF-8"?>
<section xmlns:ed="http://greenbytes.de/2002/rfcedit"  anchor="element" title="&lt;xar:element /&gt;">
  <t>
    Generates a named xml element in the output stream.
  </t>
  <t>
    Generating dynamic tags in output has always been a special trick of the trade.
    Since xml uses &lt; and &gt; as special characters, you can not just surround
    some variable containing the tag name with those characters and expect it 
    to work. (i.e. &lt;$the_tagname /&gt; is invalid, so you'd have to revert to
    &amp;lt;$the_tagname /&amp;gt; to produce the desired effect.) For obvious
    reasons, that is less than ideal.
  </t>
  <t>
    The xar:element tag tries to solve problems similar to the above situation. 
    By specifiying what should be generated in the output stream 
    (not unlike the xsl:element tag in XSLT) in a dedicated tag, we capture 
    the semantics of the intent in a structured and valid syntax, which not only
    makes the source easier to undertand, but parsing the xml will be easier too.
  </t>
  <t>
    This element is often used with the xar:attribute tag, which creates attributes
    in the active parent element. Using the two together allows for arbitray
    xml construction in the output where staticly specifying the structure is not
    an option. See the section on the xar:attribute for its specific syntax and uses.
  </t>
  <section title="Attributes">
    <t>
      <list>
        <t>
          <spanx style="strong" >name</spanx>
          <t>Required attribute to name the element to be created</t>
          <t>
            The attribute may have a namespace prefix in the usual way to 
            create namespace specific tags.
          </t>
          <ed:issue name="need for namespace attribute in xar:element tag" status="open" type="correctness">
            ideally we should use the URI of the wished for namespace in
            an attribute and let the compiler figure out what prefix to generate
          </ed:issue>
        </t>
        
      </list>
    </t>
  </section>
  <section title="Syntax examples">
    <t>
      <artwork><![CDATA[
        <xar:element name="custom"/>
          Produces: <custom />
          
        <xar:element name="custom">
            Contains child content
        </xar:element>
          Produces:
            <custom>
              Contains child content
            </custom>
              
        ]]>
      </artwork>
    </t>
  </section>
</section>
