<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xsl"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">
<!-- <?rfc private='my private memo'?>  Produce a private memo rather than a Xaraya-standard -->
<?rfc toc="yes"?>
<rfc number="0018" category="info">
    <front>
        <title>Exception Handling System</title>
        <author initials="M." surname="Canini" fullname="Marco Canini">
            <organization>Xaraya Development Group</organization>
            <address>
                <email>unknown</email>
                <uri>http://www.xaraya.com</uri>
            </address>
        </author>
        <date month="May" year="2002"/>
        <!-- The abstract summarizes in one or two paragraphs the content of the RFC -->
        <abstract>
            <t>This document describes the Exception Handling System technology, an artificial exceptions handling  
            mechanism built on top of the PHP language. This document is constantly subject to revisions. This isn't 
            the final version of the document.
                   </t>
        </abstract>
    </front>
    <!-- The middle section is used for the actual content of the RFC -->
    <middle>
        <!-- One content section is mandatory -->
        <section title=" Introduction">
            <t>
            Since the PHP language does not provide native exception handling support (as of writing), we need to 
            create an artificial layer to handle them. The way this document proposes to achieve this goal is closely 
            inspired at the way used by CORBA in the C language mapping. 
            In the case of CORBA the C language mapping imposes that every IDL method accept as last parameter a 
            CORBA_Environment type. We can avoid to use a CORBA_Environment-like parameter for all functions, 
            thanks to, firstly, the non-strongly-typed return values we have in PHP, and secondly, the single threaded 
            policy we adopted in Xaraya.
                    </t>
        </section>
        <section title="Handling exceptions">
            <t>
            Here we introduce the following terminology:
            </t>
            <t>
                <list>
                    <t>
                Caller is the piece of code that call a function.
                </t>
                    <t>
                Called is the piece of code that used by Caller can raise exceptions.
                </t>
                </list>
            </t>
            <t>
            Callers can notice of exceptions firstly by checking the called function return value and secondly by 
            calling the xarCurrentErrorType function.
            </t>
            <t>
            The Xaraya Exception Handling System provides useful functions to deal with exceptions. Their 
            signatures are: 
            </t>
            <t>
            void xarExceptionSet($major, $exception_id, $param = NULL); integer xarCurrentErrorType(); string 
            xarExceptionId(); object xarExceptionValue(); void xarExceptionFree();
                    </t>
            <section title="xarCurrentErrorType">
                <t>
            xarCurrentErrorType allows the caller to establish whether an exception was raised, and to get the type of
            raised exception. The major XAR_NO_EXCEPTION identifies the state in which no exception was raised.
                    </t>
            </section>
            <section title="xarExceptionSet">
                <t>
            xarExceptionSet allows a function to raise an exception. The caller must supply a value for the major 
            parameter. The major parameter can have one of the values XAR_NO_EXCEPTION, XAR_USER_EXCEPTION, 
            or XAR_SYSTEM_EXCEPTION. The value of the major parameter constrains the other parameters in the call 
            as follows: 
            </t>
                <t>
            If the major parameter has the value XAR_NO_EXCEPTION, this is a normal outcome 
            </t>
                <t>
                    to the operation. In this case, both exception_id and param must be NULL.
                    Note that it is not necessary to invoke xarExceptionSet to indicate a normal
                    outcome; it is the default behavior if the method simply returns.
            </t>
                <t>
For any other value of major it specifies either a user-defined or system 
            </t>
                <t>
                    exception. The exception_id parameter is the ID representing the exception
                    type. If the exception is declared to have members, the param parameter must
                   be the exception struct (PHP class) containing the members.
                   If the exception has no members, param must be NULL.
                    </t>
            </section>
            <section title="xarExceptionMajor (Deprecated)">
                <t>
            Replaced with xarCurrentErrorType commencing in Version 0.9.8
                    </t>
            </section>
            <section title="xarExceptionId ">
                <t>
            xarExceptionId returns the string identifying the exception. The character string contains the ID for the 
            exception (its PHP class name). If invoked when no exception was raised a void value is returned.
                    </t>
            </section>
            <section title="xarExceptionValue">
                <t>
            xarExceptionValue returns an object corresponding to this exception. If invoked when no exception or an 
            exception for which there is no associated information was raised, a void value is returned.
                    </t>
            </section>
            <section title="xarExceptionFree">
                <t>
            xarExceptionFree makes a reset of current exception status, it's a shortcut for xarExceptionSet
            (XAR_NO_EXCEPTION, NULL, NULL). You must always call this function when you handle a catched 
            exception or equivalently you don't throw the exception back to the callers chain.
                    </t>
            </section>
            <section title="Usage of exception handling functions">
                <t>
            To get an overview on their usage consider the following example: 
            </t>
                <t>
                    <artwork>
class ?MyException { 
    var $msg;
} 
function ?MyModule_userapi_?MyFunc() { /* Called */ /* ... */ } 
?... 
/* Caller */ /* ... */ 
$res = xarModAPIFunc('?MyModule', 'user', '?MyFunc'); if (!isset($res) &amp;&amp; xarCurrentErrorType() != XAR_NO_EXCEPTION) { 
    // Got an exception
    switch (xarCurrentErrorType()) {
       case XAR_USER_EXCEPTION:
           if (xarExceptionId() == '?MyException') {
          $value = xarExceptionValue();
          die("Caught ?MyException, msg: ".$value-&gt;msg);
       }
       break;
       case XAR_SYSTEM_EXCEPTION:
           die("Caught system exception: ".xarExceptionId());
       break;
    }
} 
/* ... */
                     </artwork>
                </t>
            </section>
            <section title="Throw back mechanism">
                <t>
            An important thing to take care of is the throw back mechanism. Even if with this proposed solution there 
            is not a break in the program flow when an exception is raised, the Exceptions Handling System allows 
            you to apply the concept of throwing back an exception. And it's also very simple to do that, you've only 
            to return with a void value after you catch an exception. Consider the following example:
            </t>
                <t>
                    <artwork>
function foo() { 
    $res = xarModAPIFunc('?MyModule', 'user', '?MyFunc');
    if (!isset($res) &amp;&amp; xarCurrentErrorType() != XAR_NO_EXCEPTION) {
        // Got an exception, throw it back
        return;
    }
} 
function bar() { 
    $res = foo();
    if (!isset($res) &amp;&amp; xarCurrentErrorType() != XAR_NO_EXCEPTION) {
        // Got an exception
    // Real exception handling
        switch (xarCurrentErrorType()) {
           case XAR_USER_EXCEPTION:
               if (xarExceptionId() == '?MyException') {
              $value = xarExceptionValue();
              die("Caught ?MyException, msg: ".$value-&gt;msg);
               }
           break;
           case XAR_SYSTEM_EXCEPTION:
               die("Caught system exception: ".xarExceptionId());
           break;
        }
    }
} 
                                        </artwork>
                </t>
                <t>
As you can see in the above example we're delegating to another piece of code the real exception handling.
                    </t>
            </section>
        </section>
        <section title="Xaraya integration">
            <t>
            To best integrate the Exceptions Handling System into Xaraya we need to define a superset of well 
            known exceptions called System Exceptions and to make the Xaraya APIs compatible with Exceptions 
            Handling System. Modifications to APIs involve the usage of System Exceptions. To get an example of 
            what is a System Exception consider the case in which you're calling an API with a non existent user id. 
            In that case you're violating the Xaraya integrity, so it makes sense to raise an exception of type 
            ID_NOT_EXISTS internally in the API function. For another example you could recall the xarModAPIFunc 
            function. Its purpose is to call an API module function and returns the outcome value of the called API 
            module function. But what's happen if xarModAPIFunc can't call the function you've indicated. As you can 
            read in Xaraya API Command Reference, xarModAPIFunc will return false if the module function does 
            not exist or void for an internal error. By doing so xarModAPIFunc vincolates your module API functions to 
            never return void or false because the caller can't distinguish these values from an error condition in 
            xarModAPIFunc. In the other hand if xarModAPIFunc could raise exceptions your module API functions 
            could return false and void as well, since you're allowed to discover error conditions with the Exception 
            Handling System and not by relaying on return value. As you can see there are many advantages in 
            exceptions but we must keep the Xaraya API as backward compatible as possible. Consider also that 
            exceptions go well not for all error conditions, if you're doing that probably you're wrong. Boolean 
            functions go very well in many cases, and most of Xaraya API functions can indicate particular errors 
            with the false return value. Exceptions have to be used when there's a real needing of them, and not as a 
            replacement for the false return value. The changes that have to be done in Xaraya API must be 
            minimals, and relay only on System Exceptions.
                    </t>
            <section title="Xaraya System Exceptions">
                <t>
            The Exceptions Handling System need to be closely integrated with Xaraya. To achieve this goal the 
            well known System Exceptions take care of Xaraya architecture, so we will refer to them as Xaraya 
            System Exceptions. A system exception always contains as exception value a PHP class so defined:
            </t>
                <t>
                    <artwork>
class ?SystemException { 
    var $message;
} 
                        </artwork>
                </t>
                <t>
                   where the message member is a language-sensitive error message associated with the particular system 
                   exception. 
                    </t>
                <t>
                    Here is a list of Xaraya System Exceptions: 
                    </t>
                <t>
                    <list>
                        <t>
                      UNKNOWN: indicates that something (unknown) was wrong
                      </t>
                        <t>
                      ID_NOT_EXIST: indicates that the identifier you provided is associated with no
                      </t>
                        <t>
                            <list>
                                <t>
                      existing object
                      </t>
                            </list>
                        </t>
                    </list>
                </t>
                <t>
                    <list>
                        <t>
                    BAD_PARAM: indicates that you are passing a bad parameter
                    </t>
                        <t>
                    DATABASE_ERROR: indicates a database operation failure 
                    </t>
                        <t>
                    NO_PERMISSION: indicates that you don't have right permission to accede to a
                    </t>
                        <t>
                            <list>
                                <t>particular resource (note that system exception is not raised
                    from xarSecAuthAction API but from other functions in which
                    xarSecAuthAction is called)
                    </t>
                            </list>
                        </t>
                    </list>
                </t>
                <t>
                    <list>
                        <t>
                    MODULE_NOT_EXIST:
                    </t>
                        <t>
                    MODULE_FILE_NOT_EXIST:
                    </t>
                        <t>
                    MODULE_FUNC_NOT_EXIST:
                    </t>
                    </list>
                </t>
                <t>
                    TBD: extend this list
                    </t>
            </section>
            <section title="Xaraya API changes">
                <t>
            Here is a list of modifications that should occur on current version of Xaraya API. Every modification 
            exposed here is described by three fields: 
                    </t>
                <t>
                    <list>
                        <t>
                    api: the name of API function
                    </t>
                        <t>
                    changes: the modifications that will occur
                    </t>
                        <t>
                    exceptions: the exceptions that modified API function will raise (note that 
                     throwed back exceptions are excluded from this list)
                    </t>
                    </list>
                </t>
                <t>
                    api: xarConfigGetVar changes: no changes on return value, add code to raise exceptions exceptions:  
                    ID_NOT_EXIST, DATABASE_ERROR 
                    </t>
                <t>
                    api: xarConfigSetVar changes: change to return void on error, add code to raise exceptions exceptions: 
                    DATABASE_ERROR 
                    </t>
                <t>
                    api: xarConfigDelVar changes: to be done 
                    </t>
                <t>
                    api: xarDBGetConn changes: no changes 
                    </t>
                <t>
                    api: xarDBGetTables changes: no changes 
                    </t>
                <t>
                    api: xarVarCleanFromInput changes: no changes on return value, add code to raise exceptions 
                    exceptions: ID_NOT_EXIST 
                    </t>
                <t>
                    api: xarVarPrepForDisplay changes: no changes 
                    </t>
                <t>
                    api: xarVarPrepHTMLDisplay changes: no changes, add code to throw back exceptions 
                    </t>
                <t>
                    api: xarVarPrepForStore changes: no changes 
                    </t>
                <t>
                    api: xarVarPrepForOS changes: no changes 
                    </t>
                <t>
                    api: xarVarCensor changes: no changes, add code to throw back exceptions 
                    </t>
                <t>
                    api: xarVarValidate changes: no changes 
                    </t>
                <t>
                    api: xarGetBaseURI changes: no changes 
                    </t>
                <t>
                    api: xarGetBaseURL changes: no changes 
                    </t>
                <t>
                    api: xarRedirect changes: no changes 
                    </t>
                <t>
                    api: xarBlockShow changes: no changes, add code to throw back exceptions 
                    </t>
                <t>
                    api: xarBlockLoad changes: no changes, add code to throw back exceptions 
                    </t>
                <t>
                    api: xarBlockGetInfo changes: change to return void on error, add code to raise exceptions exceptions: 
                    DATABASE_ERROR 
                    </t>
                <t>
                    api: xarModGetVar changes: change to return void on error, add code to raise exceptions exceptions: 
                    DATABASE_ERROR, BAD_PARAM 
                    </t>
                <t>
                    api: xarModSetVar changes: change to return void on error, add code to raise exceptions exceptions: 
                    DATABASE_ERROR, BAD_PARAM 
                    </t>
                <t>
                    api: xarModDelVar changes: change to return void on error, add code to raise exceptions exceptions: 
                    DATABASE_ERROR, BAD_PARAM 
                    </t>
                <t>
                    api: xarModGetIDFromName changes: change to return void on error, add code to raise exceptions 
                    exceptions: DATABASE_ERROR, BAD_PARAM 
                    </t>
                <t>
                    api: xarModGetInfo changes: change to return void on error, add code to raise exceptions exceptions: 
                    DATABASE_ERROR, BAD_PARAM 
                    </t>
                <t>
                    api: xarModGetUserMods changes: change to return void on error, add code to raise exceptions 
                    exceptions: DATABASE_ERROR 
                    </t>
                <t>
                    api: xarModGetAdminMods changes: change to return void on error, add code to raise exceptions 
                    exceptions: DATABASE_ERROR 
                    </t>
                <t>
                    api: xarModAPILoad changes: change to return void on error, add code to raise exceptions exceptions: 
                    DATABASE_ERROR, BAD_PARAM, MODULE_NOT_EXIST, MODULE_FILE_NOT_EXIST 
                    </t>
                <t>
                    api: xarModDBInfoLoad changes: change to return void on error, add code to raise exceptions exceptions: 
                    DATABASE_ERROR, BAD_PARAM, MODULE_NOT_EXIST 
                    </t>
                <t>
                    api: xarModLoad changes: change to return void on error, add code to raise exceptions exceptions: 
                    DATABASE_ERROR, BAD_PARAM, MODULE_NOT_EXIST, MODULE_FILE_NOT_EXIST 
                    </t>
                <t>
                    api: xarModAPIFunc changes: change to return void on error, add code to raise exceptions exceptions: 
                    BAD_PARAM, MODULE_FUNC_NOT_EXIST 
                    </t>
                <t>
                    api: xarModFunc changes: change to return void on error, add code to raise exceptions exceptions: 
                    BAD_PARAM, MODULE_FUNC_NOT_EXIST 
                    </t>
                <t>
                    api: xarModURL changes: change to return void on error, add code to raise exceptions exceptions: 
                    BAD_PARAM 
                    </t>
                <t>
                    api: xarModAvailable changes: change to return void on error, add code to raise exceptions exceptions: 
                    DATABASE_ERROR, BAD_PARAM 
                    </t>
                <t>
                    api: xarModGetName changes: to be done 
                    </t>
                <t>
                    api: xarModRegisterHook changes: change to return void on error, add code to raise exceptions 
                    exceptions: DATABASE_ERROR 
                    </t>
                <t>
                    api: xarModUnregisterHook changes: change to return void on error, add code to raise exceptions 
                    exceptions: DATABASE_ERROR 
                    </t>
                <t>
                    api: xarModCallHooks changes: change to return void on error, add code to raise exceptions exceptions: 
                    DATABASE_ERROR 
                    </t>
                <t>
                    api: xarSecAddSchema changes: no changes 
                    </t>
                <t>
                    api: xarSecAuthAction changes: change to return void on error, add code to raise exceptions exceptions: 
                    DATABASE_ERROR 
                    </t>
                <t>
                    api: xarSecGetAuthInfo changes: change to return void on error, add code to raise exceptions exceptions: 
                    DATABASE_ERROR 
                    </t>
                <t>
                    api: xarSecGetLevel changes: no changes 
                    </t>
                <t>
                    api: xarSecGenAuthKey changes: no changes 
                    </t>
                <t>
                    api: xarSecConfirmAuthKey changes: no changes 
                    </t>
                <t>
                    api: xarSessionGetVar changes: no changes 
                    </t>
                <t>
                    api: xarSessionSetVar changes: no changes 
                    </t>
                <t>
                    api: xarSessionDelVar changes: no changes 
                    </t>
                <t>
                    api: xarUserLogIn changes: change to return void on error, add code to raise exceptions exceptions: 
                    DATABASE_ERROR, BAD_PARAM 
                    </t>
                <t>
                    api: xarUserLogOut changes: change to return void on error, add code to raise exceptions exceptions: 
                    DATABASE_ERROR 
                    </t>
                <t>
                    api: xarUserLoggedIn changes: no changes 
                    </t>
                <t>
                    api: xarUserGetTheme changes: no changes 
                    </t>
                <t>
                    api: xarUserGetLang changes: no changes 
                    </t>
                <t>
                    api: xarUserGetVar changes: change to return void on error, add code to raise exceptions exceptions: 
                    BAD_PARAM, ID_NOT_EXIST, NO_PERMISSION 
                    </t>
                <t>
                    api: xarUserSetVar changes: change to return void on error, add code to raise exceptions exceptions: 
                    BAD_PARAM, ID_NOT_EXIST, NO_PERMISSION 
                    </t>
                <t>
                    api: xarUserValidateVar changes: change to return void on error, add code to raise exceptions 
                    exceptions: BAD_PARAM, ID_NOT_EXIST
                    </t>
            </section>
            <section title="Changelog">
                <t>
                 0.1 (May 8, 2002)
                 </t>
                <t>
                 Extended Xaraya System Exceptions section.
                 </t>
                <t>
                 Added Xaraya API changes section.
                 </t>
                <t>
                 pre-0.1 (May 5, 2002)
                 </t>
                <t>
                 Initial Version by Marco Canini &lt;marco.canini@postnuke.com&gt;
                 </t>
            </section>
        </section>
    </middle>
</rfc>
