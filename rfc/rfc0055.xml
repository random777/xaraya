<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="rfc2629.xsl"?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd">

<!-- <?rfc private='my private memo'?>  Produce a private memo rather than a Xaraya-standard -->
<?rfc comments="yes"?>
<?rfc inline="no"?>
<?rfc topblock="yes"?>
<?rfc sortrefs="yes"?> <!-- Sort the references -->
<?rfc editing="no"?>
<?rfc tocdepth="2"?>
<?rfc toc="yes"?>

<rfc xmlns:ed="http://greenbytes.de/2002/rfcedit" 
     xmlns:xi="http://www.w3.org/2001/XInclude"
     number="0055" category="std" seriesNO="3" obsoletes="0010">

  <!-- frontmatter -->
	<xi:include href="rfc0055/front.xml"/>


  <!-- The middle section is used for the actual content of the RFC -->
  <middle>
    <!-- Introduction -->
    <xi:include href="rfc0055/introduction.xml"/>

    <!-- Required CSS classes -->
    <xi:include href="rfc0055/requiredcss.xml"/>

    <section title="Templates">
      <t>
        Each page in Blocklayout is assembled from a collection of templates and
        fitted with the necessary data. A "Master" template is loaded first.
        This template defines the basic layout of the page and what information
        will be presented. Each module function or block called from the Master
        template has a child template associated with it. The data it handles
        is parsed through this template before being inserted into the Master.
        In this manner, templates can be nested any number of levels deep.
        <figure title="Template relationships">
          <artwork type="image/gif" src="images/rfc0010_1.gif"/>
        </figure>
      </t>
      <t>
        Internal Templates (.xd) provide default output formatting for Xaraya
        modules. Themes cannot alter these templates, but may contain their
        own version of them. Be careful! Editing Internal Templates may cause
        Xaraya to behave unexpectedly or not at all.
      </t>
      <t>
        The first time a template is called, it is compiled into PHP code. It
        will not be compiled again unless the original copy is updated. This
        procedure allows a maximum of template flexibility without slowdown in
        page generation time.
      </t>
    </section>

    <section title="Blocklayout tags">
      <t>
        Tags in Blocklayout adhere to XML syntax. The standard Blocklayout
        namespace is "xar" and at this time that may not be changed. There is one
        root tag:
        <list style="symbols">
          <t><xref target="blocklayout">&lt;xar:blocklayout /&gt;</xref></t>
        </list>
        The following tags can be used in any context:
        <list style="symbols">
          <t><xref target="block">&lt;xar:block /&gt;</xref></t>
          <t><xref target="blockgroup">&lt;xar:blockgroup /&gt;</xref></t>
          <t><xref target="comment">&lt;xar:comment /&gt;</xref></t>
          <t><ed:ins><xref target="element">&lt;xar:element /&gt;</xref></ed:ins></t>
          <t><xref target="for">&lt;xar:for /&gt;</xref></t>
          <t><xref target="foreach">&lt;xar:foreach /&gt;</xref></t>
          <t><xref target="if">&lt;xar:if /&gt;</xref></t>
          <t><xref target="loop">&lt;xar:loop /&gt;</xref></t>
          <t><xref target="ml">&lt;xar:ml /&gt;</xref></t>
          <t><ed:del><xref target="mlkey">&lt;xar:mlkey /&gt;</xref>(can also be used as a child tag, see <xref target="ml">&lt;xar:ml /&gt;</xref>)</ed:del></t>
          <t><xref target="mlstring">&lt;xar:mlstring /&gt;</xref> (can also be used as a child tag, see <xref target="ml">&lt;xar:ml /&gt;</xref>)</t>
          <t><xref target="module">&lt;xar:module /&gt;</xref></t>
          <t><xref target="sec">&lt;xar:sec /&gt;</xref></t>
          <t><xref target="set">&lt;xar:set /&gt;</xref></t>
          <t><xref target="template">&lt;xar:template /&gt;</xref></t>
          <t><xref target="var">&lt;xar:var /&gt;</xref></t>
          <t><xref target="while">&lt;xar:while /&gt;</xref></t>
        </list>
        The following tags have a specific context:
        <list style="symbols">
          <t><ed:ins><xref target="attribute">&lt;xar:attribute /&gt;</xref></ed:ins></t>
          <t><xref target="else">&lt;xar:else /&gt;</xref></t>
          <t><xref target="elseif">&lt;xar:elseif /&gt;</xref></t>
          <t><xref target="break">&lt;xar:break /&gt;</xref></t>
          <t><xref target="continue">&lt;xar:continue /&gt;</xref></t>
          <t><xref target="mlvar">&lt;xar:mlvar /&gt;</xref></t>
        </list>
      </t>

      <section title="Referencing data within templates">
          <t>
          Blocklayout variables are delimited by # ... #. For example, the variable
          $foo is accessed by the #$foo# directive.
        </t>
        <t>
          String keys in arrays should be
          single quoted (#$foo['bar']#) rather than double (#$foo["bar"]#). The
          preferred syntax for keys uses a 'dot' to specify the keys.
          #$foo.bar# is equivalent to #$foo['bar']#. These can go down to any
          level and can include numbers, for example, $foo.bar.dee.2
        </t>
        <t>
          Similarly, referencing object members (properties and methods) can be
          done using the 'colon' notation. #$foo:bar# is equivalent to $foo-&gt;bar. 
          This is the only way to refer to object members, as the '&gt;' characters would
          have to be escaped.
        </t>
        <t>
          The 'dot' and 'colon' notation can also be combined if needed. For example:
          #$foo:bar.test# is equivalent too $foo-&gt;bar['test']. For array key, numeric and 
          variable keys are also recognized ( #$foo.$bar# equals
          $foo[$bar] and #$foo.4# equals $foo[4] )
          <cref>
            Take content and specs from wiki and put it in here 
          </cref>
        </t>
        
        <t>
          In addition to template variables, Blocklayout also allows direct access
          to a limited set of xarAPI functions (list to be determined). Function
          calls are represented as #xarAPIFunc($arg1, 'arg2')#. Function arguments
          should also be single quoted (as necessary). In general this is discouraged though.
        </t>
      </section>


      <section title="Comments in Templates">
        <t>
          Placing comments in Blocklayout templates is done by surrounding the
          content in question with &lt;xar:comment&gt; .... &lt;/xar:comment&gt; Content
          within these tags will <ed:replace><ed:del>be stripped
          from</ed:del><ed:ins>produce a comment in</ed:ins></ed:replace> the final output stream.
          Standard two-hyphen comments (&lt;!-- --&gt;) will be <ed:replace><ed:del>passed on to the
          output stream</ed:del><ed:ins>ignored</ed:ins></ed:replace>.
        </t>
        <t>
          <ed:del>
          We used to have the &lt;--- ---&gt; construct, but this is invalid XML, do NOT USE this
          anymore.</ed:del> Note that inside &lt;xar:comment/&gt; tags, things will still have to be valid
          XML<ed:ins>and be parsed by the BL
          compiler.</ed:ins> If you want complete freedom on what to
          put inside your comments, you'll have to <ed:replace><ed:del>experiment</ed:del><ed:ins>use</ed:ins>
          <ed:del>with CDATA sections and</ed:del></ed:replace> &lt;-- style comments inside the &lt;xar:comment&gt; tag.
        </t>
      </section>
      <section anchor="tagdescriptions" title="Tag descriptions and Attributes">
        <t>
          A note on logic tags: The condition attribute present on most logic
          tags will frequently call for the use of &lt;, &gt;, and &amp; characters. These
          characters are restricted in XML documents and may not be used in this context.
          Therefore, to present an easy, readable alternative to PHP comparison
          operators, Blocklayout uses Perl-like string operators within
          templates. Assignment operators are not affected. See below:

          <artwork>
BL operator PHP operator    English
eq          ==              equal to
id          ===             identical to
lt          &lt;               less than
gt          &gt;               greater than
le          &lt;=              less or equal to
ge          &gt;=              greater or equal to
ne          !=              not equal to
nd          !==             not identical to
and         and             and
or          or              or
xor         xor             exclusive or
not         not             not
      </artwork>
        </t>
        <ed:issue name="conflict between operators and MLS" type="design flaw" status="open">
          <ed:item date="2006-01-23" entered-by="mrb">
            The operators, notably 'le' and 'ne' in french and 'ge' in
            dutch and 'not' in english, may give surprising results if
            used in #xarML('something with le , ne not or ge in it')#
          </ed:item>
          <ed:item date="2006-01-31" entered-by="mrb">
            Put this into a proper table 
          </ed:item>
        </ed:issue>

        <t>
          For the description of the tag attributes the following conventions are used:
          <list>
            <t><spanx>attributename</spanx> indicates the name of the attribute described</t>
            <t><spanx>[attribute]</spanx> when square brackets surround the attribute this indicates an optional attribute</t>
            <t><spanx>[attribute]</spanx> (defaultvalue) indicates an optional attribute, the default value is
              given between the brackets
            </t>
            <t><spanx>attribute</spanx> {(value)|value2} indicates that the attribute can have the values 'value' and
              'value2' of which 'value' is the default if none is specified.
            </t>
          </list>
        </t>
        <t>
          The 'context' section for each tag description describes to
          which 'parent' tag the described tag belongs, in the sense of
          required structure, and the child tags which are expected
          before the closing tag, again in terms of required
          structure.
        </t>
        <ed:ins>
          <t>
            Starting with Blocklayout version 2, we adopt a generic
            mechanism for dealing with the so called 'open' and
            'closed' formats for tags. Previously, not explicitly
            allowed formats generated error messages and/or exceptions
            in Xaraya.
          </t>
          <t>
            The <spanx style="strong">base rule</spanx> we adopt is that an 'empty' or 'closed' tag
            like &lt;xar:tag /&gt; means exactly the same as if you had
            written &lt;xar:tag&gt;&lt;/xar:tag&gt;. Not only does
            this make our implementation simpler, but it also is
            inline with how XML in general behaves.
          </t>
          <t>
            The above is NOT true in XML if an element is explicitly
            <spanx style="strong">declared</spanx> to have only an 'open'
            form. That is, an open element and a closing element must
            always be use, since there MUST always be content nodes.
            Where this situation is applicable for Blocklayout we will
            explicitly say so for the relevant tag. In those situation
            we deviate from the aforementioned base rule.
          </t>
          <t>
            When the 'xar' XML dialect evolves, elements might receive
            a formal declaration. Since that declaration will be part
            of an XML schema and DTD validating parsers will (be able
            to) issue errors even before the file can be used.
          </t>
          <t>
            With the above in mind, using a tag in its 'empty' form
            while it is typically used in a from with child tags, does
            not often produce very interesting results. (e.g. an empty
            comment) but does also not produce something invalid
            either. (and often harmless) For most tags in their
            description we have left out the section on their 'forms'
            if there is nothing interesting to say about it.
          </t>
        </ed:ins>

        <!-- xar:blocklayout -->
        <xi:include href="rfc0055/blocklayout.xml"/>
        <!-- xar:attribute -->
        <ed:ins>
          <xi:include href="rfc0055/attribute.xml"/>
        </ed:ins>
        <!-- xar:block -->
        <xi:include href="rfc0055/block.xml"/>
        <!-- xar:blockgroup -->
        <xi:include href="rfc0055/blockgroup.xml"/>
        <!-- xar:break -->
        <xi:include href="rfc0055/break.xml"/>
        <!-- xar:comment -->
        <xi:include href="rfc0055/comment.xml"/>
        <!-- xar:continue -->
        <xi:include href="rfc0055/continue.xml"/>
        <!-- xar:element -->
        <ed:ins>
          <xi:include href="rfc0055/element.xml"/>
        </ed:ins>
        <!-- xar:else -->
        <xi:include href="rfc0055/else.xml"/>
        <!-- xar:elseif -->
        <xi:include href="rfc0055/elseif.xml"/>
        <!-- xar:for -->
        <xi:include href="rfc0055/for.xml"/>
        <!-- xar:foreach -->
        <xi:include href="rfc0055/foreach.xml"/>
        <!-- xar:if -->
        <xi:include href="rfc0055/if.xml"/>
        <!-- xar:loop -->
        <xi:include href="rfc0055/loop.xml"/>
        <!-- xar:ml -->
        <xi:include href="rfc0055/ml.xml"/>
        <!-- xar:mlkey -->
        <ed:del resolves="mlkey tag can be removed">
          <xi:include href="rfc0055/mlkey.xml"/>
        </ed:del>
        <!-- xar:mlstring -->
        <xi:include href="rfc0055/mlstring.xml"/>
        <!-- xar:mlvar -->
        <xi:include href="rfc0055/mlvar.xml"/>
        <!-- xar:module -->
        <xi:include href="rfc0055/module.xml"/>
        <!-- xar:sec -->
        <xi:include href="rfc0055/sec.xml"/>
        <!-- xar:set -->
        <xi:include href="rfc0055/set.xml"/>
        <!-- xar:template -->
        <xi:include href="rfc0055/template.xml"/>
        <!-- xar:var -->
        <xi:include href="rfc0055/var.xml"/>
        <!-- xar:while -->
        <xi:include href="rfc0055/while.xml"/>
      </section>
    </section>

    <section title="Tags Interdependence">
      <t>Logical Tags:
        <list style="symbols">
          <t><xref target="for">&lt;xar:for /&gt;</xref></t>
          <t><xref target="foreach">&lt;xar:foreach /&gt;</xref></t>
          <t><xref target="if">&lt;xar:if /&gt;</xref></t>
          <t><xref target="loop">&lt;xar:loop /&gt;</xref></t>
          <t><xref target="while">&lt;xar:while /&gt;</xref></t>
        </list>
      </t>
      <t>Value Returning Tags (isAssignable()):
        <list style="symbols">
          <t><xref target="block">&lt;xar:block /&gt;</xref></t>
          <t><xref target="blockgroup">&lt;xar:blockgroup /&gt;</xref></t>
          <t><xref target="ml">&lt;xar:ml /&gt;</xref></t>
          <t><xref target="mlkey">&lt;xar:mlkey /&gt;</xref>(can also be used as a child tag, see <xref target="ml">&lt;xar:ml /&gt;</xref>)</t>
          <t><xref target="mlstring">&lt;xar:mlstring /&gt;</xref> (can also be used as a child tag, see <xref target="ml">&lt;xar:ml /&gt;</xref>)</t>
          <t><xref target="ml">&lt;xar:module /&gt;</xref></t>
          <t><xref target="sec">&lt;xar:sec /&gt;</xref></t>
          <t><xref target="module">&lt;xar:module /&gt;</xref></t>
          <t><xref target="template">&lt;xar:template /&gt;</xref></t>
          <t><xref target="var">&lt;xar:var /&gt;</xref></t>
        </list>
            </t>
      <t>Child only tags:
        <list style="symbols">
          <t><xref target="else">&lt;xar:else /&gt;</xref></t>
          <t><xref target="elseif">&lt;xar:elseif /&gt;</xref></t>
          <t><xref target="break">&lt;xar:break /&gt;</xref></t>
          <t><xref target="continue">&lt;xar:continue /&gt;</xref></t>
          <t><xref target="mlvar">&lt;xar:mlvar /&gt;</xref></t>
        </list>
      </t>
      <t>Variable Value Setting (needParameter()):
        <list style="symbols">
          <t><xref target="set">&lt;xar:set /&gt;</xref></t>
        </list>
      </t>
    </section>

    <!-- Entities -->
    <xi:include href="rfc0055/entities.xml"/>

    <!-- DD properties -->
    <xi:include href="rfc0055/ddproperties.xml"/>

    <section title="Notes">
      <t>
        Blocklayout output is not restricted to HTML. Potential output formats
        include HTML, RSS, and RDF.
      </t>
    </section>
    <section title="Tag registration">
      <t>
        Each module may expand the list of available tags as necessary. For
        example, the Reviews module may define &lt;xar:reviews-review /&gt;. Modules
        must register their tags with the system in order for the compiler to
        recognize them. Tag registration is best handled by a module's init()
        function. Removing tags from the system (unregistration) is best
        performed in the module's remove() function.
        <artwork>
          xarTplRegisterTag('module_name', 'tag_name', tag_object, 'handler_func_name');
          xarTplUnregisterTag('tag_name');
        </artwork>
      </t>
      <t>
        Non-core tags must adhere to some simple naming conventions. This is
        to prevent conflicts between modules that implement different tags
        with the same name. A non-core tag must be prefixed by a module
        identifier (the name of the module, or another string assigned during
        the module certification process), a hyphen, and a string which
        loosely described the tags purpose. Tag names must begin with a
        letter.
      </t>
      <t>Example:
        <artwork>
          xarTplRegisterTag('reviews', 'reviews-review', ...);
        </artwork>
      </t>
      <t>This would register the tag:
        <artwork>
          &lt;xar:reviews-review/&gt;
        </artwork>
      </t>
      <t>
        Remember, "xar" is the namespace, and is not part of the tag
        name, even though blocklayout requires the namespace identifier to be
        present in every tag.
      </t>
    </section>
  </middle>

  <!-- Back matter -->
  <xi:include href="rfc0055/back.xml"/>

</rfc>
